score,s1,s2
0.8676,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",These include distributed software revision control systems.
0.8719,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8799,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",This course is the first of three core computer science courses on programming.
0.8800,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",Understand basic types and the benefits of static typing.
0.8811,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8875,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8890,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8896,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",Understand the legal context for protection of software as intellectual property.
0.8938,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9016,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9029,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9062,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9079,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9082,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",Describe and apply alternative computational paradigms to simple problems.
0.9092,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9103,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9140,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9159,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9402,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9412,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8461,Many of the skills gained are of use outside formal project management environments.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8582,Many of the skills gained are of use outside formal project management environments.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8618,Many of the skills gained are of use outside formal project management environments.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8705,Many of the skills gained are of use outside formal project management environments.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8710,Many of the skills gained are of use outside formal project management environments.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8828,Many of the skills gained are of use outside formal project management environments.,These include distributed software revision control systems.
0.8867,Many of the skills gained are of use outside formal project management environments.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8893,Many of the skills gained are of use outside formal project management environments.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8929,Many of the skills gained are of use outside formal project management environments.,This course is the first of three core computer science courses on programming.
0.8956,Many of the skills gained are of use outside formal project management environments.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8978,Many of the skills gained are of use outside formal project management environments.,Understand the legal context for protection of software as intellectual property.
0.8981,Many of the skills gained are of use outside formal project management environments.,Understand basic types and the benefits of static typing.
0.9068,Many of the skills gained are of use outside formal project management environments.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9085,Many of the skills gained are of use outside formal project management environments.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9090,Many of the skills gained are of use outside formal project management environments.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9093,Many of the skills gained are of use outside formal project management environments.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9150,Many of the skills gained are of use outside formal project management environments.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9198,Many of the skills gained are of use outside formal project management environments.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9221,Many of the skills gained are of use outside formal project management environments.,Describe and apply alternative computational paradigms to simple problems.
0.9293,Many of the skills gained are of use outside formal project management environments.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8285,"Leadership,  Management, Professionalism, Ethics and Teamwork","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8308,"Leadership,  Management, Professionalism, Ethics and Teamwork",This course is the first of three core computer science courses on programming.
0.8348,"Leadership,  Management, Professionalism, Ethics and Teamwork",These include distributed software revision control systems.
0.8380,"Leadership,  Management, Professionalism, Ethics and Teamwork","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8381,"Leadership,  Management, Professionalism, Ethics and Teamwork","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8390,"Leadership,  Management, Professionalism, Ethics and Teamwork","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8415,"Leadership,  Management, Professionalism, Ethics and Teamwork",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8444,"Leadership,  Management, Professionalism, Ethics and Teamwork","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8454,"Leadership,  Management, Professionalism, Ethics and Teamwork",Understand basic types and the benefits of static typing.
0.8481,"Leadership,  Management, Professionalism, Ethics and Teamwork","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8488,"Leadership,  Management, Professionalism, Ethics and Teamwork","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8502,"Leadership,  Management, Professionalism, Ethics and Teamwork","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8509,"Leadership,  Management, Professionalism, Ethics and Teamwork",Understand the legal context for protection of software as intellectual property.
0.8513,"Leadership,  Management, Professionalism, Ethics and Teamwork","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8575,"Leadership,  Management, Professionalism, Ethics and Teamwork","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8623,"Leadership,  Management, Professionalism, Ethics and Teamwork","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8628,"Leadership,  Management, Professionalism, Ethics and Teamwork",Describe and apply alternative computational paradigms to simple problems.
0.8658,"Leadership,  Management, Professionalism, Ethics and Teamwork",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8699,"Leadership,  Management, Professionalism, Ethics and Teamwork",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8741,"Leadership,  Management, Professionalism, Ethics and Teamwork","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.7631,Communication,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.7665,Communication,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.7747,Communication,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.7802,Communication,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.7818,Communication,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.7850,Communication,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.7921,Communication,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.7931,Communication,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.7944,Communication,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8015,Communication,This course is the first of three core computer science courses on programming.
0.8095,Communication,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8159,Communication,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8173,Communication,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8199,Communication,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8231,Communication,Understand the legal context for protection of software as intellectual property.
0.8236,Communication,These include distributed software revision control systems.
0.8252,Communication,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8292,Communication,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8445,Communication,Describe and apply alternative computational paradigms to simple problems.
0.8535,Communication,Understand basic types and the benefits of static typing.
0.8031,Project Context,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8129,Project Context,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8168,Project Context,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8281,Project Context,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8296,Project Context,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8322,Project Context,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8381,Project Context,This course is the first of three core computer science courses on programming.
0.8423,Project Context,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8456,Project Context,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8466,Project Context,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8496,Project Context,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8606,Project Context,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8633,Project Context,These include distributed software revision control systems.
0.8647,Project Context,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8686,Project Context,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8693,Project Context,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8695,Project Context,Understand the legal context for protection of software as intellectual property.
0.8712,Project Context,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8820,Project Context,Understand basic types and the benefits of static typing.
0.8915,Project Context,Describe and apply alternative computational paradigms to simple problems.
0.8363,Project Management Body of Knowledge (PMBoK),"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8391,Project Management Body of Knowledge (PMBoK),"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8399,Project Management Body of Knowledge (PMBoK),"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8434,Project Management Body of Knowledge (PMBoK),"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8520,Project Management Body of Knowledge (PMBoK),"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8527,Project Management Body of Knowledge (PMBoK),"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8627,Project Management Body of Knowledge (PMBoK),This course is the first of three core computer science courses on programming.
0.8640,Project Management Body of Knowledge (PMBoK),Understand basic types and the benefits of static typing.
0.8654,Project Management Body of Knowledge (PMBoK),The functional paradigm demonstrates elegant solutions to many programming problems.
0.8654,Project Management Body of Knowledge (PMBoK),"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8685,Project Management Body of Knowledge (PMBoK),"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8714,Project Management Body of Knowledge (PMBoK),"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8733,Project Management Body of Knowledge (PMBoK),"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8736,Project Management Body of Knowledge (PMBoK),"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8741,Project Management Body of Knowledge (PMBoK),"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8747,Project Management Body of Knowledge (PMBoK),These include distributed software revision control systems.
0.8782,Project Management Body of Knowledge (PMBoK),It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8828,Project Management Body of Knowledge (PMBoK),The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8847,Project Management Body of Knowledge (PMBoK),Understand the legal context for protection of software as intellectual property.
0.8884,Project Management Body of Knowledge (PMBoK),Describe and apply alternative computational paradigms to simple problems.
0.8321,Agile Project Planning,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8335,Agile Project Planning,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8337,Agile Project Planning,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8354,Agile Project Planning,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8462,Agile Project Planning,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8487,Agile Project Planning,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8534,Agile Project Planning,This course is the first of three core computer science courses on programming.
0.8582,Agile Project Planning,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8598,Agile Project Planning,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8690,Agile Project Planning,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8730,Agile Project Planning,Understand the legal context for protection of software as intellectual property.
0.8733,Agile Project Planning,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8746,Agile Project Planning,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8759,Agile Project Planning,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8781,Agile Project Planning,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8798,Agile Project Planning,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8859,Agile Project Planning,Understand basic types and the benefits of static typing.
0.8918,Agile Project Planning,These include distributed software revision control systems.
0.8923,Agile Project Planning,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9026,Agile Project Planning,Describe and apply alternative computational paradigms to simple problems.
0.8279,Agile Project Management,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8299,Agile Project Management,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8305,Agile Project Management,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8314,Agile Project Management,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8385,Agile Project Management,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8409,Agile Project Management,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8499,Agile Project Management,This course is the first of three core computer science courses on programming.
0.8537,Agile Project Management,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8555,Agile Project Management,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8631,Agile Project Management,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8683,Agile Project Management,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8697,Agile Project Management,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8704,Agile Project Management,Understand the legal context for protection of software as intellectual property.
0.8718,Agile Project Management,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8718,Agile Project Management,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8719,Agile Project Management,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8749,Agile Project Management,Understand basic types and the benefits of static typing.
0.8854,Agile Project Management,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8918,Agile Project Management,Describe and apply alternative computational paradigms to simple problems.
0.9007,Agile Project Management,These include distributed software revision control systems.
0.8199,Project Scope Management,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8236,Project Scope Management,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8309,Project Scope Management,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8375,Project Scope Management,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8398,Project Scope Management,This course is the first of three core computer science courses on programming.
0.8426,Project Scope Management,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8428,Project Scope Management,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8435,Project Scope Management,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8513,Project Scope Management,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8514,Project Scope Management,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8609,Project Scope Management,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8627,Project Scope Management,Understand the legal context for protection of software as intellectual property.
0.8655,Project Scope Management,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8656,Project Scope Management,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8659,Project Scope Management,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8675,Project Scope Management,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8730,Project Scope Management,Understand basic types and the benefits of static typing.
0.8760,Project Scope Management,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8830,Project Scope Management,Describe and apply alternative computational paradigms to simple problems.
0.8839,Project Scope Management,These include distributed software revision control systems.
0.8097,Quality & Risk Management,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8138,Quality & Risk Management,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8181,Quality & Risk Management,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8222,Quality & Risk Management,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8254,Quality & Risk Management,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8302,Quality & Risk Management,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8322,Quality & Risk Management,This course is the first of three core computer science courses on programming.
0.8447,Quality & Risk Management,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8477,Quality & Risk Management,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8478,Quality & Risk Management,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8483,Quality & Risk Management,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8495,Quality & Risk Management,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8500,Quality & Risk Management,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8513,Quality & Risk Management,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8539,Quality & Risk Management,Understand basic types and the benefits of static typing.
0.8585,Quality & Risk Management,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8659,Quality & Risk Management,These include distributed software revision control systems.
0.8659,Quality & Risk Management,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8662,Quality & Risk Management,Understand the legal context for protection of software as intellectual property.
0.8670,Quality & Risk Management,Describe and apply alternative computational paradigms to simple problems.
0.8266,Project Control and Governance,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8278,Project Control and Governance,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8353,Project Control and Governance,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8372,Project Control and Governance,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8372,Project Control and Governance,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8409,Project Control and Governance,This course is the first of three core computer science courses on programming.
0.8410,Project Control and Governance,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8455,Project Control and Governance,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8534,Project Control and Governance,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8562,Project Control and Governance,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8573,Project Control and Governance,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8594,Project Control and Governance,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8598,Project Control and Governance,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8601,Project Control and Governance,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8647,Project Control and Governance,Understand basic types and the benefits of static typing.
0.8669,Project Control and Governance,Understand the legal context for protection of software as intellectual property.
0.8740,Project Control and Governance,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8805,Project Control and Governance,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8843,Project Control and Governance,Describe and apply alternative computational paradigms to simple problems.
0.8901,Project Control and Governance,These include distributed software revision control systems.
0.8459,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",This course is the first of three core computer science courses on programming.
0.8522,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8554,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8561,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8567,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",These include distributed software revision control systems.
0.8659,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8689,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",Understand basic types and the benefits of static typing.
0.8740,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8743,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8790,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8791,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8825,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8893,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8907,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8913,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8934,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",Describe and apply alternative computational paradigms to simple problems.
0.8970,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9021,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",Understand the legal context for protection of software as intellectual property.
0.9061,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9117,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8693,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8697,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8709,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,This course is the first of three core computer science courses on programming.
0.8764,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8876,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,These include distributed software revision control systems.
0.8890,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,Understand basic types and the benefits of static typing.
0.8922,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8930,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8960,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8968,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9031,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9049,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,Understand the legal context for protection of software as intellectual property.
0.9060,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9070,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9094,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9123,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9126,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9197,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9216,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9294,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,Describe and apply alternative computational paradigms to simple problems.
0.8284,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",This course is the first of three core computer science courses on programming.
0.8439,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",These include distributed software revision control systems.
0.8497,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8519,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",Understand the legal context for protection of software as intellectual property.
0.8611,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8618,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8634,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",Understand basic types and the benefits of static typing.
0.8641,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8719,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8745,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8747,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8754,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8841,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",Describe and apply alternative computational paradigms to simple problems.
0.8861,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8868,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8883,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8900,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8921,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8986,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8996,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8528,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",This course is the first of three core computer science courses on programming.
0.8629,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",These include distributed software revision control systems.
0.8680,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8725,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8760,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8774,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8841,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",Understand basic types and the benefits of static typing.
0.8876,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",Understand the legal context for protection of software as intellectual property.
0.8925,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8937,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8953,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8995,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8998,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9010,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9014,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9050,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9066,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9072,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9078,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9304,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",Describe and apply alternative computational paradigms to simple problems.
0.8465,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",These include distributed software revision control systems.
0.8500,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8503,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8537,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8546,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",This course is the first of three core computer science courses on programming.
0.8565,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8650,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8700,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8762,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8772,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",Understand the legal context for protection of software as intellectual property.
0.8774,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8776,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",Understand basic types and the benefits of static typing.
0.8836,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",Describe and apply alternative computational paradigms to simple problems.
0.8862,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8865,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8907,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8972,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8985,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8991,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9085,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.

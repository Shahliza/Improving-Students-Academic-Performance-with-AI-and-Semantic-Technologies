score,s1,s2
0.8348,The course introduces students to some fundamentals of research methodology.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8367,The course introduces students to some fundamentals of research methodology.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8552,The course introduces students to some fundamentals of research methodology.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8662,The course introduces students to some fundamentals of research methodology.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8749,The course introduces students to some fundamentals of research methodology.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8789,The course introduces students to some fundamentals of research methodology.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8858,The course introduces students to some fundamentals of research methodology.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8874,The course introduces students to some fundamentals of research methodology.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8921,The course introduces students to some fundamentals of research methodology.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8969,The course introduces students to some fundamentals of research methodology.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8984,The course introduces students to some fundamentals of research methodology.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8993,The course introduces students to some fundamentals of research methodology.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9002,The course introduces students to some fundamentals of research methodology.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9117,The course introduces students to some fundamentals of research methodology.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9154,The course introduces students to some fundamentals of research methodology.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9310,The course introduces students to some fundamentals of research methodology.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9464,The course introduces students to some fundamentals of research methodology.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8686,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8693,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8696,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8779,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8794,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8839,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8888,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8891,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8902,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8913,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8930,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9048,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9055,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9088,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9118,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9125,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9172,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8560,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8641,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8733,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8744,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8788,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8868,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8888,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8919,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8920,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8923,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8976,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9033,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9090,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9240,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9300,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9369,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9407,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8805,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8836,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8890,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8957,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8997,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9009,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9112,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9121,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9158,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9181,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9187,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9208,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9248,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9253,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9257,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9295,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9332,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8682,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8699,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8722,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8762,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8772,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8786,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8811,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8864,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8943,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8975,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9018,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9116,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9188,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9229,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9323,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9349,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9542,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8727,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8781,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8813,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8829,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8846,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8884,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8949,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8959,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8969,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8971,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9050,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9052,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9106,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9200,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9250,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9356,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9442,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8582,This includes demonstrated skills in the writing of abstracts and research papers.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8606,This includes demonstrated skills in the writing of abstracts and research papers.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8620,This includes demonstrated skills in the writing of abstracts and research papers.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8816,This includes demonstrated skills in the writing of abstracts and research papers.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8914,This includes demonstrated skills in the writing of abstracts and research papers.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8954,This includes demonstrated skills in the writing of abstracts and research papers.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8976,This includes demonstrated skills in the writing of abstracts and research papers.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9016,This includes demonstrated skills in the writing of abstracts and research papers.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9017,This includes demonstrated skills in the writing of abstracts and research papers.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9050,This includes demonstrated skills in the writing of abstracts and research papers.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9061,This includes demonstrated skills in the writing of abstracts and research papers.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9064,This includes demonstrated skills in the writing of abstracts and research papers.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9077,This includes demonstrated skills in the writing of abstracts and research papers.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9144,This includes demonstrated skills in the writing of abstracts and research papers.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9257,This includes demonstrated skills in the writing of abstracts and research papers.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9289,This includes demonstrated skills in the writing of abstracts and research papers.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9440,This includes demonstrated skills in the writing of abstracts and research papers.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8390,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8391,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8420,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8424,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8480,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8573,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8598,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8611,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8672,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8697,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8753,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8801,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8883,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8971,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8991,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9114,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9273,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8729,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8769,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8787,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8810,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8833,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8845,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8856,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8876,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8892,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8894,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8901,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8972,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9015,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9054,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9234,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9244,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9264,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8237,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8383,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8391,Demonstrate an ability to undertake and manage a research project of significant size and scope.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8407,Demonstrate an ability to undertake and manage a research project of significant size and scope.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8419,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8443,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8473,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8492,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8520,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8552,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8631,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8689,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8786,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8859,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8938,Demonstrate an ability to undertake and manage a research project of significant size and scope.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8965,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9047,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8548,Understanding of the process of identifying and formulating research problems.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8716,Understanding of the process of identifying and formulating research problems.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8728,Understanding of the process of identifying and formulating research problems.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8753,Understanding of the process of identifying and formulating research problems.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8761,Understanding of the process of identifying and formulating research problems.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8770,Understanding of the process of identifying and formulating research problems.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8847,Understanding of the process of identifying and formulating research problems.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8848,Understanding of the process of identifying and formulating research problems.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8884,Understanding of the process of identifying and formulating research problems.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8970,Understanding of the process of identifying and formulating research problems.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8999,Understanding of the process of identifying and formulating research problems.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9009,Understanding of the process of identifying and formulating research problems.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9058,Understanding of the process of identifying and formulating research problems.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9081,Understanding of the process of identifying and formulating research problems.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9147,Understanding of the process of identifying and formulating research problems.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9171,Understanding of the process of identifying and formulating research problems.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9232,Understanding of the process of identifying and formulating research problems.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8574,Ability to carry out literature searches and some ability to critically evaluate literature.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8595,Ability to carry out literature searches and some ability to critically evaluate literature.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8647,Ability to carry out literature searches and some ability to critically evaluate literature.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8688,Ability to carry out literature searches and some ability to critically evaluate literature.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8692,Ability to carry out literature searches and some ability to critically evaluate literature.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8729,Ability to carry out literature searches and some ability to critically evaluate literature.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8793,Ability to carry out literature searches and some ability to critically evaluate literature.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8808,Ability to carry out literature searches and some ability to critically evaluate literature.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8809,Ability to carry out literature searches and some ability to critically evaluate literature.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8846,Ability to carry out literature searches and some ability to critically evaluate literature.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8871,Ability to carry out literature searches and some ability to critically evaluate literature.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8963,Ability to carry out literature searches and some ability to critically evaluate literature.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8965,Ability to carry out literature searches and some ability to critically evaluate literature.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8978,Ability to carry out literature searches and some ability to critically evaluate literature.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9115,Ability to carry out literature searches and some ability to critically evaluate literature.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9174,Ability to carry out literature searches and some ability to critically evaluate literature.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9361,Ability to carry out literature searches and some ability to critically evaluate literature.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8471,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8481,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8534,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8580,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8590,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8611,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8619,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8620,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8668,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8691,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8697,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8730,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8799,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8880,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8921,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9185,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9265,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8454,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8497,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8528,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8703,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8716,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8745,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8786,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8795,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8804,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8836,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8839,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8897,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8988,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9016,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9164,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9194,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9239,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."

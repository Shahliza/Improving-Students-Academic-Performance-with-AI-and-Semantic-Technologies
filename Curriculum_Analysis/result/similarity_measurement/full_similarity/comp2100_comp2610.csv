score,s1,s2
0.8311,Information theory studies the fundamental limits of the representation and transmission of information.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8365,Information theory studies the fundamental limits of the representation and transmission of information.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8421,Information theory studies the fundamental limits of the representation and transmission of information.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8471,Information theory studies the fundamental limits of the representation and transmission of information.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8549,Information theory studies the fundamental limits of the representation and transmission of information.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8622,Information theory studies the fundamental limits of the representation and transmission of information.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8660,Information theory studies the fundamental limits of the representation and transmission of information.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8668,Information theory studies the fundamental limits of the representation and transmission of information.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8681,Information theory studies the fundamental limits of the representation and transmission of information.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8749,Information theory studies the fundamental limits of the representation and transmission of information.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8782,Information theory studies the fundamental limits of the representation and transmission of information.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8837,Information theory studies the fundamental limits of the representation and transmission of information.,Apply fundamental programming concepts for medium scale programs.
0.8872,Information theory studies the fundamental limits of the representation and transmission of information.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8873,Information theory studies the fundamental limits of the representation and transmission of information.,The course also treats intellectual property considerations in software development and deployment.
0.9020,Information theory studies the fundamental limits of the representation and transmission of information.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8365,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8420,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8479,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",Apply fundamental programming concepts for medium scale programs.
0.8554,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8619,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8667,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8683,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8696,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",The course also treats intellectual property considerations in software development and deployment.
0.8741,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8763,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8779,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Understand, apply, and analyse state and state machines in expressing computations."
0.8800,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8858,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8870,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9057,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8694,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8745,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8908,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8982,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9051,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9061,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",The course also treats intellectual property considerations in software development and deployment.
0.9075,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9087,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9100,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",Apply fundamental programming concepts for medium scale programs.
0.9166,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9167,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9180,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9243,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9260,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9339,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Understand, apply, and analyse state and state machines in expressing computations."
0.8308,Understand the principles of data compression.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8350,Understand the principles of data compression.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8545,Understand the principles of data compression.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8581,Understand the principles of data compression.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8637,Understand the principles of data compression.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8644,Understand the principles of data compression.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8656,Understand the principles of data compression.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8658,Understand the principles of data compression.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8699,Understand the principles of data compression.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8715,Understand the principles of data compression.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8785,Understand the principles of data compression.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8869,Understand the principles of data compression.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8951,Understand the principles of data compression.,The course also treats intellectual property considerations in software development and deployment.
0.9011,Understand the principles of data compression.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9074,Understand the principles of data compression.,Apply fundamental programming concepts for medium scale programs.
0.7999,Compute entropy and mutual information of random variables.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8005,Compute entropy and mutual information of random variables.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8113,Compute entropy and mutual information of random variables.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8193,Compute entropy and mutual information of random variables.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8200,Compute entropy and mutual information of random variables.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8236,Compute entropy and mutual information of random variables.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8287,Compute entropy and mutual information of random variables.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8328,Compute entropy and mutual information of random variables.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8356,Compute entropy and mutual information of random variables.,The course also treats intellectual property considerations in software development and deployment.
0.8525,Compute entropy and mutual information of random variables.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8532,Compute entropy and mutual information of random variables.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8550,Compute entropy and mutual information of random variables.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8554,Compute entropy and mutual information of random variables.,Apply fundamental programming concepts for medium scale programs.
0.8719,Compute entropy and mutual information of random variables.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8781,Compute entropy and mutual information of random variables.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8714,Implement and analyse basic coding and compression algorithms.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8768,Implement and analyse basic coding and compression algorithms.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8813,Implement and analyse basic coding and compression algorithms.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8850,Implement and analyse basic coding and compression algorithms.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8866,Implement and analyse basic coding and compression algorithms.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8869,Implement and analyse basic coding and compression algorithms.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9010,Implement and analyse basic coding and compression algorithms.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9011,Implement and analyse basic coding and compression algorithms.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9029,Implement and analyse basic coding and compression algorithms.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9072,Implement and analyse basic coding and compression algorithms.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9082,Implement and analyse basic coding and compression algorithms.,The course also treats intellectual property considerations in software development and deployment.
0.9119,Implement and analyse basic coding and compression algorithms.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9187,Implement and analyse basic coding and compression algorithms.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9239,Implement and analyse basic coding and compression algorithms.,Apply fundamental programming concepts for medium scale programs.
0.9314,Implement and analyse basic coding and compression algorithms.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8754,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8813,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8905,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8933,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8973,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9023,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9077,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,The course also treats intellectual property considerations in software development and deployment.
0.9107,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9114,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,Apply fundamental programming concepts for medium scale programs.
0.9130,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9136,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9138,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9163,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9212,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9293,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8699,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8716,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8859,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8978,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8981,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9006,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",The course also treats intellectual property considerations in software development and deployment.
0.9014,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9115,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9132,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9137,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9139,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9164,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",Apply fundamental programming concepts for medium scale programs.
0.9169,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9210,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Understand, apply, and analyse state and state machines in expressing computations."
0.9383,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8454,Know the basic concepts regarding communications over noisy channels.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8472,Know the basic concepts regarding communications over noisy channels.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8731,Know the basic concepts regarding communications over noisy channels.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8753,Know the basic concepts regarding communications over noisy channels.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8761,Know the basic concepts regarding communications over noisy channels.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8852,Know the basic concepts regarding communications over noisy channels.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8868,Know the basic concepts regarding communications over noisy channels.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8891,Know the basic concepts regarding communications over noisy channels.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8935,Know the basic concepts regarding communications over noisy channels.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8958,Know the basic concepts regarding communications over noisy channels.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8966,Know the basic concepts regarding communications over noisy channels.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8973,Know the basic concepts regarding communications over noisy channels.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9057,Know the basic concepts regarding communications over noisy channels.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9081,Know the basic concepts regarding communications over noisy channels.,The course also treats intellectual property considerations in software development and deployment.
0.9329,Know the basic concepts regarding communications over noisy channels.,Apply fundamental programming concepts for medium scale programs.

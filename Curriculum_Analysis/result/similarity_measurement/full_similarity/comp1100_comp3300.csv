score,s1,s2
0.8567,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",These include distributed software revision control systems.
0.8573,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8609,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8615,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",This course is the first of three core computer science courses on programming.
0.8656,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8696,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8701,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Understand the legal context for protection of software as intellectual property.
0.8710,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Understand basic types and the benefits of static typing.
0.8732,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8761,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8784,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8817,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8878,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8884,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Describe and apply alternative computational paradigms to simple problems.
0.8950,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8957,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8976,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9009,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9016,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9149,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8418,The lectures will also address recent literature describing advances in operating systems.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8459,The lectures will also address recent literature describing advances in operating systems.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8517,The lectures will also address recent literature describing advances in operating systems.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8527,The lectures will also address recent literature describing advances in operating systems.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8552,The lectures will also address recent literature describing advances in operating systems.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8721,The lectures will also address recent literature describing advances in operating systems.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8740,The lectures will also address recent literature describing advances in operating systems.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8805,The lectures will also address recent literature describing advances in operating systems.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8875,The lectures will also address recent literature describing advances in operating systems.,This course is the first of three core computer science courses on programming.
0.8899,The lectures will also address recent literature describing advances in operating systems.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8912,The lectures will also address recent literature describing advances in operating systems.,Understand the legal context for protection of software as intellectual property.
0.8941,The lectures will also address recent literature describing advances in operating systems.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8947,The lectures will also address recent literature describing advances in operating systems.,These include distributed software revision control systems.
0.8970,The lectures will also address recent literature describing advances in operating systems.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8974,The lectures will also address recent literature describing advances in operating systems.,Understand basic types and the benefits of static typing.
0.8984,The lectures will also address recent literature describing advances in operating systems.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9047,The lectures will also address recent literature describing advances in operating systems.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9126,The lectures will also address recent literature describing advances in operating systems.,Describe and apply alternative computational paradigms to simple problems.
0.9127,The lectures will also address recent literature describing advances in operating systems.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9146,The lectures will also address recent literature describing advances in operating systems.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8207,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8259,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",This course is the first of three core computer science courses on programming.
0.8450,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Understand the legal context for protection of software as intellectual property.
0.8573,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8612,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8625,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",These include distributed software revision control systems.
0.8640,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Understand basic types and the benefits of static typing.
0.8682,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Describe and apply alternative computational paradigms to simple problems.
0.8689,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8702,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8754,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8801,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8827,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8915,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9006,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9053,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9107,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9133,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9142,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9255,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8706,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",This course is the first of three core computer science courses on programming.
0.8755,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8818,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8871,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Understand the legal context for protection of software as intellectual property.
0.8889,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8953,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8971,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8996,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9003,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",These include distributed software revision control systems.
0.9003,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9011,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Understand basic types and the benefits of static typing.
0.9030,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9034,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9075,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9106,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9124,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9220,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Describe and apply alternative computational paradigms to simple problems.
0.9220,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9274,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9282,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8413,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8531,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,This course is the first of three core computer science courses on programming.
0.8719,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8738,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Understand the legal context for protection of software as intellectual property.
0.8748,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8794,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8814,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8829,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8845,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8868,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8878,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Understand basic types and the benefits of static typing.
0.8926,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,These include distributed software revision control systems.
0.8933,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8963,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9041,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9043,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9072,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Describe and apply alternative computational paradigms to simple problems.
0.9101,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9106,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9139,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8427,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8651,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",This course is the first of three core computer science courses on programming.
0.8718,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8723,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8736,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8748,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8869,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8880,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Understand basic types and the benefits of static typing.
0.8908,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Understand the legal context for protection of software as intellectual property.
0.8913,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8950,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9010,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9014,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9021,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9074,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Describe and apply alternative computational paradigms to simple problems.
0.9079,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",These include distributed software revision control systems.
0.9087,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9115,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9166,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9240,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8480,identify and describe the reasons for many architectural features of contemporary machines.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8563,identify and describe the reasons for many architectural features of contemporary machines.,This course is the first of three core computer science courses on programming.
0.8580,identify and describe the reasons for many architectural features of contemporary machines.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8599,identify and describe the reasons for many architectural features of contemporary machines.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8604,identify and describe the reasons for many architectural features of contemporary machines.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8652,identify and describe the reasons for many architectural features of contemporary machines.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8662,identify and describe the reasons for many architectural features of contemporary machines.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8725,identify and describe the reasons for many architectural features of contemporary machines.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8778,identify and describe the reasons for many architectural features of contemporary machines.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8796,identify and describe the reasons for many architectural features of contemporary machines.,These include distributed software revision control systems.
0.8811,identify and describe the reasons for many architectural features of contemporary machines.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8815,identify and describe the reasons for many architectural features of contemporary machines.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8905,identify and describe the reasons for many architectural features of contemporary machines.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8921,identify and describe the reasons for many architectural features of contemporary machines.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8950,identify and describe the reasons for many architectural features of contemporary machines.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8984,identify and describe the reasons for many architectural features of contemporary machines.,Understand the legal context for protection of software as intellectual property.
0.9058,identify and describe the reasons for many architectural features of contemporary machines.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9166,identify and describe the reasons for many architectural features of contemporary machines.,Understand basic types and the benefits of static typing.
0.9177,identify and describe the reasons for many architectural features of contemporary machines.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9310,identify and describe the reasons for many architectural features of contemporary machines.,Describe and apply alternative computational paradigms to simple problems.
0.8512,demonstrate experience in the design and implementation of a large software system.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8562,demonstrate experience in the design and implementation of a large software system.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8611,demonstrate experience in the design and implementation of a large software system.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8682,demonstrate experience in the design and implementation of a large software system.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8712,demonstrate experience in the design and implementation of a large software system.,This course is the first of three core computer science courses on programming.
0.8751,demonstrate experience in the design and implementation of a large software system.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8824,demonstrate experience in the design and implementation of a large software system.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8831,demonstrate experience in the design and implementation of a large software system.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8855,demonstrate experience in the design and implementation of a large software system.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8857,demonstrate experience in the design and implementation of a large software system.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8882,demonstrate experience in the design and implementation of a large software system.,Understand basic types and the benefits of static typing.
0.8938,demonstrate experience in the design and implementation of a large software system.,Understand the legal context for protection of software as intellectual property.
0.8997,demonstrate experience in the design and implementation of a large software system.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9044,demonstrate experience in the design and implementation of a large software system.,These include distributed software revision control systems.
0.9056,demonstrate experience in the design and implementation of a large software system.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9088,demonstrate experience in the design and implementation of a large software system.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9105,demonstrate experience in the design and implementation of a large software system.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9107,demonstrate experience in the design and implementation of a large software system.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9108,demonstrate experience in the design and implementation of a large software system.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9128,demonstrate experience in the design and implementation of a large software system.,Describe and apply alternative computational paradigms to simple problems.

score,s1,s2
0.8127,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8162,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8246,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8422,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8441,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,This course is the first of three core computer science courses on programming.
0.8467,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8473,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8502,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8588,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,Understand basic types and the benefits of static typing.
0.8590,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,These include distributed software revision control systems.
0.8629,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8674,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8680,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8692,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8703,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8750,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,Understand the legal context for protection of software as intellectual property.
0.8755,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8770,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8775,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,Describe and apply alternative computational paradigms to simple problems.
0.8985,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8058,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8211,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8221,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",This course is the first of three core computer science courses on programming.
0.8248,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8378,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8405,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8417,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",These include distributed software revision control systems.
0.8434,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8441,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8449,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8476,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8487,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",Understand basic types and the benefits of static typing.
0.8496,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8502,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8542,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8575,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",Understand the legal context for protection of software as intellectual property.
0.8581,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",Describe and apply alternative computational paradigms to simple problems.
0.8662,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8677,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8760,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8317,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8440,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",This course is the first of three core computer science courses on programming.
0.8526,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8558,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8625,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8645,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8653,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8655,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8655,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8662,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8702,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",These include distributed software revision control systems.
0.8723,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8741,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8744,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",Understand the legal context for protection of software as intellectual property.
0.8768,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8788,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",Understand basic types and the benefits of static typing.
0.8839,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8851,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8863,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8920,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",Describe and apply alternative computational paradigms to simple problems.
0.8038,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",This course is the first of three core computer science courses on programming.
0.8260,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",These include distributed software revision control systems.
0.8286,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8399,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8402,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8416,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8442,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8443,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",Understand basic types and the benefits of static typing.
0.8486,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8510,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",Understand the legal context for protection of software as intellectual property.
0.8524,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8527,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8542,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8584,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8590,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8595,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8628,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",Describe and apply alternative computational paradigms to simple problems.
0.8785,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8786,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8789,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8685,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",These include distributed software revision control systems.
0.8706,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8863,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8888,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8893,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8902,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",Understand the legal context for protection of software as intellectual property.
0.8908,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",This course is the first of three core computer science courses on programming.
0.8920,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8981,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9019,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9040,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",Understand basic types and the benefits of static typing.
0.9090,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9101,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",Describe and apply alternative computational paradigms to simple problems.
0.9108,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9128,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9200,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9212,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9231,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9316,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9341,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8432,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8435,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",These include distributed software revision control systems.
0.8449,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8509,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",This course is the first of three core computer science courses on programming.
0.8551,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8571,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8691,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8760,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8772,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",Understand basic types and the benefits of static typing.
0.8806,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8828,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8833,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",Understand the legal context for protection of software as intellectual property.
0.8837,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8846,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8870,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8986,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9001,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9050,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9062,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9100,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",Describe and apply alternative computational paradigms to simple problems.
0.8425,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8457,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",This course is the first of three core computer science courses on programming.
0.8504,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",These include distributed software revision control systems.
0.8583,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8674,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8738,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8759,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8759,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8765,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8809,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",Understand basic types and the benefits of static typing.
0.8816,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8816,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",Understand the legal context for protection of software as intellectual property.
0.8912,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8935,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8945,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8983,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8998,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9041,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9056,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",Describe and apply alternative computational paradigms to simple problems.
0.9148,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8401,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",This course is the first of three core computer science courses on programming.
0.8549,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8587,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",These include distributed software revision control systems.
0.8691,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8714,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8739,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8810,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8828,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",Understand basic types and the benefits of static typing.
0.8888,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8907,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8911,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8917,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8929,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8937,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8952,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8958,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9011,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9016,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9019,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",Understand the legal context for protection of software as intellectual property.
0.9215,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",Describe and apply alternative computational paradigms to simple problems.
0.8530,"Analyse the role of network standards, protocols, and layered models.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8637,"Analyse the role of network standards, protocols, and layered models.",This course is the first of three core computer science courses on programming.
0.8820,"Analyse the role of network standards, protocols, and layered models.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8828,"Analyse the role of network standards, protocols, and layered models.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8862,"Analyse the role of network standards, protocols, and layered models.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8869,"Analyse the role of network standards, protocols, and layered models.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8887,"Analyse the role of network standards, protocols, and layered models.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8919,"Analyse the role of network standards, protocols, and layered models.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8933,"Analyse the role of network standards, protocols, and layered models.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8945,"Analyse the role of network standards, protocols, and layered models.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8979,"Analyse the role of network standards, protocols, and layered models.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8986,"Analyse the role of network standards, protocols, and layered models.",These include distributed software revision control systems.
0.9039,"Analyse the role of network standards, protocols, and layered models.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9049,"Analyse the role of network standards, protocols, and layered models.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9057,"Analyse the role of network standards, protocols, and layered models.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9071,"Analyse the role of network standards, protocols, and layered models.",Understand the legal context for protection of software as intellectual property.
0.9100,"Analyse the role of network standards, protocols, and layered models.",Understand basic types and the benefits of static typing.
0.9156,"Analyse the role of network standards, protocols, and layered models.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9184,"Analyse the role of network standards, protocols, and layered models.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9265,"Analyse the role of network standards, protocols, and layered models.",Describe and apply alternative computational paradigms to simple problems.
0.8563,"Apply network design principles, topologies, architectures, and their components.",This course is the first of three core computer science courses on programming.
0.8576,"Apply network design principles, topologies, architectures, and their components.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8770,"Apply network design principles, topologies, architectures, and their components.",Understand the legal context for protection of software as intellectual property.
0.8789,"Apply network design principles, topologies, architectures, and their components.",These include distributed software revision control systems.
0.8825,"Apply network design principles, topologies, architectures, and their components.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8871,"Apply network design principles, topologies, architectures, and their components.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8916,"Apply network design principles, topologies, architectures, and their components.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8931,"Apply network design principles, topologies, architectures, and their components.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8932,"Apply network design principles, topologies, architectures, and their components.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8934,"Apply network design principles, topologies, architectures, and their components.",Understand basic types and the benefits of static typing.
0.8936,"Apply network design principles, topologies, architectures, and their components.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8976,"Apply network design principles, topologies, architectures, and their components.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9020,"Apply network design principles, topologies, architectures, and their components.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9058,"Apply network design principles, topologies, architectures, and their components.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9059,"Apply network design principles, topologies, architectures, and their components.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9081,"Apply network design principles, topologies, architectures, and their components.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9087,"Apply network design principles, topologies, architectures, and their components.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9101,"Apply network design principles, topologies, architectures, and their components.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9244,"Apply network design principles, topologies, architectures, and their components.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9321,"Apply network design principles, topologies, architectures, and their components.",Describe and apply alternative computational paradigms to simple problems.
0.8556,Apply logical and physical networks at levels from the local area to the Internet.,This course is the first of three core computer science courses on programming.
0.8587,Apply logical and physical networks at levels from the local area to the Internet.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8651,Apply logical and physical networks at levels from the local area to the Internet.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8700,Apply logical and physical networks at levels from the local area to the Internet.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8715,Apply logical and physical networks at levels from the local area to the Internet.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8725,Apply logical and physical networks at levels from the local area to the Internet.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8731,Apply logical and physical networks at levels from the local area to the Internet.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8759,Apply logical and physical networks at levels from the local area to the Internet.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8783,Apply logical and physical networks at levels from the local area to the Internet.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8817,Apply logical and physical networks at levels from the local area to the Internet.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8842,Apply logical and physical networks at levels from the local area to the Internet.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8853,Apply logical and physical networks at levels from the local area to the Internet.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8853,Apply logical and physical networks at levels from the local area to the Internet.,Understand the legal context for protection of software as intellectual property.
0.8878,Apply logical and physical networks at levels from the local area to the Internet.,These include distributed software revision control systems.
0.8905,Apply logical and physical networks at levels from the local area to the Internet.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8916,Apply logical and physical networks at levels from the local area to the Internet.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8948,Apply logical and physical networks at levels from the local area to the Internet.,Understand basic types and the benefits of static typing.
0.9022,Apply logical and physical networks at levels from the local area to the Internet.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9060,Apply logical and physical networks at levels from the local area to the Internet.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9145,Apply logical and physical networks at levels from the local area to the Internet.,Describe and apply alternative computational paradigms to simple problems.
0.8555,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8621,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8652,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,This course is the first of three core computer science courses on programming.
0.8808,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8848,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8876,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8896,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8898,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,Understand the legal context for protection of software as intellectual property.
0.8903,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8910,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8935,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8962,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8972,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,Understand basic types and the benefits of static typing.
0.8996,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,These include distributed software revision control systems.
0.9000,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9047,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9066,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9133,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9163,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,Describe and apply alternative computational paradigms to simple problems.
0.9186,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Describe, understand and evolve programs, via documentation, testing, and debugging."

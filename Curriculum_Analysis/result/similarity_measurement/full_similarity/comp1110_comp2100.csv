score,s1,s2
0.8863,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8870,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8877,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8901,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9058,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9181,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9200,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9245,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9250,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9254,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9278,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9281,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9310,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9314,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9337,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9447,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9518,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8688,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8713,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8755,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8806,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9015,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9044,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9048,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9073,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9095,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9179,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9194,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9213,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9249,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9257,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9321,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9321,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9549,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8939,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9215,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9274,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9308,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9318,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9348,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9365,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9382,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9390,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9399,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9411,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9424,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9502,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9517,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9527,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9548,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9640,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8865,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8965,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8975,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9083,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9084,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9140,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9146,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9152,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9154,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9174,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9180,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9195,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9277,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9283,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9307,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9351,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9594,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8743,The course also treats intellectual property considerations in software development and deployment.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8796,The course also treats intellectual property considerations in software development and deployment.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8929,The course also treats intellectual property considerations in software development and deployment.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8958,The course also treats intellectual property considerations in software development and deployment.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8992,The course also treats intellectual property considerations in software development and deployment.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9107,The course also treats intellectual property considerations in software development and deployment.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9109,The course also treats intellectual property considerations in software development and deployment.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9113,The course also treats intellectual property considerations in software development and deployment.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9152,The course also treats intellectual property considerations in software development and deployment.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9244,The course also treats intellectual property considerations in software development and deployment.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9255,The course also treats intellectual property considerations in software development and deployment.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9255,The course also treats intellectual property considerations in software development and deployment.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9263,The course also treats intellectual property considerations in software development and deployment.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9312,The course also treats intellectual property considerations in software development and deployment.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9427,The course also treats intellectual property considerations in software development and deployment.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9431,The course also treats intellectual property considerations in software development and deployment.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9462,The course also treats intellectual property considerations in software development and deployment.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8843,Apply fundamental programming concepts for medium scale programs.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8964,Apply fundamental programming concepts for medium scale programs.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8990,Apply fundamental programming concepts for medium scale programs.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9068,Apply fundamental programming concepts for medium scale programs.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9069,Apply fundamental programming concepts for medium scale programs.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9134,Apply fundamental programming concepts for medium scale programs.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9156,Apply fundamental programming concepts for medium scale programs.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9216,Apply fundamental programming concepts for medium scale programs.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9220,Apply fundamental programming concepts for medium scale programs.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9230,Apply fundamental programming concepts for medium scale programs.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9252,Apply fundamental programming concepts for medium scale programs.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9256,Apply fundamental programming concepts for medium scale programs.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9259,Apply fundamental programming concepts for medium scale programs.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9267,Apply fundamental programming concepts for medium scale programs.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9277,Apply fundamental programming concepts for medium scale programs.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9313,Apply fundamental programming concepts for medium scale programs.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9589,Apply fundamental programming concepts for medium scale programs.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8585,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8830,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8956,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8986,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9002,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9026,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9111,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9124,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9137,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9154,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9186,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9194,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9198,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9266,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9271,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9311,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9347,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8383,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8704,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8786,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8970,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9032,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9061,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9074,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9084,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9092,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9107,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9110,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9210,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9210,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9312,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9349,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9356,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9538,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8823,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9005,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9085,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9147,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9158,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9193,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9210,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9212,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9218,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9235,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9259,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9328,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9357,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9439,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9441,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9478,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9895,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8691,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8924,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8932,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9037,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9104,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9122,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9125,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9201,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9279,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9280,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9298,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9307,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9371,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9382,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9501,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9624,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9855,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8326,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8608,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8674,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8760,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8783,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8811,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8827,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8907,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9010,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9026,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9060,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9064,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9148,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9150,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9189,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9569,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9824,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8830,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8908,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8925,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8992,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9003,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9068,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9075,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9075,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9094,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9125,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9141,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9146,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9147,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9176,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9302,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9328,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9512,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8597,"Understand, apply, and analyse state and state machines in expressing computations.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8845,"Understand, apply, and analyse state and state machines in expressing computations.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8933,"Understand, apply, and analyse state and state machines in expressing computations.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8968,"Understand, apply, and analyse state and state machines in expressing computations.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9060,"Understand, apply, and analyse state and state machines in expressing computations.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9079,"Understand, apply, and analyse state and state machines in expressing computations.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9080,"Understand, apply, and analyse state and state machines in expressing computations.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9096,"Understand, apply, and analyse state and state machines in expressing computations.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9113,"Understand, apply, and analyse state and state machines in expressing computations.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9133,"Understand, apply, and analyse state and state machines in expressing computations.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9147,"Understand, apply, and analyse state and state machines in expressing computations.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9178,"Understand, apply, and analyse state and state machines in expressing computations.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9245,"Understand, apply, and analyse state and state machines in expressing computations.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9247,"Understand, apply, and analyse state and state machines in expressing computations.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9282,"Understand, apply, and analyse state and state machines in expressing computations.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9285,"Understand, apply, and analyse state and state machines in expressing computations.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9343,"Understand, apply, and analyse state and state machines in expressing computations.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8784,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8786,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8860,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8873,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8970,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9050,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9071,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9116,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9127,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9129,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9144,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9215,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9224,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9232,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9243,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9320,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9515,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8813,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8834,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8878,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8884,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8931,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8959,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9006,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9006,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9007,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9012,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9018,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9028,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9111,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9259,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9278,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9300,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9309,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."

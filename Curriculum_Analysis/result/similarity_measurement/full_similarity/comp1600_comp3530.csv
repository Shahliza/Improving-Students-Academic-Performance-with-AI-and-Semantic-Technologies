score,s1,s2
0.8007,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8210,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Prove simple programs correct using Hoare Logic.
0.8271,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8502,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8514,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Design a Turing Machine which will accomplish simple tasks.
0.8623,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8631,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8060,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8405,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8498,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Prove simple programs correct using Hoare Logic.
0.8662,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8778,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Design a Turing Machine which will accomplish simple tasks.
0.8789,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8817,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8040,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8319,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8489,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Prove simple programs correct using Hoare Logic.
0.8546,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8662,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8826,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8867,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Design a Turing Machine which will accomplish simple tasks.
0.7506,Systems concepts.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8161,Systems concepts.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8213,Systems concepts.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8409,Systems concepts.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8441,Systems concepts.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8699,Systems concepts.,Design a Turing Machine which will accomplish simple tasks.
0.8855,Systems concepts.,Prove simple programs correct using Hoare Logic.
0.7696,The Systems Engineering life-cycle and processes.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8198,The Systems Engineering life-cycle and processes.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8386,The Systems Engineering life-cycle and processes.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8410,The Systems Engineering life-cycle and processes.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8455,The Systems Engineering life-cycle and processes.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8617,The Systems Engineering life-cycle and processes.,Prove simple programs correct using Hoare Logic.
0.8707,The Systems Engineering life-cycle and processes.,Design a Turing Machine which will accomplish simple tasks.
0.8129,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8716,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Design a Turing Machine which will accomplish simple tasks.
0.8737,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8779,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8819,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8827,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Prove simple programs correct using Hoare Logic.
0.8910,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.7778,"Preliminary system design: subsystem design requirements, design review.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8284,"Preliminary system design: subsystem design requirements, design review.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8328,"Preliminary system design: subsystem design requirements, design review.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8361,"Preliminary system design: subsystem design requirements, design review.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8444,"Preliminary system design: subsystem design requirements, design review.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8483,"Preliminary system design: subsystem design requirements, design review.",Prove simple programs correct using Hoare Logic.
0.8777,"Preliminary system design: subsystem design requirements, design review.",Design a Turing Machine which will accomplish simple tasks.
0.7750,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8489,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8536,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8538,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Design a Turing Machine which will accomplish simple tasks.
0.8613,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8621,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8635,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Prove simple programs correct using Hoare Logic.
0.7426,"Design testing, evaluation and validation.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.7969,"Design testing, evaluation and validation.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8210,"Design testing, evaluation and validation.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8230,"Design testing, evaluation and validation.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8257,"Design testing, evaluation and validation.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8420,"Design testing, evaluation and validation.",Prove simple programs correct using Hoare Logic.
0.8531,"Design testing, evaluation and validation.",Design a Turing Machine which will accomplish simple tasks.
0.7786,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8318,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8490,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8575,Design for sustainability: approaches that integrate sustainability principles into the design process.,Prove simple programs correct using Hoare Logic.
0.8618,Design for sustainability: approaches that integrate sustainability principles into the design process.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8632,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8774,Design for sustainability: approaches that integrate sustainability principles into the design process.,Design a Turing Machine which will accomplish simple tasks.
0.7544,Integration of Systems Engineering and Software Engineering activities.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.7985,Integration of Systems Engineering and Software Engineering activities.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8284,Integration of Systems Engineering and Software Engineering activities.,Prove simple programs correct using Hoare Logic.
0.8302,Integration of Systems Engineering and Software Engineering activities.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8313,Integration of Systems Engineering and Software Engineering activities.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8390,Integration of Systems Engineering and Software Engineering activities.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8556,Integration of Systems Engineering and Software Engineering activities.,Design a Turing Machine which will accomplish simple tasks.
0.7863,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8408,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8575,describe the holistic and multi-disciplinary nature of complex engineering projects.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8588,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8654,describe the holistic and multi-disciplinary nature of complex engineering projects.,Prove simple programs correct using Hoare Logic.
0.8662,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8809,describe the holistic and multi-disciplinary nature of complex engineering projects.,Design a Turing Machine which will accomplish simple tasks.
0.7650,describe the Systems Engineering life-cycle.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8042,describe the Systems Engineering life-cycle.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8179,describe the Systems Engineering life-cycle.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8215,describe the Systems Engineering life-cycle.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8399,describe the Systems Engineering life-cycle.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8450,describe the Systems Engineering life-cycle.,Prove simple programs correct using Hoare Logic.
0.8766,describe the Systems Engineering life-cycle.,Design a Turing Machine which will accomplish simple tasks.
0.7821,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8208,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Prove simple programs correct using Hoare Logic.
0.8274,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8282,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8298,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8618,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Design a Turing Machine which will accomplish simple tasks.
0.8635,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.7859,explain the role of Software Engineering within the broader context of Systems Engineering.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8285,explain the role of Software Engineering within the broader context of Systems Engineering.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8378,explain the role of Software Engineering within the broader context of Systems Engineering.,Prove simple programs correct using Hoare Logic.
0.8542,explain the role of Software Engineering within the broader context of Systems Engineering.,Design a Turing Machine which will accomplish simple tasks.
0.8554,explain the role of Software Engineering within the broader context of Systems Engineering.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8592,explain the role of Software Engineering within the broader context of Systems Engineering.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8809,explain the role of Software Engineering within the broader context of Systems Engineering.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.7899,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8264,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8472,Students will also improve their ability to understand and solve complex and ill-defined problems.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8497,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8554,Students will also improve their ability to understand and solve complex and ill-defined problems.,Prove simple programs correct using Hoare Logic.
0.8641,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8792,Students will also improve their ability to understand and solve complex and ill-defined problems.,Design a Turing Machine which will accomplish simple tasks.
0.7503,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.7847,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8104,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Prove simple programs correct using Hoare Logic.
0.8110,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8192,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8255,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8404,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Design a Turing Machine which will accomplish simple tasks.
0.7545,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8002,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8220,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8302,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Prove simple programs correct using Hoare Logic.
0.8343,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8345,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8461,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Design a Turing Machine which will accomplish simple tasks.
0.7633,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.7969,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8067,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Prove simple programs correct using Hoare Logic.
0.8160,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8265,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8338,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Design a Turing Machine which will accomplish simple tasks.
0.8354,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."

score,s1,s2
0.8356,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Have an awareness of good program organisation.
0.8747,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Both top-down and object oriented design are taught.
0.8747,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",There is an emphasis on designing and writing correct code.
0.8828,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Have a practical understanding of the processing of scientific data.
0.8843,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8855,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8874,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Have an understanding of some widely-used algorithms.
0.8895,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8931,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8979,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8987,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8987,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",Testing and debugging are seen as integral to the programming enterprise.
0.9011,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8641,The lectures will also address recent literature describing advances in operating systems.,Have an awareness of good program organisation.
0.8725,The lectures will also address recent literature describing advances in operating systems.,Both top-down and object oriented design are taught.
0.8729,The lectures will also address recent literature describing advances in operating systems.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8801,The lectures will also address recent literature describing advances in operating systems.,There is an emphasis on designing and writing correct code.
0.8853,The lectures will also address recent literature describing advances in operating systems.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8892,The lectures will also address recent literature describing advances in operating systems.,Testing and debugging are seen as integral to the programming enterprise.
0.8908,The lectures will also address recent literature describing advances in operating systems.,Have a practical understanding of the processing of scientific data.
0.8987,The lectures will also address recent literature describing advances in operating systems.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9011,The lectures will also address recent literature describing advances in operating systems.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9058,The lectures will also address recent literature describing advances in operating systems.,Have an understanding of some widely-used algorithms.
0.9115,The lectures will also address recent literature describing advances in operating systems.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9126,The lectures will also address recent literature describing advances in operating systems.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9204,The lectures will also address recent literature describing advances in operating systems.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8119,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Have an awareness of good program organisation.
0.8391,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",There is an emphasis on designing and writing correct code.
0.8404,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Have an understanding of some widely-used algorithms.
0.8449,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Have a practical understanding of the processing of scientific data.
0.8482,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8605,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8656,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Both top-down and object oriented design are taught.
0.8675,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8749,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8832,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Testing and debugging are seen as integral to the programming enterprise.
0.8852,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8864,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8975,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8666,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Have an awareness of good program organisation.
0.8971,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Both top-down and object oriented design are taught.
0.9022,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9030,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",There is an emphasis on designing and writing correct code.
0.9110,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Testing and debugging are seen as integral to the programming enterprise.
0.9114,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Have a practical understanding of the processing of scientific data.
0.9162,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9165,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9191,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Have an understanding of some widely-used algorithms.
0.9205,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9257,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9336,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9384,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8158,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Have an awareness of good program organisation.
0.8858,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,There is an emphasis on designing and writing correct code.
0.8919,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Have a practical understanding of the processing of scientific data.
0.8927,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Both top-down and object oriented design are taught.
0.8942,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8975,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8994,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Testing and debugging are seen as integral to the programming enterprise.
0.9059,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9068,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Have an understanding of some widely-used algorithms.
0.9088,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9111,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9221,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9303,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8266,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Have an awareness of good program organisation.
0.8858,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",There is an emphasis on designing and writing correct code.
0.8924,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Have a practical understanding of the processing of scientific data.
0.8936,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8961,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Have an understanding of some widely-used algorithms.
0.8963,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8989,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Both top-down and object oriented design are taught.
0.9001,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9039,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9054,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Testing and debugging are seen as integral to the programming enterprise.
0.9136,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9173,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9327,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8694,identify and describe the reasons for many architectural features of contemporary machines.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8731,identify and describe the reasons for many architectural features of contemporary machines.,Both top-down and object oriented design are taught.
0.8811,identify and describe the reasons for many architectural features of contemporary machines.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8923,identify and describe the reasons for many architectural features of contemporary machines.,Testing and debugging are seen as integral to the programming enterprise.
0.8928,identify and describe the reasons for many architectural features of contemporary machines.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8937,identify and describe the reasons for many architectural features of contemporary machines.,There is an emphasis on designing and writing correct code.
0.8941,identify and describe the reasons for many architectural features of contemporary machines.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8953,identify and describe the reasons for many architectural features of contemporary machines.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8956,identify and describe the reasons for many architectural features of contemporary machines.,Have an awareness of good program organisation.
0.8962,identify and describe the reasons for many architectural features of contemporary machines.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9060,identify and describe the reasons for many architectural features of contemporary machines.,Have a practical understanding of the processing of scientific data.
0.9109,identify and describe the reasons for many architectural features of contemporary machines.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9136,identify and describe the reasons for many architectural features of contemporary machines.,Have an understanding of some widely-used algorithms.
0.8805,demonstrate experience in the design and implementation of a large software system.,Have an awareness of good program organisation.
0.8955,demonstrate experience in the design and implementation of a large software system.,Both top-down and object oriented design are taught.
0.8984,demonstrate experience in the design and implementation of a large software system.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9081,demonstrate experience in the design and implementation of a large software system.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9096,demonstrate experience in the design and implementation of a large software system.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9098,demonstrate experience in the design and implementation of a large software system.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9109,demonstrate experience in the design and implementation of a large software system.,There is an emphasis on designing and writing correct code.
0.9123,demonstrate experience in the design and implementation of a large software system.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9151,demonstrate experience in the design and implementation of a large software system.,Have an understanding of some widely-used algorithms.
0.9177,demonstrate experience in the design and implementation of a large software system.,Testing and debugging are seen as integral to the programming enterprise.
0.9216,demonstrate experience in the design and implementation of a large software system.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9287,demonstrate experience in the design and implementation of a large software system.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9314,demonstrate experience in the design and implementation of a large software system.,Have a practical understanding of the processing of scientific data.

score,s1,s2
0.8476,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",identify and describe the reasons for many architectural features of contemporary machines.
0.8605,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",The lectures will also address recent literature describing advances in operating systems.
0.8701,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.8739,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8843,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.8913,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",demonstrate experience in the design and implementation of a large software system.
0.8922,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.8942,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.8389,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",identify and describe the reasons for many architectural features of contemporary machines.
0.8410,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",demonstrate experience in the design and implementation of a large software system.
0.8418,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",The lectures will also address recent literature describing advances in operating systems.
0.8556,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.8771,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.8790,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.8934,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9352,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8828,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",identify and describe the reasons for many architectural features of contemporary machines.
0.8964,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",The lectures will also address recent literature describing advances in operating systems.
0.9011,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9062,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",demonstrate experience in the design and implementation of a large software system.
0.9141,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.9157,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.9200,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.9369,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.8660,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8847,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,The lectures will also address recent literature describing advances in operating systems.
0.8870,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.8943,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.8956,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,identify and describe the reasons for many architectural features of contemporary machines.
0.9007,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.9070,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,demonstrate experience in the design and implementation of a large software system.
0.9184,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.8857,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.8863,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8866,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.8919,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.8941,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,The lectures will also address recent literature describing advances in operating systems.
0.8952,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,identify and describe the reasons for many architectural features of contemporary machines.
0.9047,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,demonstrate experience in the design and implementation of a large software system.
0.9210,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.8556,Demonstrate proficiency in software reverse engineering.,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8622,Demonstrate proficiency in software reverse engineering.,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.8849,Demonstrate proficiency in software reverse engineering.,describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.8861,Demonstrate proficiency in software reverse engineering.,"define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.8959,Demonstrate proficiency in software reverse engineering.,The lectures will also address recent literature describing advances in operating systems.
0.8977,Demonstrate proficiency in software reverse engineering.,identify and describe the reasons for many architectural features of contemporary machines.
0.9150,Demonstrate proficiency in software reverse engineering.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9327,Demonstrate proficiency in software reverse engineering.,demonstrate experience in the design and implementation of a large software system.
0.8850,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",identify and describe the reasons for many architectural features of contemporary machines.
0.8864,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8875,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.8968,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",The lectures will also address recent literature describing advances in operating systems.
0.8996,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.9011,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.9218,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",demonstrate experience in the design and implementation of a large software system.
0.9287,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.8816,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",The lectures will also address recent literature describing advances in operating systems.
0.8870,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8876,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",identify and describe the reasons for many architectural features of contemporary machines.
0.8940,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole."
0.9026,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",demonstrate experience in the design and implementation of a large software system.
0.9119,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.9157,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",describe and analyse the actual algorithms and data structures that are used in a particular operating system.
0.9291,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."

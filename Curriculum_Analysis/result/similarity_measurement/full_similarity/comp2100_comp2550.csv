score,s1,s2
0.8315,The course introduces students to some fundamentals of research methodology.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8335,The course introduces students to some fundamentals of research methodology.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8531,The course introduces students to some fundamentals of research methodology.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8602,The course introduces students to some fundamentals of research methodology.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8702,The course introduces students to some fundamentals of research methodology.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8763,The course introduces students to some fundamentals of research methodology.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8797,The course introduces students to some fundamentals of research methodology.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8823,The course introduces students to some fundamentals of research methodology.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8873,The course introduces students to some fundamentals of research methodology.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8897,The course introduces students to some fundamentals of research methodology.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9016,The course introduces students to some fundamentals of research methodology.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9059,The course introduces students to some fundamentals of research methodology.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9094,The course introduces students to some fundamentals of research methodology.,Apply fundamental programming concepts for medium scale programs.
0.9247,The course introduces students to some fundamentals of research methodology.,The course also treats intellectual property considerations in software development and deployment.
0.9258,The course introduces students to some fundamentals of research methodology.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8563,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8752,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8796,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8831,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",Apply fundamental programming concepts for medium scale programs.
0.8861,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Understand, apply, and analyse state and state machines in expressing computations."
0.8870,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8944,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8976,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9035,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",The course also treats intellectual property considerations in software development and deployment.
0.9052,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9055,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9095,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9113,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9119,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9169,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8636,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8649,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8672,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8687,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Understand, apply, and analyse state and state machines in expressing computations."
0.8784,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8865,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",Apply fundamental programming concepts for medium scale programs.
0.8928,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8942,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",The course also treats intellectual property considerations in software development and deployment.
0.8962,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8968,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9007,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9012,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9080,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9112,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9330,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8843,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8928,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9000,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9029,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9098,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",Apply fundamental programming concepts for medium scale programs.
0.9124,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",The course also treats intellectual property considerations in software development and deployment.
0.9151,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9152,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9161,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9181,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Understand, apply, and analyse state and state machines in expressing computations."
0.9219,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9228,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9234,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9267,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9380,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8609,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8717,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8764,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Understand, apply, and analyse state and state machines in expressing computations."
0.8792,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8841,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",Apply fundamental programming concepts for medium scale programs.
0.8844,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8965,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9054,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9059,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9068,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9105,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",The course also treats intellectual property considerations in software development and deployment.
0.9121,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9122,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9165,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9344,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8722,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8776,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8880,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8896,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8933,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8948,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9035,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9038,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",The course also treats intellectual property considerations in software development and deployment.
0.9039,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",Apply fundamental programming concepts for medium scale programs.
0.9086,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9096,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Understand, apply, and analyse state and state machines in expressing computations."
0.9129,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9166,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9291,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9363,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8525,This includes demonstrated skills in the writing of abstracts and research papers.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8595,This includes demonstrated skills in the writing of abstracts and research papers.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8873,This includes demonstrated skills in the writing of abstracts and research papers.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8893,This includes demonstrated skills in the writing of abstracts and research papers.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8950,This includes demonstrated skills in the writing of abstracts and research papers.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8994,This includes demonstrated skills in the writing of abstracts and research papers.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8996,This includes demonstrated skills in the writing of abstracts and research papers.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9026,This includes demonstrated skills in the writing of abstracts and research papers.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9036,This includes demonstrated skills in the writing of abstracts and research papers.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9045,This includes demonstrated skills in the writing of abstracts and research papers.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9047,This includes demonstrated skills in the writing of abstracts and research papers.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9048,This includes demonstrated skills in the writing of abstracts and research papers.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9174,This includes demonstrated skills in the writing of abstracts and research papers.,Apply fundamental programming concepts for medium scale programs.
0.9208,This includes demonstrated skills in the writing of abstracts and research papers.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9269,This includes demonstrated skills in the writing of abstracts and research papers.,The course also treats intellectual property considerations in software development and deployment.
0.8272,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8278,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8428,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8546,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8687,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,Apply fundamental programming concepts for medium scale programs.
0.8701,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8708,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8730,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8754,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8846,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,The course also treats intellectual property considerations in software development and deployment.
0.8868,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8894,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8908,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8948,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9049,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8620,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8690,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8778,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8868,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8883,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8990,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,The course also treats intellectual property considerations in software development and deployment.
0.9004,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9005,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9018,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9022,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,Apply fundamental programming concepts for medium scale programs.
0.9068,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9128,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9242,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9244,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9405,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8148,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8215,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8271,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8479,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8548,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8586,Demonstrate an ability to undertake and manage a research project of significant size and scope.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8674,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8700,Demonstrate an ability to undertake and manage a research project of significant size and scope.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8735,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8739,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8783,Demonstrate an ability to undertake and manage a research project of significant size and scope.,Apply fundamental programming concepts for medium scale programs.
0.8807,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8829,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8864,Demonstrate an ability to undertake and manage a research project of significant size and scope.,The course also treats intellectual property considerations in software development and deployment.
0.8924,Demonstrate an ability to undertake and manage a research project of significant size and scope.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8414,Understanding of the process of identifying and formulating research problems.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8559,Understanding of the process of identifying and formulating research problems.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8721,Understanding of the process of identifying and formulating research problems.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8812,Understanding of the process of identifying and formulating research problems.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8842,Understanding of the process of identifying and formulating research problems.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8870,Understanding of the process of identifying and formulating research problems.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8963,Understanding of the process of identifying and formulating research problems.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9000,Understanding of the process of identifying and formulating research problems.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9063,Understanding of the process of identifying and formulating research problems.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9093,Understanding of the process of identifying and formulating research problems.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9108,Understanding of the process of identifying and formulating research problems.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9115,Understanding of the process of identifying and formulating research problems.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9123,Understanding of the process of identifying and formulating research problems.,Apply fundamental programming concepts for medium scale programs.
0.9126,Understanding of the process of identifying and formulating research problems.,The course also treats intellectual property considerations in software development and deployment.
0.9137,Understanding of the process of identifying and formulating research problems.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8525,Ability to carry out literature searches and some ability to critically evaluate literature.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8680,Ability to carry out literature searches and some ability to critically evaluate literature.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8789,Ability to carry out literature searches and some ability to critically evaluate literature.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8816,Ability to carry out literature searches and some ability to critically evaluate literature.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8843,Ability to carry out literature searches and some ability to critically evaluate literature.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8856,Ability to carry out literature searches and some ability to critically evaluate literature.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8868,Ability to carry out literature searches and some ability to critically evaluate literature.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8933,Ability to carry out literature searches and some ability to critically evaluate literature.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8995,Ability to carry out literature searches and some ability to critically evaluate literature.,The course also treats intellectual property considerations in software development and deployment.
0.9007,Ability to carry out literature searches and some ability to critically evaluate literature.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9010,Ability to carry out literature searches and some ability to critically evaluate literature.,Apply fundamental programming concepts for medium scale programs.
0.9023,Ability to carry out literature searches and some ability to critically evaluate literature.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9069,Ability to carry out literature searches and some ability to critically evaluate literature.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9146,Ability to carry out literature searches and some ability to critically evaluate literature.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9151,Ability to carry out literature searches and some ability to critically evaluate literature.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8414,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8501,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8626,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8683,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8737,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8757,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",The course also treats intellectual property considerations in software development and deployment.
0.8771,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",Apply fundamental programming concepts for medium scale programs.
0.8773,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8777,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8782,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9075,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9104,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Understand, apply, and analyse state and state machines in expressing computations."
0.9117,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9161,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9285,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8359,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8489,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8676,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8711,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8810,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8821,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8849,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8853,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8861,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8964,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,Apply fundamental programming concepts for medium scale programs.
0.8999,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9005,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9058,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9070,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,The course also treats intellectual property considerations in software development and deployment.
0.9100,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."

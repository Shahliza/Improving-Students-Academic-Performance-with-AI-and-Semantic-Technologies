score,s1,s2
0.8276,"This course covers a range of concepts, techniques and technologies in network security.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8357,"This course covers a range of concepts, techniques and technologies in network security.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8388,"This course covers a range of concepts, techniques and technologies in network security.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8461,"This course covers a range of concepts, techniques and technologies in network security.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8564,"This course covers a range of concepts, techniques and technologies in network security.",These include distributed software revision control systems.
0.8570,"This course covers a range of concepts, techniques and technologies in network security.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8640,"This course covers a range of concepts, techniques and technologies in network security.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8673,"This course covers a range of concepts, techniques and technologies in network security.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8744,"This course covers a range of concepts, techniques and technologies in network security.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8761,"This course covers a range of concepts, techniques and technologies in network security.",Understand basic types and the benefits of static typing.
0.8784,"This course covers a range of concepts, techniques and technologies in network security.",Understand the legal context for protection of software as intellectual property.
0.8814,"This course covers a range of concepts, techniques and technologies in network security.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8853,"This course covers a range of concepts, techniques and technologies in network security.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8902,"This course covers a range of concepts, techniques and technologies in network security.",This course is the first of three core computer science courses on programming.
0.8903,"This course covers a range of concepts, techniques and technologies in network security.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8934,"This course covers a range of concepts, techniques and technologies in network security.",Describe and apply alternative computational paradigms to simple problems.
0.9013,"This course covers a range of concepts, techniques and technologies in network security.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9026,"This course covers a range of concepts, techniques and technologies in network security.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9060,"This course covers a range of concepts, techniques and technologies in network security.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9078,"This course covers a range of concepts, techniques and technologies in network security.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8052,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",This course is the first of three core computer science courses on programming.
0.8098,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8377,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8396,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8447,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",Understand the legal context for protection of software as intellectual property.
0.8447,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",These include distributed software revision control systems.
0.8467,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",Understand basic types and the benefits of static typing.
0.8482,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8496,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8565,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8611,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8618,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8622,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",Describe and apply alternative computational paradigms to simple problems.
0.8640,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8683,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8730,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8801,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8807,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8909,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8923,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8558,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8708,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",These include distributed software revision control systems.
0.8719,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",This course is the first of three core computer science courses on programming.
0.8765,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",Understand the legal context for protection of software as intellectual property.
0.8802,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8832,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8858,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",Understand basic types and the benefits of static typing.
0.8972,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8988,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8994,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9021,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9045,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9064,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9133,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9138,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9167,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9180,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9195,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9211,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9214,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",Describe and apply alternative computational paradigms to simple problems.
0.8148,Explain network security issues.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8174,Explain network security issues.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8228,Explain network security issues.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8263,Explain network security issues.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8299,Explain network security issues.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8342,Explain network security issues.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8414,Explain network security issues.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8513,Explain network security issues.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8563,Explain network security issues.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8625,Explain network security issues.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8627,Explain network security issues.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8633,Explain network security issues.,This course is the first of three core computer science courses on programming.
0.8691,Explain network security issues.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8692,Explain network security issues.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8808,Explain network security issues.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8849,Explain network security issues.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8988,Explain network security issues.,Understand the legal context for protection of software as intellectual property.
0.8995,Explain network security issues.,Describe and apply alternative computational paradigms to simple problems.
0.9009,Explain network security issues.,These include distributed software revision control systems.
0.9055,Explain network security issues.,Understand basic types and the benefits of static typing.
0.8282,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",This course is the first of three core computer science courses on programming.
0.8291,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8498,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8546,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8557,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8557,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8576,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",These include distributed software revision control systems.
0.8679,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",Understand basic types and the benefits of static typing.
0.8689,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8692,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8708,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8723,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8740,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8744,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8749,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8785,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8800,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",Understand the legal context for protection of software as intellectual property.
0.8813,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8864,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8990,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",Describe and apply alternative computational paradigms to simple problems.
0.8499,Perform simple penetration testing of a network and network services,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8561,Perform simple penetration testing of a network and network services,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8568,Perform simple penetration testing of a network and network services,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8577,Perform simple penetration testing of a network and network services,This course is the first of three core computer science courses on programming.
0.8634,Perform simple penetration testing of a network and network services,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8655,Perform simple penetration testing of a network and network services,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8713,Perform simple penetration testing of a network and network services,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8805,Perform simple penetration testing of a network and network services,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8823,Perform simple penetration testing of a network and network services,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8835,Perform simple penetration testing of a network and network services,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8849,Perform simple penetration testing of a network and network services,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8849,Perform simple penetration testing of a network and network services,Understand the legal context for protection of software as intellectual property.
0.8882,Perform simple penetration testing of a network and network services,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8889,Perform simple penetration testing of a network and network services,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8918,Perform simple penetration testing of a network and network services,These include distributed software revision control systems.
0.8977,Perform simple penetration testing of a network and network services,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8996,Perform simple penetration testing of a network and network services,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8998,Perform simple penetration testing of a network and network services,Understand basic types and the benefits of static typing.
0.9005,Perform simple penetration testing of a network and network services,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9101,Perform simple penetration testing of a network and network services,Describe and apply alternative computational paradigms to simple problems.
0.8432,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8484,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,This course is the first of three core computer science courses on programming.
0.8589,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8708,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8729,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8731,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8749,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8788,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8807,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8811,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8833,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,Understand basic types and the benefits of static typing.
0.8851,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8915,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,Understand the legal context for protection of software as intellectual property.
0.8918,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8921,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8950,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,These include distributed software revision control systems.
0.8977,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9020,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9035,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,Describe and apply alternative computational paradigms to simple problems.
0.9036,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.7973,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,This course is the first of three core computer science courses on programming.
0.8032,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8124,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8213,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8270,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8342,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,Understand basic types and the benefits of static typing.
0.8355,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,These include distributed software revision control systems.
0.8373,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8415,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8453,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8466,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8468,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8486,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8487,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8511,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8522,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8529,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,Understand the legal context for protection of software as intellectual property.
0.8534,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8630,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8810,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,Describe and apply alternative computational paradigms to simple problems.

score,s1,s2
0.8696,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8743,This course teaches introductory programming within a problem solving framework applicable to the sciences.,These include distributed software revision control systems.
0.8863,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8955,This course teaches introductory programming within a problem solving framework applicable to the sciences.,Understand the legal context for protection of software as intellectual property.
0.8962,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8998,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9004,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9011,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9082,This course teaches introductory programming within a problem solving framework applicable to the sciences.,Understand basic types and the benefits of static typing.
0.9159,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9227,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9289,This course teaches introductory programming within a problem solving framework applicable to the sciences.,This course is the first of three core computer science courses on programming.
0.9375,This course teaches introductory programming within a problem solving framework applicable to the sciences.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9408,This course teaches introductory programming within a problem solving framework applicable to the sciences.,Describe and apply alternative computational paradigms to simple problems.
0.9417,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9425,This course teaches introductory programming within a problem solving framework applicable to the sciences.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9431,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9508,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9549,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9550,This course teaches introductory programming within a problem solving framework applicable to the sciences.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8674,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8819,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",These include distributed software revision control systems.
0.8864,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8868,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8876,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",Understand the legal context for protection of software as intellectual property.
0.8885,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8943,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8954,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",Understand basic types and the benefits of static typing.
0.9047,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",This course is the first of three core computer science courses on programming.
0.9055,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9108,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9130,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9157,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9195,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9197,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9216,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9234,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",Describe and apply alternative computational paradigms to simple problems.
0.9246,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9373,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9398,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8583,There is an emphasis on designing and writing correct code.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8655,There is an emphasis on designing and writing correct code.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8712,There is an emphasis on designing and writing correct code.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8718,There is an emphasis on designing and writing correct code.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8726,There is an emphasis on designing and writing correct code.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8747,There is an emphasis on designing and writing correct code.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8797,There is an emphasis on designing and writing correct code.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8808,There is an emphasis on designing and writing correct code.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8826,There is an emphasis on designing and writing correct code.,Understand the legal context for protection of software as intellectual property.
0.8829,There is an emphasis on designing and writing correct code.,This course is the first of three core computer science courses on programming.
0.8873,There is an emphasis on designing and writing correct code.,These include distributed software revision control systems.
0.8909,There is an emphasis on designing and writing correct code.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8933,There is an emphasis on designing and writing correct code.,Describe and apply alternative computational paradigms to simple problems.
0.8979,There is an emphasis on designing and writing correct code.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9080,There is an emphasis on designing and writing correct code.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9088,There is an emphasis on designing and writing correct code.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9092,There is an emphasis on designing and writing correct code.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9094,There is an emphasis on designing and writing correct code.,Understand basic types and the benefits of static typing.
0.9167,There is an emphasis on designing and writing correct code.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9181,There is an emphasis on designing and writing correct code.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8713,Testing and debugging are seen as integral to the programming enterprise.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8815,Testing and debugging are seen as integral to the programming enterprise.,This course is the first of three core computer science courses on programming.
0.8881,Testing and debugging are seen as integral to the programming enterprise.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8938,Testing and debugging are seen as integral to the programming enterprise.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8938,Testing and debugging are seen as integral to the programming enterprise.,Understand the legal context for protection of software as intellectual property.
0.8953,Testing and debugging are seen as integral to the programming enterprise.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8960,Testing and debugging are seen as integral to the programming enterprise.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8971,Testing and debugging are seen as integral to the programming enterprise.,These include distributed software revision control systems.
0.9003,Testing and debugging are seen as integral to the programming enterprise.,Understand basic types and the benefits of static typing.
0.9004,Testing and debugging are seen as integral to the programming enterprise.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9024,Testing and debugging are seen as integral to the programming enterprise.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9061,Testing and debugging are seen as integral to the programming enterprise.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9113,Testing and debugging are seen as integral to the programming enterprise.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9146,Testing and debugging are seen as integral to the programming enterprise.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9150,Testing and debugging are seen as integral to the programming enterprise.,Describe and apply alternative computational paradigms to simple problems.
0.9176,Testing and debugging are seen as integral to the programming enterprise.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9182,Testing and debugging are seen as integral to the programming enterprise.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9184,Testing and debugging are seen as integral to the programming enterprise.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9231,Testing and debugging are seen as integral to the programming enterprise.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9434,Testing and debugging are seen as integral to the programming enterprise.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8701,Both top-down and object oriented design are taught.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8703,Both top-down and object oriented design are taught.,Understand the legal context for protection of software as intellectual property.
0.8792,Both top-down and object oriented design are taught.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8858,Both top-down and object oriented design are taught.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8882,Both top-down and object oriented design are taught.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8903,Both top-down and object oriented design are taught.,These include distributed software revision control systems.
0.8921,Both top-down and object oriented design are taught.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8965,Both top-down and object oriented design are taught.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8985,Both top-down and object oriented design are taught.,This course is the first of three core computer science courses on programming.
0.8993,Both top-down and object oriented design are taught.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9001,Both top-down and object oriented design are taught.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9021,Both top-down and object oriented design are taught.,Describe and apply alternative computational paradigms to simple problems.
0.9024,Both top-down and object oriented design are taught.,Understand basic types and the benefits of static typing.
0.9028,Both top-down and object oriented design are taught.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9031,Both top-down and object oriented design are taught.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9112,Both top-down and object oriented design are taught.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9148,Both top-down and object oriented design are taught.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9155,Both top-down and object oriented design are taught.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9208,Both top-down and object oriented design are taught.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9237,Both top-down and object oriented design are taught.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8376,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8503,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8598,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8629,There will be an introduction to widely-used computer science algorithms and to machine architecture.,These include distributed software revision control systems.
0.8665,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8677,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8679,There will be an introduction to widely-used computer science algorithms and to machine architecture.,Understand the legal context for protection of software as intellectual property.
0.8695,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8768,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8817,There will be an introduction to widely-used computer science algorithms and to machine architecture.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8819,There will be an introduction to widely-used computer science algorithms and to machine architecture.,Understand basic types and the benefits of static typing.
0.8847,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8903,There will be an introduction to widely-used computer science algorithms and to machine architecture.,This course is the first of three core computer science courses on programming.
0.8996,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9053,There will be an introduction to widely-used computer science algorithms and to machine architecture.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9076,There will be an introduction to widely-used computer science algorithms and to machine architecture.,Describe and apply alternative computational paradigms to simple problems.
0.9136,There will be an introduction to widely-used computer science algorithms and to machine architecture.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9180,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9182,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9183,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8662,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8746,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8813,The course will be taught using one or more programming languages which are widely applicable to scientific work.,These include distributed software revision control systems.
0.8842,The course will be taught using one or more programming languages which are widely applicable to scientific work.,Understand the legal context for protection of software as intellectual property.
0.8916,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8933,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8955,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8963,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8991,The course will be taught using one or more programming languages which are widely applicable to scientific work.,Understand basic types and the benefits of static typing.
0.9011,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9110,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9209,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9214,The course will be taught using one or more programming languages which are widely applicable to scientific work.,This course is the first of three core computer science courses on programming.
0.9214,The course will be taught using one or more programming languages which are widely applicable to scientific work.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9225,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9248,The course will be taught using one or more programming languages which are widely applicable to scientific work.,Describe and apply alternative computational paradigms to simple problems.
0.9302,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9312,The course will be taught using one or more programming languages which are widely applicable to scientific work.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9357,The course will be taught using one or more programming languages which are widely applicable to scientific work.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9376,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8664,"Design, write and debug small programs to solve practical problems of a scientific nature.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8699,"Design, write and debug small programs to solve practical problems of a scientific nature.",This course is the first of three core computer science courses on programming.
0.8706,"Design, write and debug small programs to solve practical problems of a scientific nature.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8769,"Design, write and debug small programs to solve practical problems of a scientific nature.",Understand the legal context for protection of software as intellectual property.
0.8817,"Design, write and debug small programs to solve practical problems of a scientific nature.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8866,"Design, write and debug small programs to solve practical problems of a scientific nature.",These include distributed software revision control systems.
0.8898,"Design, write and debug small programs to solve practical problems of a scientific nature.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8903,"Design, write and debug small programs to solve practical problems of a scientific nature.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8909,"Design, write and debug small programs to solve practical problems of a scientific nature.",Understand basic types and the benefits of static typing.
0.8937,"Design, write and debug small programs to solve practical problems of a scientific nature.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8971,"Design, write and debug small programs to solve practical problems of a scientific nature.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8977,"Design, write and debug small programs to solve practical problems of a scientific nature.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8979,"Design, write and debug small programs to solve practical problems of a scientific nature.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9125,"Design, write and debug small programs to solve practical problems of a scientific nature.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9167,"Design, write and debug small programs to solve practical problems of a scientific nature.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9205,"Design, write and debug small programs to solve practical problems of a scientific nature.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9278,"Design, write and debug small programs to solve practical problems of a scientific nature.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9339,"Design, write and debug small programs to solve practical problems of a scientific nature.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9371,"Design, write and debug small programs to solve practical problems of a scientific nature.",Describe and apply alternative computational paradigms to simple problems.
0.9386,"Design, write and debug small programs to solve practical problems of a scientific nature.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8511,Have a practical understanding of the processing of scientific data.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8520,Have a practical understanding of the processing of scientific data.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8564,Have a practical understanding of the processing of scientific data.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8619,Have a practical understanding of the processing of scientific data.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8758,Have a practical understanding of the processing of scientific data.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8784,Have a practical understanding of the processing of scientific data.,These include distributed software revision control systems.
0.8811,Have a practical understanding of the processing of scientific data.,This course is the first of three core computer science courses on programming.
0.8849,Have a practical understanding of the processing of scientific data.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8907,Have a practical understanding of the processing of scientific data.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8920,Have a practical understanding of the processing of scientific data.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8945,Have a practical understanding of the processing of scientific data.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8953,Have a practical understanding of the processing of scientific data.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8973,Have a practical understanding of the processing of scientific data.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9024,Have a practical understanding of the processing of scientific data.,Understand basic types and the benefits of static typing.
0.9028,Have a practical understanding of the processing of scientific data.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9071,Have a practical understanding of the processing of scientific data.,Understand the legal context for protection of software as intellectual property.
0.9086,Have a practical understanding of the processing of scientific data.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9106,Have a practical understanding of the processing of scientific data.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9158,Have a practical understanding of the processing of scientific data.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9206,Have a practical understanding of the processing of scientific data.,Describe and apply alternative computational paradigms to simple problems.
0.8519,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8616,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,This course is the first of three core computer science courses on programming.
0.8718,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,Understand the legal context for protection of software as intellectual property.
0.8784,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8890,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,These include distributed software revision control systems.
0.8940,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8954,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,Understand basic types and the benefits of static typing.
0.8962,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8997,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.9023,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9035,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9069,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9144,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9189,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,Describe and apply alternative computational paradigms to simple problems.
0.9230,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9254,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9259,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9264,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9290,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9380,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8164,Have an awareness of good program organisation.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8232,Have an awareness of good program organisation.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8265,Have an awareness of good program organisation.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8327,Have an awareness of good program organisation.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8359,Have an awareness of good program organisation.,This course is the first of three core computer science courses on programming.
0.8405,Have an awareness of good program organisation.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8411,Have an awareness of good program organisation.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8497,Have an awareness of good program organisation.,These include distributed software revision control systems.
0.8509,Have an awareness of good program organisation.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8554,Have an awareness of good program organisation.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8576,Have an awareness of good program organisation.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8623,Have an awareness of good program organisation.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8667,Have an awareness of good program organisation.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8670,Have an awareness of good program organisation.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8708,Have an awareness of good program organisation.,Understand the legal context for protection of software as intellectual property.
0.8721,Have an awareness of good program organisation.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8751,Have an awareness of good program organisation.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8800,Have an awareness of good program organisation.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8844,Have an awareness of good program organisation.,Understand basic types and the benefits of static typing.
0.8906,Have an awareness of good program organisation.,Describe and apply alternative computational paradigms to simple problems.
0.8410,Have an understanding of some widely-used algorithms.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8632,Have an understanding of some widely-used algorithms.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8745,Have an understanding of some widely-used algorithms.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8764,Have an understanding of some widely-used algorithms.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8823,Have an understanding of some widely-used algorithms.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8833,Have an understanding of some widely-used algorithms.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8834,Have an understanding of some widely-used algorithms.,This course is the first of three core computer science courses on programming.
0.8837,Have an understanding of some widely-used algorithms.,These include distributed software revision control systems.
0.8846,Have an understanding of some widely-used algorithms.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8860,Have an understanding of some widely-used algorithms.,Understand the legal context for protection of software as intellectual property.
0.8871,Have an understanding of some widely-used algorithms.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8922,Have an understanding of some widely-used algorithms.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8958,Have an understanding of some widely-used algorithms.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8964,Have an understanding of some widely-used algorithms.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8977,Have an understanding of some widely-used algorithms.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9166,Have an understanding of some widely-used algorithms.,Understand basic types and the benefits of static typing.
0.9177,Have an understanding of some widely-used algorithms.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9251,Have an understanding of some widely-used algorithms.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9262,Have an understanding of some widely-used algorithms.,Describe and apply alternative computational paradigms to simple problems.
0.9274,Have an understanding of some widely-used algorithms.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8724,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,This course is the first of three core computer science courses on programming.
0.8781,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8784,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8825,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,These include distributed software revision control systems.
0.8896,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,Understand the legal context for protection of software as intellectual property.
0.8986,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9006,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9022,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9023,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9076,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9106,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9143,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9147,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9171,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9174,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9219,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,Understand basic types and the benefits of static typing.
0.9271,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9293,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,Describe and apply alternative computational paradigms to simple problems.
0.9301,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9370,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."

score,s1,s2
0.8244,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8280,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8327,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Systems concepts.
0.8440,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8519,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8539,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8720,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Preliminary system design: subsystem design requirements, design review."
0.8733,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",describe the holistic and multi-disciplinary nature of complex engineering projects.
0.8754,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",describe the Systems Engineering life-cycle.
0.8763,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Design testing, evaluation and validation."
0.8766,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",The Systems Engineering life-cycle and processes.
0.8772,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.8780,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8781,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",explain the role of Software Engineering within the broader context of Systems Engineering.
0.8785,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8798,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Integration of Systems Engineering and Software Engineering activities.
0.8872,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.8894,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.9029,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.7943,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8018,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",describe the Systems Engineering life-cycle.
0.8057,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8057,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Systems concepts.
0.8066,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8084,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Integration of Systems Engineering and Software Engineering activities.
0.8195,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8198,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Design testing, evaluation and validation."
0.8207,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8239,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",explain the role of Software Engineering within the broader context of Systems Engineering.
0.8258,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",The Systems Engineering life-cycle and processes.
0.8282,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8305,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",describe the holistic and multi-disciplinary nature of complex engineering projects.
0.8360,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.8360,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8424,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.8495,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Preliminary system design: subsystem design requirements, design review."
0.8713,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.9084,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8443,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Systems concepts.
0.8651,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Design testing, evaluation and validation."
0.8659,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",describe the Systems Engineering life-cycle.
0.8666,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8669,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Integration of Systems Engineering and Software Engineering activities.
0.8713,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",explain the role of Software Engineering within the broader context of Systems Engineering.
0.8740,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8792,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",The Systems Engineering life-cycle and processes.
0.8793,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8815,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8855,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Preliminary system design: subsystem design requirements, design review."
0.8886,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",describe the holistic and multi-disciplinary nature of complex engineering projects.
0.8890,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8898,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8915,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8927,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.8956,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.9097,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.9302,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8357,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8436,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8474,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Design testing, evaluation and validation."
0.8503,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Systems concepts.
0.8505,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8625,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Integration of Systems Engineering and Software Engineering activities.
0.8625,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8685,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,The Systems Engineering life-cycle and processes.
0.8711,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8721,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.8737,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,explain the role of Software Engineering within the broader context of Systems Engineering.
0.8742,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Preliminary system design: subsystem design requirements, design review."
0.8748,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,describe the Systems Engineering life-cycle.
0.8769,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8805,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.8837,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8863,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,describe the holistic and multi-disciplinary nature of complex engineering projects.
0.8897,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.8957,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8502,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8515,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8556,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Design testing, evaluation and validation."
0.8639,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,describe the Systems Engineering life-cycle.
0.8640,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8651,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,explain the role of Software Engineering within the broader context of Systems Engineering.
0.8658,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Systems concepts.
0.8715,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8725,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8736,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Integration of Systems Engineering and Software Engineering activities.
0.8749,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8805,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,The Systems Engineering life-cycle and processes.
0.8853,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.8870,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,describe the holistic and multi-disciplinary nature of complex engineering projects.
0.8872,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8901,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.8956,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Preliminary system design: subsystem design requirements, design review."
0.9029,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.9218,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8435,Demonstrate proficiency in software reverse engineering.,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8529,Demonstrate proficiency in software reverse engineering.,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8633,Demonstrate proficiency in software reverse engineering.,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8712,Demonstrate proficiency in software reverse engineering.,Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8728,Demonstrate proficiency in software reverse engineering.,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8784,Demonstrate proficiency in software reverse engineering.,Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8874,Demonstrate proficiency in software reverse engineering.,explain the role of Software Engineering within the broader context of Systems Engineering.
0.8886,Demonstrate proficiency in software reverse engineering.,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.8894,Demonstrate proficiency in software reverse engineering.,Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8922,Demonstrate proficiency in software reverse engineering.,"Preliminary system design: subsystem design requirements, design review."
0.8937,Demonstrate proficiency in software reverse engineering.,The Systems Engineering life-cycle and processes.
0.8961,Demonstrate proficiency in software reverse engineering.,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.8965,Demonstrate proficiency in software reverse engineering.,describe the Systems Engineering life-cycle.
0.8968,Demonstrate proficiency in software reverse engineering.,Integration of Systems Engineering and Software Engineering activities.
0.8979,Demonstrate proficiency in software reverse engineering.,Systems concepts.
0.8985,Demonstrate proficiency in software reverse engineering.,"Design testing, evaluation and validation."
0.9023,Demonstrate proficiency in software reverse engineering.,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.9030,Demonstrate proficiency in software reverse engineering.,describe the holistic and multi-disciplinary nature of complex engineering projects.
0.9058,Demonstrate proficiency in software reverse engineering.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8511,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8563,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8677,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8697,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8721,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",explain the role of Software Engineering within the broader context of Systems Engineering.
0.8722,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8739,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Systems concepts.
0.8774,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8787,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",describe the Systems Engineering life-cycle.
0.8812,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Integration of Systems Engineering and Software Engineering activities.
0.8836,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.8839,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Design testing, evaluation and validation."
0.8875,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",The Systems Engineering life-cycle and processes.
0.8879,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8883,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",describe the holistic and multi-disciplinary nature of complex engineering projects.
0.8917,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.8930,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Preliminary system design: subsystem design requirements, design review."
0.9093,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.9218,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8505,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Systems concepts.
0.8541,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.
0.8552,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.8635,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply."
0.8666,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.8684,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Design testing, evaluation and validation."
0.8775,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",explain the role of Software Engineering within the broader context of Systems Engineering.
0.8801,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",describe the Systems Engineering life-cycle.
0.8820,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Integration of Systems Engineering and Software Engineering activities.
0.8837,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Students will also improve their ability to understand and solve complex and ill-defined problems.
0.8910,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Preliminary system design: subsystem design requirements, design review."
0.8913,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",The Systems Engineering life-cycle and processes.
0.8944,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",identify and explain the activities involved in each phase of the Systems Engineering life-cycle.
0.8961,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8964,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",describe the holistic and multi-disciplinary nature of complex engineering projects.
0.8976,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.8987,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes."
0.9007,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.9261,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."

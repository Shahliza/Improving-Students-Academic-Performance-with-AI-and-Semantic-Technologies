score,s1,s2
0.8536,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8588,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8618,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8625,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8637,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8641,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8658,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8690,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",appreciate the building blocks of scientific and engineering software.
0.8770,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8776,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8817,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8852,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8900,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8836,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8867,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8879,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8984,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8993,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9000,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9026,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",appreciate the building blocks of scientific and engineering software.
0.9099,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.9103,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9173,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9175,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9179,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9309,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8884,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8889,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8913,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8952,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8971,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9014,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.9057,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9069,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9094,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9111,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9113,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",appreciate the building blocks of scientific and engineering software.
0.9189,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9200,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8220,Systems concepts.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8394,Systems concepts.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8460,Systems concepts.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8486,Systems concepts.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8500,Systems concepts.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8521,Systems concepts.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8626,Systems concepts.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8701,Systems concepts.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8733,Systems concepts.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8767,Systems concepts.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8776,Systems concepts.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8826,Systems concepts.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9102,Systems concepts.,appreciate the building blocks of scientific and engineering software.
0.8527,The Systems Engineering life-cycle and processes.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8571,The Systems Engineering life-cycle and processes.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8694,The Systems Engineering life-cycle and processes.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8752,The Systems Engineering life-cycle and processes.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8764,The Systems Engineering life-cycle and processes.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8806,The Systems Engineering life-cycle and processes.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8882,The Systems Engineering life-cycle and processes.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8892,The Systems Engineering life-cycle and processes.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8928,The Systems Engineering life-cycle and processes.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8931,The Systems Engineering life-cycle and processes.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.9005,The Systems Engineering life-cycle and processes.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9098,The Systems Engineering life-cycle and processes.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9151,The Systems Engineering life-cycle and processes.,appreciate the building blocks of scientific and engineering software.
0.8694,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8780,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8780,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8906,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8910,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8981,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.9003,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.9020,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",appreciate the building blocks of scientific and engineering software.
0.9040,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9130,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9161,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9212,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9226,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8496,"Preliminary system design: subsystem design requirements, design review.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8540,"Preliminary system design: subsystem design requirements, design review.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8568,"Preliminary system design: subsystem design requirements, design review.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8627,"Preliminary system design: subsystem design requirements, design review.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8673,"Preliminary system design: subsystem design requirements, design review.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8724,"Preliminary system design: subsystem design requirements, design review.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8767,"Preliminary system design: subsystem design requirements, design review.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8807,"Preliminary system design: subsystem design requirements, design review.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8830,"Preliminary system design: subsystem design requirements, design review.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8897,"Preliminary system design: subsystem design requirements, design review.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8946,"Preliminary system design: subsystem design requirements, design review.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8949,"Preliminary system design: subsystem design requirements, design review.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8982,"Preliminary system design: subsystem design requirements, design review.",appreciate the building blocks of scientific and engineering software.
0.8517,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8615,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8619,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8620,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8664,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8829,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8863,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8882,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8920,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",appreciate the building blocks of scientific and engineering software.
0.8922,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8942,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8984,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9005,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8246,"Design testing, evaluation and validation.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8358,"Design testing, evaluation and validation.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8361,"Design testing, evaluation and validation.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8403,"Design testing, evaluation and validation.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8484,"Design testing, evaluation and validation.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8512,"Design testing, evaluation and validation.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8540,"Design testing, evaluation and validation.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8552,"Design testing, evaluation and validation.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8652,"Design testing, evaluation and validation.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8652,"Design testing, evaluation and validation.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8705,"Design testing, evaluation and validation.",appreciate the building blocks of scientific and engineering software.
0.8746,"Design testing, evaluation and validation.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8879,"Design testing, evaluation and validation.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8756,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8760,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8779,Design for sustainability: approaches that integrate sustainability principles into the design process.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8848,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8855,Design for sustainability: approaches that integrate sustainability principles into the design process.,appreciate the building blocks of scientific and engineering software.
0.8913,Design for sustainability: approaches that integrate sustainability principles into the design process.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8917,Design for sustainability: approaches that integrate sustainability principles into the design process.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8951,Design for sustainability: approaches that integrate sustainability principles into the design process.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8993,Design for sustainability: approaches that integrate sustainability principles into the design process.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9003,Design for sustainability: approaches that integrate sustainability principles into the design process.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9005,Design for sustainability: approaches that integrate sustainability principles into the design process.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.9017,Design for sustainability: approaches that integrate sustainability principles into the design process.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9041,Design for sustainability: approaches that integrate sustainability principles into the design process.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8556,Integration of Systems Engineering and Software Engineering activities.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8641,Integration of Systems Engineering and Software Engineering activities.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8654,Integration of Systems Engineering and Software Engineering activities.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8744,Integration of Systems Engineering and Software Engineering activities.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8755,Integration of Systems Engineering and Software Engineering activities.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8765,Integration of Systems Engineering and Software Engineering activities.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8847,Integration of Systems Engineering and Software Engineering activities.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8867,Integration of Systems Engineering and Software Engineering activities.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8985,Integration of Systems Engineering and Software Engineering activities.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.9005,Integration of Systems Engineering and Software Engineering activities.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9030,Integration of Systems Engineering and Software Engineering activities.,appreciate the building blocks of scientific and engineering software.
0.9103,Integration of Systems Engineering and Software Engineering activities.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9193,Integration of Systems Engineering and Software Engineering activities.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8700,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8730,describe the holistic and multi-disciplinary nature of complex engineering projects.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8775,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8866,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8936,describe the holistic and multi-disciplinary nature of complex engineering projects.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8945,describe the holistic and multi-disciplinary nature of complex engineering projects.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8950,describe the holistic and multi-disciplinary nature of complex engineering projects.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9086,describe the holistic and multi-disciplinary nature of complex engineering projects.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9092,describe the holistic and multi-disciplinary nature of complex engineering projects.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.9147,describe the holistic and multi-disciplinary nature of complex engineering projects.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.9156,describe the holistic and multi-disciplinary nature of complex engineering projects.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9203,describe the holistic and multi-disciplinary nature of complex engineering projects.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9209,describe the holistic and multi-disciplinary nature of complex engineering projects.,appreciate the building blocks of scientific and engineering software.
0.8432,describe the Systems Engineering life-cycle.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8469,describe the Systems Engineering life-cycle.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8527,describe the Systems Engineering life-cycle.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8732,describe the Systems Engineering life-cycle.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8752,describe the Systems Engineering life-cycle.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8765,describe the Systems Engineering life-cycle.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8832,describe the Systems Engineering life-cycle.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8838,describe the Systems Engineering life-cycle.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8844,describe the Systems Engineering life-cycle.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8872,describe the Systems Engineering life-cycle.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8901,describe the Systems Engineering life-cycle.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8979,describe the Systems Engineering life-cycle.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9087,describe the Systems Engineering life-cycle.,appreciate the building blocks of scientific and engineering software.
0.8537,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8590,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8657,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8723,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8727,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8810,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8814,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8832,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8900,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,appreciate the building blocks of scientific and engineering software.
0.8937,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8946,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8967,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8996,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8588,explain the role of Software Engineering within the broader context of Systems Engineering.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8765,explain the role of Software Engineering within the broader context of Systems Engineering.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8778,explain the role of Software Engineering within the broader context of Systems Engineering.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8787,explain the role of Software Engineering within the broader context of Systems Engineering.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8818,explain the role of Software Engineering within the broader context of Systems Engineering.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8843,explain the role of Software Engineering within the broader context of Systems Engineering.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8863,explain the role of Software Engineering within the broader context of Systems Engineering.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8893,explain the role of Software Engineering within the broader context of Systems Engineering.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8921,explain the role of Software Engineering within the broader context of Systems Engineering.,appreciate the building blocks of scientific and engineering software.
0.8966,explain the role of Software Engineering within the broader context of Systems Engineering.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9065,explain the role of Software Engineering within the broader context of Systems Engineering.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9119,explain the role of Software Engineering within the broader context of Systems Engineering.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9168,explain the role of Software Engineering within the broader context of Systems Engineering.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8555,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8644,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8683,Students will also improve their ability to understand and solve complex and ill-defined problems.,appreciate the building blocks of scientific and engineering software.
0.8740,Students will also improve their ability to understand and solve complex and ill-defined problems.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8809,Students will also improve their ability to understand and solve complex and ill-defined problems.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8819,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8844,Students will also improve their ability to understand and solve complex and ill-defined problems.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8860,Students will also improve their ability to understand and solve complex and ill-defined problems.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8870,Students will also improve their ability to understand and solve complex and ill-defined problems.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8878,Students will also improve their ability to understand and solve complex and ill-defined problems.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8904,Students will also improve their ability to understand and solve complex and ill-defined problems.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8956,Students will also improve their ability to understand and solve complex and ill-defined problems.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9065,Students will also improve their ability to understand and solve complex and ill-defined problems.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8451,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8594,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,appreciate the building blocks of scientific and engineering software.
0.8612,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8642,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8719,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8729,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8738,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8744,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8783,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8798,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8818,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8820,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8947,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8468,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8563,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8571,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,appreciate the building blocks of scientific and engineering software.
0.8590,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8606,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8651,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8743,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8762,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8767,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8877,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8883,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8890,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8907,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8386,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8503,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,appreciate the building blocks of scientific and engineering software.
0.8537,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8575,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8582,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8615,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8624,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8631,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8642,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8687,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8714,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8802,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8825,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.

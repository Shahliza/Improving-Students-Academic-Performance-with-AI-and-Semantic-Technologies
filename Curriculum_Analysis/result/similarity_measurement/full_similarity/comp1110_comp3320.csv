score,s1,s2
0.8388,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8435,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8481,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8481,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8682,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8713,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8741,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8834,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8848,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8859,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8999,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9028,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9058,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9117,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9128,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9219,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9227,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8671,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8689,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8729,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8782,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8794,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8928,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9003,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9010,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9053,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9103,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9107,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9116,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9127,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9151,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9167,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9178,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9185,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8742,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8772,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8830,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8844,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8890,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8916,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8963,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9014,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9062,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9093,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9146,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9174,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9183,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9185,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9190,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9213,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9288,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8736,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8837,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8927,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8937,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8948,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8953,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8983,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9013,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9084,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9084,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9117,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9151,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9162,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9235,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9255,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9265,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9280,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8850,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8854,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8988,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9001,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9003,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9004,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9093,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9097,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9135,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9152,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9167,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9171,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9190,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9195,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9221,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9226,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9231,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8494,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8754,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8874,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8924,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9062,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9069,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9093,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9106,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9119,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9202,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9209,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9220,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9233,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9244,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9249,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9333,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9345,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8618,appreciate the building blocks of scientific and engineering software.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8669,appreciate the building blocks of scientific and engineering software.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8669,appreciate the building blocks of scientific and engineering software.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8678,appreciate the building blocks of scientific and engineering software.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8865,appreciate the building blocks of scientific and engineering software.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8897,appreciate the building blocks of scientific and engineering software.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8975,appreciate the building blocks of scientific and engineering software.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9032,appreciate the building blocks of scientific and engineering software.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9055,appreciate the building blocks of scientific and engineering software.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9099,appreciate the building blocks of scientific and engineering software.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9105,appreciate the building blocks of scientific and engineering software.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9131,appreciate the building blocks of scientific and engineering software.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9179,appreciate the building blocks of scientific and engineering software.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9188,appreciate the building blocks of scientific and engineering software.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9193,appreciate the building blocks of scientific and engineering software.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9214,appreciate the building blocks of scientific and engineering software.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9237,appreciate the building blocks of scientific and engineering software.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8721,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8823,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8875,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8891,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8936,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8961,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8991,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9037,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9127,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9148,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9154,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9162,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9169,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9199,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9244,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9264,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9392,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8656,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8892,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8961,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9036,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9039,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9044,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9092,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9114,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9127,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9129,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9141,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9160,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9163,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9175,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9179,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9201,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9291,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8621,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8718,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8728,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8753,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8755,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8810,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8815,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8840,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8850,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8862,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8866,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8906,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8945,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8949,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8968,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9068,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9155,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8434,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8441,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8452,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8490,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8646,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8655,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8778,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8785,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8802,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8824,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8872,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8914,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8933,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8947,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8985,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9015,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9064,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8727,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8820,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8846,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8890,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8990,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9012,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9035,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9055,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9065,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9125,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9162,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9168,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9194,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9203,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9245,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9265,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9266,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8468,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8639,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8691,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8718,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8719,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8821,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8898,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8926,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8933,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8981,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8992,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9017,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9044,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9058,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9107,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9153,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9182,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."

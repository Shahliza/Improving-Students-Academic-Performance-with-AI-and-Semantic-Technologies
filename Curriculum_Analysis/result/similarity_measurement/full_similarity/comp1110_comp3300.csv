score,s1,s2
0.8540,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8580,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8688,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8817,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8840,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8853,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8871,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8879,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8890,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8930,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8957,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8976,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9012,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9050,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9059,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9061,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9081,"This course takes a detailed look at the services provided by, and the internals of, an existing operating system to see how each part is constructed and integrated into the whole.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8518,The lectures will also address recent literature describing advances in operating systems.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8524,The lectures will also address recent literature describing advances in operating systems.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8595,The lectures will also address recent literature describing advances in operating systems.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8672,The lectures will also address recent literature describing advances in operating systems.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8721,The lectures will also address recent literature describing advances in operating systems.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8860,The lectures will also address recent literature describing advances in operating systems.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8872,The lectures will also address recent literature describing advances in operating systems.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8935,The lectures will also address recent literature describing advances in operating systems.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8954,The lectures will also address recent literature describing advances in operating systems.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8996,The lectures will also address recent literature describing advances in operating systems.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9014,The lectures will also address recent literature describing advances in operating systems.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9021,The lectures will also address recent literature describing advances in operating systems.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9028,The lectures will also address recent literature describing advances in operating systems.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9035,The lectures will also address recent literature describing advances in operating systems.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9051,The lectures will also address recent literature describing advances in operating systems.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9064,The lectures will also address recent literature describing advances in operating systems.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9169,The lectures will also address recent literature describing advances in operating systems.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8207,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8604,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8633,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8754,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8784,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8858,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8914,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8916,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8953,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8972,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8992,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8995,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9108,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9136,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9166,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9168,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9379,"The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8698,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8818,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8965,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8990,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9059,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9085,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9098,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9115,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9130,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9168,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9198,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9231,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9242,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9246,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9289,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9298,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9435,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8413,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8469,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8740,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8784,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8802,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8812,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8871,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8912,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8915,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9028,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9044,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9058,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9090,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9092,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9168,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9209,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9227,describe and analyse the actual algorithms and data structures that are used in a particular operating system.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8427,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8591,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8733,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8791,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8839,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8941,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8947,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8952,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8954,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8972,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9045,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9056,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9149,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9158,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9219,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9282,"define and analyse the structure of operating systems in general, especially those that support communicating processes.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9298,"define and analyse the structure of operating systems in general, especially those that support communicating processes.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8533,identify and describe the reasons for many architectural features of contemporary machines.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8537,identify and describe the reasons for many architectural features of contemporary machines.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8597,identify and describe the reasons for many architectural features of contemporary machines.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8662,identify and describe the reasons for many architectural features of contemporary machines.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8666,identify and describe the reasons for many architectural features of contemporary machines.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8804,identify and describe the reasons for many architectural features of contemporary machines.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8926,identify and describe the reasons for many architectural features of contemporary machines.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8936,identify and describe the reasons for many architectural features of contemporary machines.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8946,identify and describe the reasons for many architectural features of contemporary machines.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8948,identify and describe the reasons for many architectural features of contemporary machines.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8950,identify and describe the reasons for many architectural features of contemporary machines.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8955,identify and describe the reasons for many architectural features of contemporary machines.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8973,identify and describe the reasons for many architectural features of contemporary machines.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8995,identify and describe the reasons for many architectural features of contemporary machines.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9033,identify and describe the reasons for many architectural features of contemporary machines.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9044,identify and describe the reasons for many architectural features of contemporary machines.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9118,identify and describe the reasons for many architectural features of contemporary machines.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8636,demonstrate experience in the design and implementation of a large software system.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8668,demonstrate experience in the design and implementation of a large software system.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8686,demonstrate experience in the design and implementation of a large software system.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8751,demonstrate experience in the design and implementation of a large software system.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8754,demonstrate experience in the design and implementation of a large software system.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8786,demonstrate experience in the design and implementation of a large software system.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8905,demonstrate experience in the design and implementation of a large software system.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8930,demonstrate experience in the design and implementation of a large software system.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8943,demonstrate experience in the design and implementation of a large software system.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9063,demonstrate experience in the design and implementation of a large software system.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9087,demonstrate experience in the design and implementation of a large software system.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9147,demonstrate experience in the design and implementation of a large software system.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9149,demonstrate experience in the design and implementation of a large software system.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9172,demonstrate experience in the design and implementation of a large software system.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9182,demonstrate experience in the design and implementation of a large software system.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9226,demonstrate experience in the design and implementation of a large software system.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9260,demonstrate experience in the design and implementation of a large software system.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.

score,s1,s2
0.8394,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8421,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8553,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8587,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8666,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Apply fundamental programming concepts for medium scale programs.
0.8675,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",The course also treats intellectual property considerations in software development and deployment.
0.8702,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8733,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8745,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8755,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8765,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8770,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8806,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Understand, apply, and analyse state and state machines in expressing computations."
0.8816,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8959,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8521,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8555,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8610,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8884,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8898,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8922,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8927,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8961,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8963,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8988,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Understand, apply, and analyse state and state machines in expressing computations."
0.9025,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9069,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9078,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Apply fundamental programming concepts for medium scale programs.
0.9118,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",The course also treats intellectual property considerations in software development and deployment.
0.9137,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8389,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8611,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8633,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8806,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8826,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8842,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8863,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Understand, apply, and analyse state and state machines in expressing computations."
0.8906,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8937,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8972,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9035,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9042,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Apply fundamental programming concepts for medium scale programs.
0.9061,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9155,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9221,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",The course also treats intellectual property considerations in software development and deployment.
0.8320,Systems concepts.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8328,Systems concepts.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8519,Systems concepts.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8549,Systems concepts.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8625,Systems concepts.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8660,Systems concepts.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8669,Systems concepts.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8672,Systems concepts.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8694,Systems concepts.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8707,Systems concepts.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8789,Systems concepts.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8856,Systems concepts.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8918,Systems concepts.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9088,Systems concepts.,The course also treats intellectual property considerations in software development and deployment.
0.9200,Systems concepts.,Apply fundamental programming concepts for medium scale programs.
0.8408,The Systems Engineering life-cycle and processes.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8415,The Systems Engineering life-cycle and processes.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8511,The Systems Engineering life-cycle and processes.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8662,The Systems Engineering life-cycle and processes.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8663,The Systems Engineering life-cycle and processes.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8701,The Systems Engineering life-cycle and processes.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8850,The Systems Engineering life-cycle and processes.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8860,The Systems Engineering life-cycle and processes.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8869,The Systems Engineering life-cycle and processes.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8879,The Systems Engineering life-cycle and processes.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8928,The Systems Engineering life-cycle and processes.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8944,The Systems Engineering life-cycle and processes.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8965,The Systems Engineering life-cycle and processes.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9071,The Systems Engineering life-cycle and processes.,Apply fundamental programming concepts for medium scale programs.
0.9223,The Systems Engineering life-cycle and processes.,The course also treats intellectual property considerations in software development and deployment.
0.9008,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9032,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9077,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9080,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9109,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9113,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Apply fundamental programming concepts for medium scale programs.
0.9135,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Understand, apply, and analyse state and state machines in expressing computations."
0.9149,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9195,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9262,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",The course also treats intellectual property considerations in software development and deployment.
0.9270,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9302,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9375,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9391,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9463,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8466,"Preliminary system design: subsystem design requirements, design review.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8475,"Preliminary system design: subsystem design requirements, design review.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8607,"Preliminary system design: subsystem design requirements, design review.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8625,"Preliminary system design: subsystem design requirements, design review.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8736,"Preliminary system design: subsystem design requirements, design review.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8775,"Preliminary system design: subsystem design requirements, design review.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8779,"Preliminary system design: subsystem design requirements, design review.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8806,"Preliminary system design: subsystem design requirements, design review.","Understand, apply, and analyse state and state machines in expressing computations."
0.8828,"Preliminary system design: subsystem design requirements, design review.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8845,"Preliminary system design: subsystem design requirements, design review.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8863,"Preliminary system design: subsystem design requirements, design review.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8983,"Preliminary system design: subsystem design requirements, design review.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9021,"Preliminary system design: subsystem design requirements, design review.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9025,"Preliminary system design: subsystem design requirements, design review.",Apply fundamental programming concepts for medium scale programs.
0.9067,"Preliminary system design: subsystem design requirements, design review.",The course also treats intellectual property considerations in software development and deployment.
0.8749,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8827,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8862,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8915,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8969,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Understand, apply, and analyse state and state machines in expressing computations."
0.9032,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9043,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9049,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9049,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Apply fundamental programming concepts for medium scale programs.
0.9085,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9139,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",The course also treats intellectual property considerations in software development and deployment.
0.9182,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9221,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9222,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9378,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8136,"Design testing, evaluation and validation.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8194,"Design testing, evaluation and validation.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8349,"Design testing, evaluation and validation.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8374,"Design testing, evaluation and validation.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8425,"Design testing, evaluation and validation.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8564,"Design testing, evaluation and validation.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8614,"Design testing, evaluation and validation.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8656,"Design testing, evaluation and validation.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8679,"Design testing, evaluation and validation.","Understand, apply, and analyse state and state machines in expressing computations."
0.8693,"Design testing, evaluation and validation.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8695,"Design testing, evaluation and validation.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8727,"Design testing, evaluation and validation.",Apply fundamental programming concepts for medium scale programs.
0.8732,"Design testing, evaluation and validation.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8794,"Design testing, evaluation and validation.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9047,"Design testing, evaluation and validation.",The course also treats intellectual property considerations in software development and deployment.
0.8388,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8540,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8542,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8726,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8832,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8840,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8906,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8958,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8999,Design for sustainability: approaches that integrate sustainability principles into the design process.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9007,Design for sustainability: approaches that integrate sustainability principles into the design process.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9079,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9093,Design for sustainability: approaches that integrate sustainability principles into the design process.,Apply fundamental programming concepts for medium scale programs.
0.9141,Design for sustainability: approaches that integrate sustainability principles into the design process.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9164,Design for sustainability: approaches that integrate sustainability principles into the design process.,The course also treats intellectual property considerations in software development and deployment.
0.9215,Design for sustainability: approaches that integrate sustainability principles into the design process.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8142,Integration of Systems Engineering and Software Engineering activities.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8290,Integration of Systems Engineering and Software Engineering activities.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8296,Integration of Systems Engineering and Software Engineering activities.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8487,Integration of Systems Engineering and Software Engineering activities.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8526,Integration of Systems Engineering and Software Engineering activities.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8573,Integration of Systems Engineering and Software Engineering activities.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8622,Integration of Systems Engineering and Software Engineering activities.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8651,Integration of Systems Engineering and Software Engineering activities.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8676,Integration of Systems Engineering and Software Engineering activities.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8710,Integration of Systems Engineering and Software Engineering activities.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8846,Integration of Systems Engineering and Software Engineering activities.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8911,Integration of Systems Engineering and Software Engineering activities.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8966,Integration of Systems Engineering and Software Engineering activities.,Apply fundamental programming concepts for medium scale programs.
0.9027,Integration of Systems Engineering and Software Engineering activities.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9185,Integration of Systems Engineering and Software Engineering activities.,The course also treats intellectual property considerations in software development and deployment.
0.8502,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8541,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8687,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8851,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8875,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8889,describe the holistic and multi-disciplinary nature of complex engineering projects.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8893,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8918,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8991,describe the holistic and multi-disciplinary nature of complex engineering projects.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9015,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9028,describe the holistic and multi-disciplinary nature of complex engineering projects.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9034,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9060,describe the holistic and multi-disciplinary nature of complex engineering projects.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9143,describe the holistic and multi-disciplinary nature of complex engineering projects.,The course also treats intellectual property considerations in software development and deployment.
0.9204,describe the holistic and multi-disciplinary nature of complex engineering projects.,Apply fundamental programming concepts for medium scale programs.
0.8117,describe the Systems Engineering life-cycle.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8256,describe the Systems Engineering life-cycle.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8293,describe the Systems Engineering life-cycle.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8431,describe the Systems Engineering life-cycle.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8460,describe the Systems Engineering life-cycle.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8478,describe the Systems Engineering life-cycle.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8515,describe the Systems Engineering life-cycle.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8593,describe the Systems Engineering life-cycle.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8743,describe the Systems Engineering life-cycle.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8793,describe the Systems Engineering life-cycle.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8818,describe the Systems Engineering life-cycle.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8836,describe the Systems Engineering life-cycle.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8928,describe the Systems Engineering life-cycle.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8968,describe the Systems Engineering life-cycle.,Apply fundamental programming concepts for medium scale programs.
0.9163,describe the Systems Engineering life-cycle.,The course also treats intellectual property considerations in software development and deployment.
0.8184,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8381,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8393,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8545,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8633,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8663,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8731,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8738,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8740,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8814,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8843,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Apply fundamental programming concepts for medium scale programs.
0.8905,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8989,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9041,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9083,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,The course also treats intellectual property considerations in software development and deployment.
0.8155,explain the role of Software Engineering within the broader context of Systems Engineering.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8433,explain the role of Software Engineering within the broader context of Systems Engineering.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8575,explain the role of Software Engineering within the broader context of Systems Engineering.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8583,explain the role of Software Engineering within the broader context of Systems Engineering.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8622,explain the role of Software Engineering within the broader context of Systems Engineering.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8708,explain the role of Software Engineering within the broader context of Systems Engineering.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8715,explain the role of Software Engineering within the broader context of Systems Engineering.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8758,explain the role of Software Engineering within the broader context of Systems Engineering.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8785,explain the role of Software Engineering within the broader context of Systems Engineering.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8792,explain the role of Software Engineering within the broader context of Systems Engineering.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8828,explain the role of Software Engineering within the broader context of Systems Engineering.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8914,explain the role of Software Engineering within the broader context of Systems Engineering.,Apply fundamental programming concepts for medium scale programs.
0.9046,explain the role of Software Engineering within the broader context of Systems Engineering.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9113,explain the role of Software Engineering within the broader context of Systems Engineering.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9213,explain the role of Software Engineering within the broader context of Systems Engineering.,The course also treats intellectual property considerations in software development and deployment.
0.8361,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8435,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8590,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8774,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8802,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8830,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8841,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8847,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8862,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8865,Students will also improve their ability to understand and solve complex and ill-defined problems.,Apply fundamental programming concepts for medium scale programs.
0.8869,Students will also improve their ability to understand and solve complex and ill-defined problems.,The course also treats intellectual property considerations in software development and deployment.
0.8888,Students will also improve their ability to understand and solve complex and ill-defined problems.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8940,Students will also improve their ability to understand and solve complex and ill-defined problems.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8963,Students will also improve their ability to understand and solve complex and ill-defined problems.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9043,Students will also improve their ability to understand and solve complex and ill-defined problems.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8045,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8269,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8342,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8490,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8539,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8580,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8617,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8627,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Apply fundamental programming concepts for medium scale programs.
0.8637,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8714,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8731,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8822,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8861,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,The course also treats intellectual property considerations in software development and deployment.
0.9024,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9047,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8171,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8188,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8468,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8619,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8624,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8628,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8731,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Apply fundamental programming concepts for medium scale programs.
0.8764,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8781,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8829,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8869,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8983,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,The course also treats intellectual property considerations in software development and deployment.
0.8983,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8995,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9004,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8172,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8300,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8420,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8554,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8570,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Apply fundamental programming concepts for medium scale programs.
0.8617,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8645,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8647,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8709,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8722,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,The course also treats intellectual property considerations in software development and deployment.
0.8768,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8770,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8784,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8847,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8909,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."

score,s1,s2
0.8333,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Have an awareness of good program organisation.
0.8386,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Both top-down and object oriented design are taught.
0.8405,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8423,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8474,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",There is an emphasis on designing and writing correct code.
0.8587,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Have an understanding of some widely-used algorithms.
0.8681,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8695,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8705,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Testing and debugging are seen as integral to the programming enterprise.
0.8750,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8793,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",Have a practical understanding of the processing of scientific data.
0.8840,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8879,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8622,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Have an awareness of good program organisation.
0.8828,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8897,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8921,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",There is an emphasis on designing and writing correct code.
0.8934,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Both top-down and object oriented design are taught.
0.8957,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8981,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Have an understanding of some widely-used algorithms.
0.9029,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9093,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Testing and debugging are seen as integral to the programming enterprise.
0.9134,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9238,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9268,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",Have a practical understanding of the processing of scientific data.
0.9273,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8455,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Have an awareness of good program organisation.
0.8857,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Both top-down and object oriented design are taught.
0.8883,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8912,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",There is an emphasis on designing and writing correct code.
0.8923,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8930,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Have an understanding of some widely-used algorithms.
0.8945,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9035,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9110,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9130,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Have a practical understanding of the processing of scientific data.
0.9133,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9186,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9219,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",Testing and debugging are seen as integral to the programming enterprise.
0.8458,Systems concepts.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8598,Systems concepts.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8671,Systems concepts.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8683,Systems concepts.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8706,Systems concepts.,There is an emphasis on designing and writing correct code.
0.8715,Systems concepts.,Both top-down and object oriented design are taught.
0.8817,Systems concepts.,Have an understanding of some widely-used algorithms.
0.8842,Systems concepts.,Testing and debugging are seen as integral to the programming enterprise.
0.8873,Systems concepts.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8876,Systems concepts.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8896,Systems concepts.,Have an awareness of good program organisation.
0.8922,Systems concepts.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8941,Systems concepts.,Have a practical understanding of the processing of scientific data.
0.8593,The Systems Engineering life-cycle and processes.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8669,The Systems Engineering life-cycle and processes.,There is an emphasis on designing and writing correct code.
0.8710,The Systems Engineering life-cycle and processes.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8747,The Systems Engineering life-cycle and processes.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8753,The Systems Engineering life-cycle and processes.,Have an awareness of good program organisation.
0.8777,The Systems Engineering life-cycle and processes.,Both top-down and object oriented design are taught.
0.8778,The Systems Engineering life-cycle and processes.,Have an understanding of some widely-used algorithms.
0.8856,The Systems Engineering life-cycle and processes.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8951,The Systems Engineering life-cycle and processes.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9024,The Systems Engineering life-cycle and processes.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9047,The Systems Engineering life-cycle and processes.,Testing and debugging are seen as integral to the programming enterprise.
0.9070,The Systems Engineering life-cycle and processes.,Have a practical understanding of the processing of scientific data.
0.9138,The Systems Engineering life-cycle and processes.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8598,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8734,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Have an understanding of some widely-used algorithms.
0.8814,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",There is an emphasis on designing and writing correct code.
0.8892,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Have an awareness of good program organisation.
0.8892,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8898,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8923,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Both top-down and object oriented design are taught.
0.8987,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Have a practical understanding of the processing of scientific data.
0.9033,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9047,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9183,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9206,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Testing and debugging are seen as integral to the programming enterprise.
0.9229,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8502,"Preliminary system design: subsystem design requirements, design review.",Have an awareness of good program organisation.
0.8525,"Preliminary system design: subsystem design requirements, design review.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8564,"Preliminary system design: subsystem design requirements, design review.",Have an understanding of some widely-used algorithms.
0.8612,"Preliminary system design: subsystem design requirements, design review.",There is an emphasis on designing and writing correct code.
0.8637,"Preliminary system design: subsystem design requirements, design review.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8652,"Preliminary system design: subsystem design requirements, design review.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8664,"Preliminary system design: subsystem design requirements, design review.",Both top-down and object oriented design are taught.
0.8796,"Preliminary system design: subsystem design requirements, design review.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8810,"Preliminary system design: subsystem design requirements, design review.",Have a practical understanding of the processing of scientific data.
0.8892,"Preliminary system design: subsystem design requirements, design review.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8925,"Preliminary system design: subsystem design requirements, design review.",Testing and debugging are seen as integral to the programming enterprise.
0.8940,"Preliminary system design: subsystem design requirements, design review.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8951,"Preliminary system design: subsystem design requirements, design review.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8422,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8634,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Have an understanding of some widely-used algorithms.
0.8711,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8782,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Both top-down and object oriented design are taught.
0.8811,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8837,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",There is an emphasis on designing and writing correct code.
0.8888,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8898,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Have an awareness of good program organisation.
0.8942,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Have a practical understanding of the processing of scientific data.
0.8965,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9026,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9055,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9118,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",Testing and debugging are seen as integral to the programming enterprise.
0.8364,"Design testing, evaluation and validation.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8415,"Design testing, evaluation and validation.",Have an awareness of good program organisation.
0.8511,"Design testing, evaluation and validation.",Have an understanding of some widely-used algorithms.
0.8525,"Design testing, evaluation and validation.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8528,"Design testing, evaluation and validation.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8657,"Design testing, evaluation and validation.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8672,"Design testing, evaluation and validation.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8700,"Design testing, evaluation and validation.",Both top-down and object oriented design are taught.
0.8816,"Design testing, evaluation and validation.",There is an emphasis on designing and writing correct code.
0.8876,"Design testing, evaluation and validation.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8921,"Design testing, evaluation and validation.",Have a practical understanding of the processing of scientific data.
0.8924,"Design testing, evaluation and validation.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9021,"Design testing, evaluation and validation.",Testing and debugging are seen as integral to the programming enterprise.
0.8653,Design for sustainability: approaches that integrate sustainability principles into the design process.,Have an awareness of good program organisation.
0.8707,Design for sustainability: approaches that integrate sustainability principles into the design process.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8802,Design for sustainability: approaches that integrate sustainability principles into the design process.,Have an understanding of some widely-used algorithms.
0.8808,Design for sustainability: approaches that integrate sustainability principles into the design process.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8871,Design for sustainability: approaches that integrate sustainability principles into the design process.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8923,Design for sustainability: approaches that integrate sustainability principles into the design process.,There is an emphasis on designing and writing correct code.
0.8950,Design for sustainability: approaches that integrate sustainability principles into the design process.,Both top-down and object oriented design are taught.
0.8970,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8990,Design for sustainability: approaches that integrate sustainability principles into the design process.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9020,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9046,Design for sustainability: approaches that integrate sustainability principles into the design process.,Have a practical understanding of the processing of scientific data.
0.9049,Design for sustainability: approaches that integrate sustainability principles into the design process.,Testing and debugging are seen as integral to the programming enterprise.
0.9241,Design for sustainability: approaches that integrate sustainability principles into the design process.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8461,Integration of Systems Engineering and Software Engineering activities.,Have an awareness of good program organisation.
0.8653,Integration of Systems Engineering and Software Engineering activities.,Have an understanding of some widely-used algorithms.
0.8681,Integration of Systems Engineering and Software Engineering activities.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8689,Integration of Systems Engineering and Software Engineering activities.,There is an emphasis on designing and writing correct code.
0.8738,Integration of Systems Engineering and Software Engineering activities.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8749,Integration of Systems Engineering and Software Engineering activities.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8799,Integration of Systems Engineering and Software Engineering activities.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8842,Integration of Systems Engineering and Software Engineering activities.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8875,Integration of Systems Engineering and Software Engineering activities.,Both top-down and object oriented design are taught.
0.8951,Integration of Systems Engineering and Software Engineering activities.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9019,Integration of Systems Engineering and Software Engineering activities.,Have a practical understanding of the processing of scientific data.
0.9048,Integration of Systems Engineering and Software Engineering activities.,Testing and debugging are seen as integral to the programming enterprise.
0.9182,Integration of Systems Engineering and Software Engineering activities.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8703,describe the holistic and multi-disciplinary nature of complex engineering projects.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8839,describe the holistic and multi-disciplinary nature of complex engineering projects.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8881,describe the holistic and multi-disciplinary nature of complex engineering projects.,Have an awareness of good program organisation.
0.8890,describe the holistic and multi-disciplinary nature of complex engineering projects.,Both top-down and object oriented design are taught.
0.8929,describe the holistic and multi-disciplinary nature of complex engineering projects.,There is an emphasis on designing and writing correct code.
0.8937,describe the holistic and multi-disciplinary nature of complex engineering projects.,Have an understanding of some widely-used algorithms.
0.9005,describe the holistic and multi-disciplinary nature of complex engineering projects.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9007,describe the holistic and multi-disciplinary nature of complex engineering projects.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9036,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9104,describe the holistic and multi-disciplinary nature of complex engineering projects.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9133,describe the holistic and multi-disciplinary nature of complex engineering projects.,Testing and debugging are seen as integral to the programming enterprise.
0.9204,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9277,describe the holistic and multi-disciplinary nature of complex engineering projects.,Have a practical understanding of the processing of scientific data.
0.8473,describe the Systems Engineering life-cycle.,Have an awareness of good program organisation.
0.8663,describe the Systems Engineering life-cycle.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8736,describe the Systems Engineering life-cycle.,There is an emphasis on designing and writing correct code.
0.8738,describe the Systems Engineering life-cycle.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8814,describe the Systems Engineering life-cycle.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8837,describe the Systems Engineering life-cycle.,Both top-down and object oriented design are taught.
0.8838,describe the Systems Engineering life-cycle.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8878,describe the Systems Engineering life-cycle.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8890,describe the Systems Engineering life-cycle.,Have an understanding of some widely-used algorithms.
0.8918,describe the Systems Engineering life-cycle.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8986,describe the Systems Engineering life-cycle.,Testing and debugging are seen as integral to the programming enterprise.
0.9033,describe the Systems Engineering life-cycle.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9131,describe the Systems Engineering life-cycle.,Have a practical understanding of the processing of scientific data.
0.8376,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Have an awareness of good program organisation.
0.8628,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,There is an emphasis on designing and writing correct code.
0.8692,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8704,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Both top-down and object oriented design are taught.
0.8727,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8807,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8832,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Have an understanding of some widely-used algorithms.
0.8872,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8895,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8929,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8975,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Testing and debugging are seen as integral to the programming enterprise.
0.8987,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9021,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,Have a practical understanding of the processing of scientific data.
0.8345,explain the role of Software Engineering within the broader context of Systems Engineering.,Have an awareness of good program organisation.
0.8724,explain the role of Software Engineering within the broader context of Systems Engineering.,There is an emphasis on designing and writing correct code.
0.8776,explain the role of Software Engineering within the broader context of Systems Engineering.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8779,explain the role of Software Engineering within the broader context of Systems Engineering.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8808,explain the role of Software Engineering within the broader context of Systems Engineering.,Both top-down and object oriented design are taught.
0.8811,explain the role of Software Engineering within the broader context of Systems Engineering.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8815,explain the role of Software Engineering within the broader context of Systems Engineering.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8835,explain the role of Software Engineering within the broader context of Systems Engineering.,Have an understanding of some widely-used algorithms.
0.8866,explain the role of Software Engineering within the broader context of Systems Engineering.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9023,explain the role of Software Engineering within the broader context of Systems Engineering.,Testing and debugging are seen as integral to the programming enterprise.
0.9027,explain the role of Software Engineering within the broader context of Systems Engineering.,Have a practical understanding of the processing of scientific data.
0.9039,explain the role of Software Engineering within the broader context of Systems Engineering.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9214,explain the role of Software Engineering within the broader context of Systems Engineering.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8602,Students will also improve their ability to understand and solve complex and ill-defined problems.,Have an awareness of good program organisation.
0.8621,Students will also improve their ability to understand and solve complex and ill-defined problems.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8684,Students will also improve their ability to understand and solve complex and ill-defined problems.,Both top-down and object oriented design are taught.
0.8729,Students will also improve their ability to understand and solve complex and ill-defined problems.,Testing and debugging are seen as integral to the programming enterprise.
0.8770,Students will also improve their ability to understand and solve complex and ill-defined problems.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8829,Students will also improve their ability to understand and solve complex and ill-defined problems.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8840,Students will also improve their ability to understand and solve complex and ill-defined problems.,There is an emphasis on designing and writing correct code.
0.8873,Students will also improve their ability to understand and solve complex and ill-defined problems.,Have an understanding of some widely-used algorithms.
0.8912,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8957,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8988,Students will also improve their ability to understand and solve complex and ill-defined problems.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9036,Students will also improve their ability to understand and solve complex and ill-defined problems.,Have a practical understanding of the processing of scientific data.
0.9072,Students will also improve their ability to understand and solve complex and ill-defined problems.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8464,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8489,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8496,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Both top-down and object oriented design are taught.
0.8533,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8563,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Have an understanding of some widely-used algorithms.
0.8578,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Have an awareness of good program organisation.
0.8635,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8652,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,There is an emphasis on designing and writing correct code.
0.8731,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Testing and debugging are seen as integral to the programming enterprise.
0.8834,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,Have a practical understanding of the processing of scientific data.
0.8837,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8943,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8955,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8412,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8465,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8547,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Both top-down and object oriented design are taught.
0.8635,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8655,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Have an understanding of some widely-used algorithms.
0.8765,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Testing and debugging are seen as integral to the programming enterprise.
0.8766,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8774,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,There is an emphasis on designing and writing correct code.
0.8809,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8850,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8850,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Have an awareness of good program organisation.
0.8970,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8994,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,Have a practical understanding of the processing of scientific data.
0.8240,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8416,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Have an understanding of some widely-used algorithms.
0.8464,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8475,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8526,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Both top-down and object oriented design are taught.
0.8564,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,There is an emphasis on designing and writing correct code.
0.8607,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8629,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Have an awareness of good program organisation.
0.8695,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Testing and debugging are seen as integral to the programming enterprise.
0.8750,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8768,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,Have a practical understanding of the processing of scientific data.
0.8788,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8811,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,The course will be taught using one or more programming languages which are widely applicable to scientific work.

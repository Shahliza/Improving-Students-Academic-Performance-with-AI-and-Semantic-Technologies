score,s1,s2
0.8825,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8938,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8974,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9020,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Understand, apply, and analyse state and state machines in expressing computations."
0.9057,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9058,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",Apply fundamental programming concepts for medium scale programs.
0.9174,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9249,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9265,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9296,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9303,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9322,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",The course also treats intellectual property considerations in software development and deployment.
0.9351,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9417,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9422,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8576,Many of the skills gained are of use outside formal project management environments.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8607,Many of the skills gained are of use outside formal project management environments.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8750,Many of the skills gained are of use outside formal project management environments.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8915,Many of the skills gained are of use outside formal project management environments.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8918,Many of the skills gained are of use outside formal project management environments.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8960,Many of the skills gained are of use outside formal project management environments.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9055,Many of the skills gained are of use outside formal project management environments.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9055,Many of the skills gained are of use outside formal project management environments.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9063,Many of the skills gained are of use outside formal project management environments.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9101,Many of the skills gained are of use outside formal project management environments.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9141,Many of the skills gained are of use outside formal project management environments.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9145,Many of the skills gained are of use outside formal project management environments.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9250,Many of the skills gained are of use outside formal project management environments.,Apply fundamental programming concepts for medium scale programs.
0.9280,Many of the skills gained are of use outside formal project management environments.,The course also treats intellectual property considerations in software development and deployment.
0.9358,Many of the skills gained are of use outside formal project management environments.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8157,"Leadership,  Management, Professionalism, Ethics and Teamwork","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8293,"Leadership,  Management, Professionalism, Ethics and Teamwork","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8483,"Leadership,  Management, Professionalism, Ethics and Teamwork","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8532,"Leadership,  Management, Professionalism, Ethics and Teamwork","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8612,"Leadership,  Management, Professionalism, Ethics and Teamwork","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8618,"Leadership,  Management, Professionalism, Ethics and Teamwork","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8645,"Leadership,  Management, Professionalism, Ethics and Teamwork","Understand, apply, and analyse state and state machines in expressing computations."
0.8645,"Leadership,  Management, Professionalism, Ethics and Teamwork",Apply fundamental programming concepts for medium scale programs.
0.8646,"Leadership,  Management, Professionalism, Ethics and Teamwork","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8666,"Leadership,  Management, Professionalism, Ethics and Teamwork",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8728,"Leadership,  Management, Professionalism, Ethics and Teamwork",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8740,"Leadership,  Management, Professionalism, Ethics and Teamwork",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8844,"Leadership,  Management, Professionalism, Ethics and Teamwork","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8892,"Leadership,  Management, Professionalism, Ethics and Teamwork",The course also treats intellectual property considerations in software development and deployment.
0.8916,"Leadership,  Management, Professionalism, Ethics and Teamwork","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.7644,Communication,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.7759,Communication,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.7909,Communication,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.7974,Communication,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8007,Communication,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8037,Communication,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8038,Communication,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8077,Communication,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8137,Communication,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8158,Communication,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8226,Communication,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8258,Communication,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8279,Communication,"Understand, apply, and analyse state and state machines in expressing computations."
0.8415,Communication,The course also treats intellectual property considerations in software development and deployment.
0.8576,Communication,Apply fundamental programming concepts for medium scale programs.
0.8165,Project Context,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8228,Project Context,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8408,Project Context,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8434,Project Context,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8442,Project Context,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8526,Project Context,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8551,Project Context,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8604,Project Context,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8630,Project Context,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8654,Project Context,"Understand, apply, and analyse state and state machines in expressing computations."
0.8667,Project Context,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8693,Project Context,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8753,Project Context,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8951,Project Context,The course also treats intellectual property considerations in software development and deployment.
0.9034,Project Context,Apply fundamental programming concepts for medium scale programs.
0.8376,Project Management Body of Knowledge (PMBoK),"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8552,Project Management Body of Knowledge (PMBoK),"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8552,Project Management Body of Knowledge (PMBoK),"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8640,Project Management Body of Knowledge (PMBoK),"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8690,Project Management Body of Knowledge (PMBoK),"Understand, apply, and analyse state and state machines in expressing computations."
0.8783,Project Management Body of Knowledge (PMBoK),"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8826,Project Management Body of Knowledge (PMBoK),"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8847,Project Management Body of Knowledge (PMBoK),Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8848,Project Management Body of Knowledge (PMBoK),"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8864,Project Management Body of Knowledge (PMBoK),"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8882,Project Management Body of Knowledge (PMBoK),Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8883,Project Management Body of Knowledge (PMBoK),Apply fundamental programming concepts for medium scale programs.
0.8926,Project Management Body of Knowledge (PMBoK),"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9027,Project Management Body of Knowledge (PMBoK),Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9063,Project Management Body of Knowledge (PMBoK),The course also treats intellectual property considerations in software development and deployment.
0.8292,Agile Project Planning,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8452,Agile Project Planning,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8481,Agile Project Planning,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8643,Agile Project Planning,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8660,Agile Project Planning,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8680,Agile Project Planning,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8703,Agile Project Planning,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8745,Agile Project Planning,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8767,Agile Project Planning,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8777,Agile Project Planning,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8786,Agile Project Planning,"Understand, apply, and analyse state and state machines in expressing computations."
0.8804,Agile Project Planning,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8837,Agile Project Planning,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9100,Agile Project Planning,The course also treats intellectual property considerations in software development and deployment.
0.9190,Agile Project Planning,Apply fundamental programming concepts for medium scale programs.
0.8280,Agile Project Management,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8364,Agile Project Management,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8393,Agile Project Management,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8556,Agile Project Management,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8598,Agile Project Management,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8600,Agile Project Management,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8601,Agile Project Management,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8681,Agile Project Management,"Understand, apply, and analyse state and state machines in expressing computations."
0.8688,Agile Project Management,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8695,Agile Project Management,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8725,Agile Project Management,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8774,Agile Project Management,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8882,Agile Project Management,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9063,Agile Project Management,Apply fundamental programming concepts for medium scale programs.
0.9114,Agile Project Management,The course also treats intellectual property considerations in software development and deployment.
0.8288,Project Scope Management,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8325,Project Scope Management,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8502,Project Scope Management,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8553,Project Scope Management,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8588,Project Scope Management,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8616,Project Scope Management,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8654,Project Scope Management,"Understand, apply, and analyse state and state machines in expressing computations."
0.8663,Project Scope Management,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8694,Project Scope Management,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8752,Project Scope Management,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8757,Project Scope Management,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8764,Project Scope Management,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8812,Project Scope Management,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9040,Project Scope Management,Apply fundamental programming concepts for medium scale programs.
0.9094,Project Scope Management,The course also treats intellectual property considerations in software development and deployment.
0.8062,Quality & Risk Management,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8148,Quality & Risk Management,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8296,Quality & Risk Management,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8387,Quality & Risk Management,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8422,Quality & Risk Management,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8483,Quality & Risk Management,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8490,Quality & Risk Management,"Understand, apply, and analyse state and state machines in expressing computations."
0.8552,Quality & Risk Management,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8622,Quality & Risk Management,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8689,Quality & Risk Management,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8708,Quality & Risk Management,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8757,Quality & Risk Management,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8773,Quality & Risk Management,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8793,Quality & Risk Management,Apply fundamental programming concepts for medium scale programs.
0.8990,Quality & Risk Management,The course also treats intellectual property considerations in software development and deployment.
0.8239,Project Control and Governance,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8264,Project Control and Governance,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8437,Project Control and Governance,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8516,Project Control and Governance,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8562,Project Control and Governance,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8576,Project Control and Governance,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8680,Project Control and Governance,"Understand, apply, and analyse state and state machines in expressing computations."
0.8703,Project Control and Governance,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8735,Project Control and Governance,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8745,Project Control and Governance,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8767,Project Control and Governance,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8857,Project Control and Governance,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8859,Project Control and Governance,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8910,Project Control and Governance,Apply fundamental programming concepts for medium scale programs.
0.9096,Project Control and Governance,The course also treats intellectual property considerations in software development and deployment.
0.8476,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8627,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8754,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8783,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8807,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Understand, apply, and analyse state and state machines in expressing computations."
0.8858,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",Apply fundamental programming concepts for medium scale programs.
0.8938,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8970,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8982,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9001,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9178,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9207,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",The course also treats intellectual property considerations in software development and deployment.
0.9222,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9223,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9278,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8790,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8860,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8869,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8985,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9042,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9115,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9212,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9217,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9221,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,Apply fundamental programming concepts for medium scale programs.
0.9225,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9247,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9325,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9329,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9360,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,The course also treats intellectual property considerations in software development and deployment.
0.9373,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8633,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8836,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Understand, apply, and analyse state and state machines in expressing computations."
0.8836,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",Apply fundamental programming concepts for medium scale programs.
0.8847,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8870,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8893,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8918,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8935,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8939,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8978,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",The course also treats intellectual property considerations in software development and deployment.
0.9005,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9168,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9181,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9252,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9272,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8628,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8785,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8804,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8914,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8925,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8981,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9054,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9099,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9153,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",The course also treats intellectual property considerations in software development and deployment.
0.9169,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",Apply fundamental programming concepts for medium scale programs.
0.9169,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9188,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Understand, apply, and analyse state and state machines in expressing computations."
0.9206,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9236,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9397,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8365,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8427,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8687,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8738,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8768,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8770,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Understand, apply, and analyse state and state machines in expressing computations."
0.8863,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",Apply fundamental programming concepts for medium scale programs.
0.8867,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8952,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8983,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8986,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8993,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",The course also treats intellectual property considerations in software development and deployment.
0.9043,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9060,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9082,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."

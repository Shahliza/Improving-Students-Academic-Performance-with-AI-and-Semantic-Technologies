score,s1,s2
0.8599,This course is an introduction to relational databases and the general skills for designing and using them.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8756,This course is an introduction to relational databases and the general skills for designing and using them.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8812,This course is an introduction to relational databases and the general skills for designing and using them.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8928,This course is an introduction to relational databases and the general skills for designing and using them.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8955,This course is an introduction to relational databases and the general skills for designing and using them.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8958,This course is an introduction to relational databases and the general skills for designing and using them.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8985,This course is an introduction to relational databases and the general skills for designing and using them.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9007,This course is an introduction to relational databases and the general skills for designing and using them.,Apply fundamental programming concepts for medium scale programs.
0.9036,This course is an introduction to relational databases and the general skills for designing and using them.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9047,This course is an introduction to relational databases and the general skills for designing and using them.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9073,This course is an introduction to relational databases and the general skills for designing and using them.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9190,This course is an introduction to relational databases and the general skills for designing and using them.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9234,This course is an introduction to relational databases and the general skills for designing and using them.,The course also treats intellectual property considerations in software development and deployment.
0.9245,This course is an introduction to relational databases and the general skills for designing and using them.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9296,This course is an introduction to relational databases and the general skills for designing and using them.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8826,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8947,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8959,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",Apply fundamental programming concepts for medium scale programs.
0.9061,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9080,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9090,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",The course also treats intellectual property considerations in software development and deployment.
0.9099,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9146,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Understand, apply, and analyse state and state machines in expressing computations."
0.9218,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9223,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9278,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9294,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9336,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9369,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9412,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8821,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9017,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Understand, apply, and analyse state and state machines in expressing computations."
0.9040,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9044,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9057,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9078,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9133,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9146,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9156,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",Apply fundamental programming concepts for medium scale programs.
0.9202,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9240,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9253,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9257,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",The course also treats intellectual property considerations in software development and deployment.
0.9357,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9361,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8688,Describe the basic concepts of the relational model and understand its mathematical foundation;,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8761,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8776,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8904,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9000,Describe the basic concepts of the relational model and understand its mathematical foundation;,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9017,Describe the basic concepts of the relational model and understand its mathematical foundation;,The course also treats intellectual property considerations in software development and deployment.
0.9026,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9030,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9032,Describe the basic concepts of the relational model and understand its mathematical foundation;,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9056,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9124,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9156,Describe the basic concepts of the relational model and understand its mathematical foundation;,Apply fundamental programming concepts for medium scale programs.
0.9161,Describe the basic concepts of the relational model and understand its mathematical foundation;,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9166,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Understand, apply, and analyse state and state machines in expressing computations."
0.9255,Describe the basic concepts of the relational model and understand its mathematical foundation;,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.7647,"Use the SQL language to define, query and manipulate a relational database.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.7918,"Use the SQL language to define, query and manipulate a relational database.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8007,"Use the SQL language to define, query and manipulate a relational database.",Apply fundamental programming concepts for medium scale programs.
0.8036,"Use the SQL language to define, query and manipulate a relational database.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8067,"Use the SQL language to define, query and manipulate a relational database.",The course also treats intellectual property considerations in software development and deployment.
0.8097,"Use the SQL language to define, query and manipulate a relational database.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8116,"Use the SQL language to define, query and manipulate a relational database.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8121,"Use the SQL language to define, query and manipulate a relational database.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8129,"Use the SQL language to define, query and manipulate a relational database.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8238,"Use the SQL language to define, query and manipulate a relational database.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8274,"Use the SQL language to define, query and manipulate a relational database.","Understand, apply, and analyse state and state machines in expressing computations."
0.8301,"Use the SQL language to define, query and manipulate a relational database.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8314,"Use the SQL language to define, query and manipulate a relational database.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8347,"Use the SQL language to define, query and manipulate a relational database.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8389,"Use the SQL language to define, query and manipulate a relational database.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8785,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8838,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8905,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8910,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8920,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8947,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8951,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8972,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8989,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,The course also treats intellectual property considerations in software development and deployment.
0.9047,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,Apply fundamental programming concepts for medium scale programs.
0.9049,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9056,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9057,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9094,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9167,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9060,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9072,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9088,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9106,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9137,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9191,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9197,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9206,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,The course also treats intellectual property considerations in software development and deployment.
0.9226,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9242,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9263,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,Apply fundamental programming concepts for medium scale programs.
0.9267,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9354,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9355,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9399,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8724,"Understand query processing and optimization, transaction and security management in a relational database management system.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8839,"Understand query processing and optimization, transaction and security management in a relational database management system.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8850,"Understand query processing and optimization, transaction and security management in a relational database management system.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8904,"Understand query processing and optimization, transaction and security management in a relational database management system.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8940,"Understand query processing and optimization, transaction and security management in a relational database management system.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8957,"Understand query processing and optimization, transaction and security management in a relational database management system.",Apply fundamental programming concepts for medium scale programs.
0.8982,"Understand query processing and optimization, transaction and security management in a relational database management system.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9017,"Understand query processing and optimization, transaction and security management in a relational database management system.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9019,"Understand query processing and optimization, transaction and security management in a relational database management system.","Understand, apply, and analyse state and state machines in expressing computations."
0.9053,"Understand query processing and optimization, transaction and security management in a relational database management system.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9063,"Understand query processing and optimization, transaction and security management in a relational database management system.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9072,"Understand query processing and optimization, transaction and security management in a relational database management system.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9073,"Understand query processing and optimization, transaction and security management in a relational database management system.",The course also treats intellectual property considerations in software development and deployment.
0.9101,"Understand query processing and optimization, transaction and security management in a relational database management system.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9159,"Understand query processing and optimization, transaction and security management in a relational database management system.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8804,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",Apply fundamental programming concepts for medium scale programs.
0.8811,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Understand, apply, and analyse state and state machines in expressing computations."
0.8872,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8880,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8908,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8925,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8944,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",The course also treats intellectual property considerations in software development and deployment.
0.8953,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8973,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9001,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9009,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9067,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9090,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9162,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9184,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."

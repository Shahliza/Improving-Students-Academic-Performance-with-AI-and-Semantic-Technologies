This course is based on the foundations set by the previous course on computer organisation. 
It expands particularly into all forms of concurrent programming including aspects of massively parallel programming.
This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements).
Following on from the previous course, the fields of operating systems and networking will also be expanded on. 
On the operating system side aspects of security, scheduling algorithms and memory management are discussed. 
More specific networking aspects follow on from message passing as a core concurrency construct. 
These include the basics of routing and dependable protocols.
Model, design and program concurrent systems.
Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems. 
This includes the appropriate programming language and runtime environment for the task at hand.
Analyse and debug concurrent programs.
Understand the aspects of an operating system concerning scheduling, protection and memory management.
Employ message passing locally and over networks to construct distributed systems.
Distinguish as well as connect conceptual concurrency with physical parallelism at all levels of a distributed system.
Identify core aspects of operating systems and networks irrespective of the specific system at hand.
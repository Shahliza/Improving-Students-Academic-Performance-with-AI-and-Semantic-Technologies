score,s1,s2
0.8368,Information theory studies the fundamental limits of the representation and transmission of information.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8419,Information theory studies the fundamental limits of the representation and transmission of information.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8446,Information theory studies the fundamental limits of the representation and transmission of information.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8525,Information theory studies the fundamental limits of the representation and transmission of information.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8547,Information theory studies the fundamental limits of the representation and transmission of information.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8566,Information theory studies the fundamental limits of the representation and transmission of information.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8574,Information theory studies the fundamental limits of the representation and transmission of information.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8606,Information theory studies the fundamental limits of the representation and transmission of information.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8606,Information theory studies the fundamental limits of the representation and transmission of information.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8609,Information theory studies the fundamental limits of the representation and transmission of information.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8653,Information theory studies the fundamental limits of the representation and transmission of information.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8668,Information theory studies the fundamental limits of the representation and transmission of information.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8758,Information theory studies the fundamental limits of the representation and transmission of information.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8840,Information theory studies the fundamental limits of the representation and transmission of information.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8846,Information theory studies the fundamental limits of the representation and transmission of information.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8864,Information theory studies the fundamental limits of the representation and transmission of information.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8876,Information theory studies the fundamental limits of the representation and transmission of information.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8372,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8450,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8461,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8496,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8497,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8558,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8563,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8626,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8653,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8693,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8723,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8850,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8851,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8854,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8875,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8890,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8989,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8730,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8738,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8897,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8966,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8981,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8985,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8992,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9013,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9034,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9046,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9050,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9064,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9087,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9091,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9111,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9224,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9232,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8417,Understand the principles of data compression.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8449,Understand the principles of data compression.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8467,Understand the principles of data compression.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8517,Understand the principles of data compression.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8588,Understand the principles of data compression.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8607,Understand the principles of data compression.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8655,Understand the principles of data compression.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8685,Understand the principles of data compression.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8724,Understand the principles of data compression.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8735,Understand the principles of data compression.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8757,Understand the principles of data compression.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8771,Understand the principles of data compression.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8844,Understand the principles of data compression.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8882,Understand the principles of data compression.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8917,Understand the principles of data compression.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9012,Understand the principles of data compression.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9091,Understand the principles of data compression.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.7836,Compute entropy and mutual information of random variables.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.7888,Compute entropy and mutual information of random variables.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8106,Compute entropy and mutual information of random variables.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8140,Compute entropy and mutual information of random variables.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8195,Compute entropy and mutual information of random variables.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8200,Compute entropy and mutual information of random variables.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8224,Compute entropy and mutual information of random variables.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8236,Compute entropy and mutual information of random variables.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8256,Compute entropy and mutual information of random variables.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8314,Compute entropy and mutual information of random variables.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8348,Compute entropy and mutual information of random variables.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8354,Compute entropy and mutual information of random variables.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8405,Compute entropy and mutual information of random variables.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8490,Compute entropy and mutual information of random variables.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8541,Compute entropy and mutual information of random variables.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8551,Compute entropy and mutual information of random variables.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8618,Compute entropy and mutual information of random variables.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8508,Implement and analyse basic coding and compression algorithms.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8733,Implement and analyse basic coding and compression algorithms.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8763,Implement and analyse basic coding and compression algorithms.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8830,Implement and analyse basic coding and compression algorithms.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8855,Implement and analyse basic coding and compression algorithms.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8862,Implement and analyse basic coding and compression algorithms.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8879,Implement and analyse basic coding and compression algorithms.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8901,Implement and analyse basic coding and compression algorithms.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8907,Implement and analyse basic coding and compression algorithms.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9005,Implement and analyse basic coding and compression algorithms.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9010,Implement and analyse basic coding and compression algorithms.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9021,Implement and analyse basic coding and compression algorithms.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9062,Implement and analyse basic coding and compression algorithms.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9104,Implement and analyse basic coding and compression algorithms.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9108,Implement and analyse basic coding and compression algorithms.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9144,Implement and analyse basic coding and compression algorithms.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9183,Implement and analyse basic coding and compression algorithms.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8548,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8814,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8879,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8881,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8924,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8956,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8961,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9031,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9033,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9051,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9070,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9078,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9093,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9100,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9141,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9173,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9201,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8657,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8734,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8825,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8853,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8890,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8943,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8964,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8984,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8990,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9019,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9021,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9051,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9089,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9139,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9155,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9180,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9185,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8483,Know the basic concepts regarding communications over noisy channels.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8489,Know the basic concepts regarding communications over noisy channels.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8584,Know the basic concepts regarding communications over noisy channels.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8729,Know the basic concepts regarding communications over noisy channels.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8735,Know the basic concepts regarding communications over noisy channels.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8785,Know the basic concepts regarding communications over noisy channels.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8843,Know the basic concepts regarding communications over noisy channels.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8896,Know the basic concepts regarding communications over noisy channels.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8921,Know the basic concepts regarding communications over noisy channels.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8931,Know the basic concepts regarding communications over noisy channels.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8931,Know the basic concepts regarding communications over noisy channels.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8934,Know the basic concepts regarding communications over noisy channels.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8951,Know the basic concepts regarding communications over noisy channels.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8993,Know the basic concepts regarding communications over noisy channels.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9021,Know the basic concepts regarding communications over noisy channels.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9049,Know the basic concepts regarding communications over noisy channels.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9123,Know the basic concepts regarding communications over noisy channels.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."

score,s1,s2
0.8381,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8805,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8981,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9047,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.9049,This course teaches introductory programming within a problem solving framework applicable to the sciences.,Prove simple programs correct using Hoare Logic.
0.9065,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9151,This course teaches introductory programming within a problem solving framework applicable to the sciences.,Design a Turing Machine which will accomplish simple tasks.
0.8303,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8605,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8800,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",Prove simple programs correct using Hoare Logic.
0.8904,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.9060,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9070,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9075,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",Design a Turing Machine which will accomplish simple tasks.
0.7948,There is an emphasis on designing and writing correct code.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8286,There is an emphasis on designing and writing correct code.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8499,There is an emphasis on designing and writing correct code.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8519,There is an emphasis on designing and writing correct code.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8628,There is an emphasis on designing and writing correct code.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8828,There is an emphasis on designing and writing correct code.,Prove simple programs correct using Hoare Logic.
0.8995,There is an emphasis on designing and writing correct code.,Design a Turing Machine which will accomplish simple tasks.
0.7974,Testing and debugging are seen as integral to the programming enterprise.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8480,Testing and debugging are seen as integral to the programming enterprise.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8670,Testing and debugging are seen as integral to the programming enterprise.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8792,Testing and debugging are seen as integral to the programming enterprise.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8805,Testing and debugging are seen as integral to the programming enterprise.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8844,Testing and debugging are seen as integral to the programming enterprise.,Design a Turing Machine which will accomplish simple tasks.
0.8897,Testing and debugging are seen as integral to the programming enterprise.,Prove simple programs correct using Hoare Logic.
0.8201,Both top-down and object oriented design are taught.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8550,Both top-down and object oriented design are taught.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8703,Both top-down and object oriented design are taught.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8748,Both top-down and object oriented design are taught.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8848,Both top-down and object oriented design are taught.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8852,Both top-down and object oriented design are taught.,Prove simple programs correct using Hoare Logic.
0.8870,Both top-down and object oriented design are taught.,Design a Turing Machine which will accomplish simple tasks.
0.8321,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8504,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8666,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8675,There will be an introduction to widely-used computer science algorithms and to machine architecture.,Prove simple programs correct using Hoare Logic.
0.8811,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8990,There will be an introduction to widely-used computer science algorithms and to machine architecture.,Design a Turing Machine which will accomplish simple tasks.
0.9038,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8480,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8734,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8925,The course will be taught using one or more programming languages which are widely applicable to scientific work.,Prove simple programs correct using Hoare Logic.
0.8963,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9018,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9062,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.9145,The course will be taught using one or more programming languages which are widely applicable to scientific work.,Design a Turing Machine which will accomplish simple tasks.
0.8386,"Design, write and debug small programs to solve practical problems of a scientific nature.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8762,"Design, write and debug small programs to solve practical problems of a scientific nature.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8813,"Design, write and debug small programs to solve practical problems of a scientific nature.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8909,"Design, write and debug small programs to solve practical problems of a scientific nature.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8946,"Design, write and debug small programs to solve practical problems of a scientific nature.",Prove simple programs correct using Hoare Logic.
0.9016,"Design, write and debug small programs to solve practical problems of a scientific nature.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9278,"Design, write and debug small programs to solve practical problems of a scientific nature.",Design a Turing Machine which will accomplish simple tasks.
0.8097,Have a practical understanding of the processing of scientific data.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8501,Have a practical understanding of the processing of scientific data.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8680,Have a practical understanding of the processing of scientific data.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8777,Have a practical understanding of the processing of scientific data.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8797,Have a practical understanding of the processing of scientific data.,Prove simple programs correct using Hoare Logic.
0.8849,Have a practical understanding of the processing of scientific data.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.9077,Have a practical understanding of the processing of scientific data.,Design a Turing Machine which will accomplish simple tasks.
0.8565,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8820,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8884,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8919,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,Prove simple programs correct using Hoare Logic.
0.9025,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,Design a Turing Machine which will accomplish simple tasks.
0.9028,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9194,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.7393,Have an awareness of good program organisation.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.7918,Have an awareness of good program organisation.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8152,Have an awareness of good program organisation.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8171,Have an awareness of good program organisation.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8196,Have an awareness of good program organisation.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8396,Have an awareness of good program organisation.,Design a Turing Machine which will accomplish simple tasks.
0.8722,Have an awareness of good program organisation.,Prove simple programs correct using Hoare Logic.
0.8311,Have an understanding of some widely-used algorithms.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8710,Have an understanding of some widely-used algorithms.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8734,Have an understanding of some widely-used algorithms.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8830,Have an understanding of some widely-used algorithms.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8903,Have an understanding of some widely-used algorithms.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8966,Have an understanding of some widely-used algorithms.,Prove simple programs correct using Hoare Logic.
0.9140,Have an understanding of some widely-used algorithms.,Design a Turing Machine which will accomplish simple tasks.
0.8495,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8885,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8939,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9041,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.9101,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9157,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,Design a Turing Machine which will accomplish simple tasks.
0.9251,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,Prove simple programs correct using Hoare Logic.

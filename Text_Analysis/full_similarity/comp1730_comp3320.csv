score,s1,s2
0.8310,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Have an awareness of good program organisation.
0.8815,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8876,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Testing and debugging are seen as integral to the programming enterprise.
0.8886,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,There is an emphasis on designing and writing correct code.
0.8891,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8917,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Have an understanding of some widely-used algorithms.
0.8921,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8927,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Both top-down and object oriented design are taught.
0.9077,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Have a practical understanding of the processing of scientific data.
0.9142,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9199,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9314,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9405,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8622,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Have an awareness of good program organisation.
0.8910,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Both top-down and object oriented design are taught.
0.9040,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,There is an emphasis on designing and writing correct code.
0.9049,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9052,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Have an understanding of some widely-used algorithms.
0.9100,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Testing and debugging are seen as integral to the programming enterprise.
0.9161,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9177,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9195,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9214,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9219,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9318,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Have a practical understanding of the processing of scientific data.
0.9558,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8269,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Have an awareness of good program organisation.
0.8754,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Have a practical understanding of the processing of scientific data.
0.8766,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Have an understanding of some widely-used algorithms.
0.8916,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8945,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8945,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",There is an emphasis on designing and writing correct code.
0.8965,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Testing and debugging are seen as integral to the programming enterprise.
0.8977,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9014,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Both top-down and object oriented design are taught.
0.9082,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9179,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9241,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9377,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8264,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Have an awareness of good program organisation.
0.8892,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",There is an emphasis on designing and writing correct code.
0.8918,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Have a practical understanding of the processing of scientific data.
0.8995,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Both top-down and object oriented design are taught.
0.9020,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Testing and debugging are seen as integral to the programming enterprise.
0.9104,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Have an understanding of some widely-used algorithms.
0.9120,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9188,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9223,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9259,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9276,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9328,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9349,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8675,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Have an awareness of good program organisation.
0.8920,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Both top-down and object oriented design are taught.
0.9032,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,There is an emphasis on designing and writing correct code.
0.9085,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9105,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Have a practical understanding of the processing of scientific data.
0.9122,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9147,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Testing and debugging are seen as integral to the programming enterprise.
0.9183,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9191,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9219,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9221,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Have an understanding of some widely-used algorithms.
0.9286,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9288,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8263,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Have an awareness of good program organisation.
0.8750,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Have a practical understanding of the processing of scientific data.
0.8758,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",There is an emphasis on designing and writing correct code.
0.8790,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Have an understanding of some widely-used algorithms.
0.8854,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Both top-down and object oriented design are taught.
0.8966,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9002,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Testing and debugging are seen as integral to the programming enterprise.
0.9016,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9047,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9094,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9178,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9183,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9219,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8858,appreciate the building blocks of scientific and engineering software.,Have an awareness of good program organisation.
0.8898,appreciate the building blocks of scientific and engineering software.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8960,appreciate the building blocks of scientific and engineering software.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8962,appreciate the building blocks of scientific and engineering software.,Both top-down and object oriented design are taught.
0.9010,appreciate the building blocks of scientific and engineering software.,There is an emphasis on designing and writing correct code.
0.9094,appreciate the building blocks of scientific and engineering software.,Have an understanding of some widely-used algorithms.
0.9122,appreciate the building blocks of scientific and engineering software.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9125,appreciate the building blocks of scientific and engineering software.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9142,appreciate the building blocks of scientific and engineering software.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9156,appreciate the building blocks of scientific and engineering software.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9174,appreciate the building blocks of scientific and engineering software.,Have a practical understanding of the processing of scientific data.
0.9211,appreciate the building blocks of scientific and engineering software.,Testing and debugging are seen as integral to the programming enterprise.
0.9216,appreciate the building blocks of scientific and engineering software.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8862,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Have an awareness of good program organisation.
0.8929,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Testing and debugging are seen as integral to the programming enterprise.
0.8966,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Both top-down and object oriented design are taught.
0.9012,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9072,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9142,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,There is an emphasis on designing and writing correct code.
0.9214,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9265,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9319,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9339,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Have an understanding of some widely-used algorithms.
0.9390,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Have a practical understanding of the processing of scientific data.
0.9435,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9470,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8822,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Have an awareness of good program organisation.
0.8886,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,There is an emphasis on designing and writing correct code.
0.8894,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Both top-down and object oriented design are taught.
0.8955,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9042,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Have an understanding of some widely-used algorithms.
0.9098,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9111,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Testing and debugging are seen as integral to the programming enterprise.
0.9149,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9171,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Have a practical understanding of the processing of scientific data.
0.9246,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9264,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9318,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9417,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8651,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Both top-down and object oriented design are taught.
0.8744,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Have an awareness of good program organisation.
0.8781,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8831,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,There is an emphasis on designing and writing correct code.
0.8847,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Testing and debugging are seen as integral to the programming enterprise.
0.8873,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9074,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9089,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Have an understanding of some widely-used algorithms.
0.9104,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9130,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9187,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9262,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9487,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Have a practical understanding of the processing of scientific data.
0.8449,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Have an awareness of good program organisation.
0.8652,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Both top-down and object oriented design are taught.
0.8723,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8778,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,There is an emphasis on designing and writing correct code.
0.8831,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Have an understanding of some widely-used algorithms.
0.8871,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8897,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8908,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8939,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Testing and debugging are seen as integral to the programming enterprise.
0.8950,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8998,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9193,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9219,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Have a practical understanding of the processing of scientific data.
0.8699,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Have an awareness of good program organisation.
0.8884,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8908,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Both top-down and object oriented design are taught.
0.8948,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,There is an emphasis on designing and writing correct code.
0.9062,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9091,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Have an understanding of some widely-used algorithms.
0.9100,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9101,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9114,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9119,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Have a practical understanding of the processing of scientific data.
0.9145,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9186,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Testing and debugging are seen as integral to the programming enterprise.
0.9226,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8221,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Have an awareness of good program organisation.
0.8753,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Both top-down and object oriented design are taught.
0.8895,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",There is an emphasis on designing and writing correct code.
0.8900,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8917,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Testing and debugging are seen as integral to the programming enterprise.
0.8963,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8998,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Have a practical understanding of the processing of scientific data.
0.9028,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9038,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Have an understanding of some widely-used algorithms.
0.9045,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9132,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9185,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9228,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.

score,s1,s2
0.8361,The course introduces students to some fundamentals of research methodology.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8489,The course introduces students to some fundamentals of research methodology.,These include distributed software revision control systems.
0.8528,The course introduces students to some fundamentals of research methodology.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8538,The course introduces students to some fundamentals of research methodology.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8546,The course introduces students to some fundamentals of research methodology.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8561,The course introduces students to some fundamentals of research methodology.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8630,The course introduces students to some fundamentals of research methodology.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8771,The course introduces students to some fundamentals of research methodology.,Understand the legal context for protection of software as intellectual property.
0.8899,The course introduces students to some fundamentals of research methodology.,Understand basic types and the benefits of static typing.
0.8965,The course introduces students to some fundamentals of research methodology.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8973,The course introduces students to some fundamentals of research methodology.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9000,The course introduces students to some fundamentals of research methodology.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9123,The course introduces students to some fundamentals of research methodology.,Describe and apply alternative computational paradigms to simple problems.
0.9124,The course introduces students to some fundamentals of research methodology.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9148,The course introduces students to some fundamentals of research methodology.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9173,The course introduces students to some fundamentals of research methodology.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9231,The course introduces students to some fundamentals of research methodology.,This course is the first of three core computer science courses on programming.
0.9310,The course introduces students to some fundamentals of research methodology.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9324,The course introduces students to some fundamentals of research methodology.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9369,The course introduces students to some fundamentals of research methodology.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8372,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",These include distributed software revision control systems.
0.8558,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8588,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",Understand the legal context for protection of software as intellectual property.
0.8684,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",Understand basic types and the benefits of static typing.
0.8736,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8741,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8750,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",This course is the first of three core computer science courses on programming.
0.8873,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8878,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8888,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8893,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8956,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8974,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9013,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9016,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",Describe and apply alternative computational paradigms to simple problems.
0.9028,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9030,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9040,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9090,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9212,"The course comprises a series of lectures which cover the following topics: Philosophy of Science, Quantitative Research Methods, Qualitative Research Methods, Basic Machine Learning Methods, Theoretical Research Methods, How to find a Research Topic, Literature Analysis, Reading and Reviewing Papers, Research Ethics and Commercialising Research.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8362,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",These include distributed software revision control systems.
0.8404,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8532,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",Understand the legal context for protection of software as intellectual property.
0.8595,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",Understand basic types and the benefits of static typing.
0.8644,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8674,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8678,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8738,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8783,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8792,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8829,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8846,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8852,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",This course is the first of three core computer science courses on programming.
0.8921,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8933,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8943,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",Describe and apply alternative computational paradigms to simple problems.
0.9039,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9251,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9300,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9380,"The lectures will be complemented by a series of workshops, labs and assignments that require students to do some small research focused tasks that help them get a hands-on experience of research, both individually and in teams of students.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8710,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",Understand the legal context for protection of software as intellectual property.
0.8714,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",These include distributed software revision control systems.
0.8726,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8732,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",This course is the first of three core computer science courses on programming.
0.8805,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8816,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",Understand basic types and the benefits of static typing.
0.8935,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8989,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8991,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9065,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9075,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9086,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9091,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9126,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9133,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9193,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9272,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9293,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.",Describe and apply alternative computational paradigms to simple problems.
0.9308,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9327,"This includes different tasks such as topic modelling, statistical analysis, applying different machine learning techniques to solve a problem in a team, proving theorems, complexity analysis, designing a research project, reviewing papers and presenting papers.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8458,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",These include distributed software revision control systems.
0.8503,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8555,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",Understand the legal context for protection of software as intellectual property.
0.8656,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8694,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",Understand basic types and the benefits of static typing.
0.8736,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8793,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8800,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8817,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",This course is the first of three core computer science courses on programming.
0.8825,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8838,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8860,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8894,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",Describe and apply alternative computational paradigms to simple problems.
0.8953,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8962,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8964,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9052,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9208,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9229,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9392,"Workshops cover topics such as research integrity, time management and project management, teamwork, reading strategies, report writing, and presenting research. At the end of the course, students will be confident to start working on their own research projects.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8455,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",This course is the first of three core computer science courses on programming.
0.8482,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",These include distributed software revision control systems.
0.8625,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8665,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8701,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8748,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8782,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8814,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8818,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8846,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8848,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",Understand basic types and the benefits of static typing.
0.8851,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",Understand the legal context for protection of software as intellectual property.
0.8928,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8939,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8989,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9014,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9052,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9062,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9103,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",Describe and apply alternative computational paradigms to simple problems.
0.9112,"Demonstrate an ability to communicate in relation to an computing project in oral, written and graphical forms, with an an appreciation of the need to pitch any communication item appropriately for the audience.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8582,This includes demonstrated skills in the writing of abstracts and research papers.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8609,This includes demonstrated skills in the writing of abstracts and research papers.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8693,This includes demonstrated skills in the writing of abstracts and research papers.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8707,This includes demonstrated skills in the writing of abstracts and research papers.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8728,This includes demonstrated skills in the writing of abstracts and research papers.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8877,This includes demonstrated skills in the writing of abstracts and research papers.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8894,This includes demonstrated skills in the writing of abstracts and research papers.,Understand the legal context for protection of software as intellectual property.
0.8900,This includes demonstrated skills in the writing of abstracts and research papers.,These include distributed software revision control systems.
0.8930,This includes demonstrated skills in the writing of abstracts and research papers.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8996,This includes demonstrated skills in the writing of abstracts and research papers.,This course is the first of three core computer science courses on programming.
0.8997,This includes demonstrated skills in the writing of abstracts and research papers.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9064,This includes demonstrated skills in the writing of abstracts and research papers.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9065,This includes demonstrated skills in the writing of abstracts and research papers.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9080,This includes demonstrated skills in the writing of abstracts and research papers.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9115,This includes demonstrated skills in the writing of abstracts and research papers.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9115,This includes demonstrated skills in the writing of abstracts and research papers.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9121,This includes demonstrated skills in the writing of abstracts and research papers.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9138,This includes demonstrated skills in the writing of abstracts and research papers.,Describe and apply alternative computational paradigms to simple problems.
0.9154,This includes demonstrated skills in the writing of abstracts and research papers.,Understand basic types and the benefits of static typing.
0.9179,This includes demonstrated skills in the writing of abstracts and research papers.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8255,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8256,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8260,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,This course is the first of three core computer science courses on programming.
0.8273,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,These include distributed software revision control systems.
0.8287,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8414,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8439,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8481,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,Understand basic types and the benefits of static typing.
0.8515,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8567,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8585,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8606,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8628,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8649,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,Understand the legal context for protection of software as intellectual property.
0.8685,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8720,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8873,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,Describe and apply alternative computational paradigms to simple problems.
0.8896,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8937,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8971,Demonstrate an improved ability to use an active approach to learning and to undertake reflective professional practice.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8403,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,This course is the first of three core computer science courses on programming.
0.8490,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,These include distributed software revision control systems.
0.8570,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8586,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8688,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8689,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8825,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,Understand basic types and the benefits of static typing.
0.8827,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8841,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8849,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8866,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8890,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8893,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,Understand the legal context for protection of software as intellectual property.
0.8901,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8909,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8915,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8928,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8964,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9001,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9163,Demonstrate an awareness of the existence of technological choices; and make appropriate choices based on a consideration of design criteria.,Describe and apply alternative computational paradigms to simple problems.
0.8097,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8139,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8169,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8296,Demonstrate an ability to undertake and manage a research project of significant size and scope.,This course is the first of three core computer science courses on programming.
0.8349,Demonstrate an ability to undertake and manage a research project of significant size and scope.,Understand basic types and the benefits of static typing.
0.8369,Demonstrate an ability to undertake and manage a research project of significant size and scope.,These include distributed software revision control systems.
0.8406,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8413,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8481,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8496,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8510,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8519,Demonstrate an ability to undertake and manage a research project of significant size and scope.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8535,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8560,Demonstrate an ability to undertake and manage a research project of significant size and scope.,Understand the legal context for protection of software as intellectual property.
0.8600,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8654,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8786,Demonstrate an ability to undertake and manage a research project of significant size and scope.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8789,Demonstrate an ability to undertake and manage a research project of significant size and scope.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8812,Demonstrate an ability to undertake and manage a research project of significant size and scope.,Describe and apply alternative computational paradigms to simple problems.
0.8833,Demonstrate an ability to undertake and manage a research project of significant size and scope.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8513,Understanding of the process of identifying and formulating research problems.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8579,Understanding of the process of identifying and formulating research problems.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8591,Understanding of the process of identifying and formulating research problems.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8666,Understanding of the process of identifying and formulating research problems.,These include distributed software revision control systems.
0.8702,Understanding of the process of identifying and formulating research problems.,This course is the first of three core computer science courses on programming.
0.8784,Understanding of the process of identifying and formulating research problems.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8832,Understanding of the process of identifying and formulating research problems.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8874,Understanding of the process of identifying and formulating research problems.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8884,Understanding of the process of identifying and formulating research problems.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8909,Understanding of the process of identifying and formulating research problems.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8926,Understanding of the process of identifying and formulating research problems.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8941,Understanding of the process of identifying and formulating research problems.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8947,Understanding of the process of identifying and formulating research problems.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8963,Understanding of the process of identifying and formulating research problems.,Understand basic types and the benefits of static typing.
0.8988,Understanding of the process of identifying and formulating research problems.,Understand the legal context for protection of software as intellectual property.
0.9007,Understanding of the process of identifying and formulating research problems.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9024,Understanding of the process of identifying and formulating research problems.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9033,Understanding of the process of identifying and formulating research problems.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9159,Understanding of the process of identifying and formulating research problems.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9315,Understanding of the process of identifying and formulating research problems.,Describe and apply alternative computational paradigms to simple problems.
0.8432,Ability to carry out literature searches and some ability to critically evaluate literature.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8496,Ability to carry out literature searches and some ability to critically evaluate literature.,This course is the first of three core computer science courses on programming.
0.8542,Ability to carry out literature searches and some ability to critically evaluate literature.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8562,Ability to carry out literature searches and some ability to critically evaluate literature.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8616,Ability to carry out literature searches and some ability to critically evaluate literature.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8671,Ability to carry out literature searches and some ability to critically evaluate literature.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8672,Ability to carry out literature searches and some ability to critically evaluate literature.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8683,Ability to carry out literature searches and some ability to critically evaluate literature.,These include distributed software revision control systems.
0.8738,Ability to carry out literature searches and some ability to critically evaluate literature.,Understand the legal context for protection of software as intellectual property.
0.8754,Ability to carry out literature searches and some ability to critically evaluate literature.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8764,Ability to carry out literature searches and some ability to critically evaluate literature.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8773,Ability to carry out literature searches and some ability to critically evaluate literature.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8775,Ability to carry out literature searches and some ability to critically evaluate literature.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8799,Ability to carry out literature searches and some ability to critically evaluate literature.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8868,Ability to carry out literature searches and some ability to critically evaluate literature.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8871,Ability to carry out literature searches and some ability to critically evaluate literature.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8925,Ability to carry out literature searches and some ability to critically evaluate literature.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8931,Ability to carry out literature searches and some ability to critically evaluate literature.,Understand basic types and the benefits of static typing.
0.9033,Ability to carry out literature searches and some ability to critically evaluate literature.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9106,Ability to carry out literature searches and some ability to critically evaluate literature.,Describe and apply alternative computational paradigms to simple problems.
0.8134,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",This course is the first of three core computer science courses on programming.
0.8338,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",These include distributed software revision control systems.
0.8436,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",Understand the legal context for protection of software as intellectual property.
0.8499,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8503,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8534,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",Understand basic types and the benefits of static typing.
0.8539,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8569,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8602,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8616,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8620,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8653,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8674,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8689,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8694,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8729,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8838,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8932,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9009,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.",Describe and apply alternative computational paradigms to simple problems.
0.9046,"Design and conduct experiments, devise appropriate measurements, analyze and interpret data and form reliable conclusions.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8331,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8391,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8461,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,This course is the first of three core computer science courses on programming.
0.8502,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8528,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8559,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8568,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,These include distributed software revision control systems.
0.8657,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8664,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8740,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,Understand basic types and the benefits of static typing.
0.8761,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8765,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8790,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8820,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8862,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8897,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8904,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,Understand the legal context for protection of software as intellectual property.
0.8958,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8972,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8997,Demonstrate awareness of the importance of documenting all aspects of the development of an computing project of significant magnitude.,Describe and apply alternative computational paradigms to simple problems.

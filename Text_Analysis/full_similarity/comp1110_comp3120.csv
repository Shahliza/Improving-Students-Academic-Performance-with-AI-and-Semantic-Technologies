score,s1,s2
0.8815,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8878,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8932,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8965,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9024,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9071,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9084,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9100,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9103,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9140,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9146,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9210,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9310,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9343,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9423,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9459,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9585,"This course aims to provide students with sufficient knowledge of the basic principles of software project management that they may support a project manager to carry out the project administrative functions of a program office, understand leadership and management within the context of an agile project development team, and understand the context in which project management is conducted.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8566,Many of the skills gained are of use outside formal project management environments.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8616,Many of the skills gained are of use outside formal project management environments.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8717,Many of the skills gained are of use outside formal project management environments.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8924,Many of the skills gained are of use outside formal project management environments.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8932,Many of the skills gained are of use outside formal project management environments.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9004,Many of the skills gained are of use outside formal project management environments.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9008,Many of the skills gained are of use outside formal project management environments.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9022,Many of the skills gained are of use outside formal project management environments.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9030,Many of the skills gained are of use outside formal project management environments.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9075,Many of the skills gained are of use outside formal project management environments.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9096,Many of the skills gained are of use outside formal project management environments.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9159,Many of the skills gained are of use outside formal project management environments.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9191,Many of the skills gained are of use outside formal project management environments.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9198,Many of the skills gained are of use outside formal project management environments.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9267,Many of the skills gained are of use outside formal project management environments.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9285,Many of the skills gained are of use outside formal project management environments.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9362,Many of the skills gained are of use outside formal project management environments.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8265,"Leadership,  Management, Professionalism, Ethics and Teamwork",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8328,"Leadership,  Management, Professionalism, Ethics and Teamwork","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8361,"Leadership,  Management, Professionalism, Ethics and Teamwork","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8369,"Leadership,  Management, Professionalism, Ethics and Teamwork","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8372,"Leadership,  Management, Professionalism, Ethics and Teamwork","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8394,"Leadership,  Management, Professionalism, Ethics and Teamwork","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8401,"Leadership,  Management, Professionalism, Ethics and Teamwork",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8481,"Leadership,  Management, Professionalism, Ethics and Teamwork","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8600,"Leadership,  Management, Professionalism, Ethics and Teamwork","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8601,"Leadership,  Management, Professionalism, Ethics and Teamwork","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8702,"Leadership,  Management, Professionalism, Ethics and Teamwork",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8741,"Leadership,  Management, Professionalism, Ethics and Teamwork","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8761,"Leadership,  Management, Professionalism, Ethics and Teamwork","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8855,"Leadership,  Management, Professionalism, Ethics and Teamwork","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8885,"Leadership,  Management, Professionalism, Ethics and Teamwork","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8927,"Leadership,  Management, Professionalism, Ethics and Teamwork","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8929,"Leadership,  Management, Professionalism, Ethics and Teamwork","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.7626,Communication,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.7747,Communication,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.7787,Communication,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.7793,Communication,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.7854,Communication,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.7931,Communication,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8055,Communication,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8082,Communication,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8087,Communication,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8164,Communication,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8194,Communication,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8246,Communication,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8269,Communication,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8323,Communication,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8341,Communication,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8433,Communication,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8439,Communication,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8073,Project Context,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8214,Project Context,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8235,Project Context,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8300,Project Context,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8387,Project Context,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8456,Project Context,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8503,Project Context,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8572,Project Context,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8614,Project Context,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8647,Project Context,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8652,Project Context,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8660,Project Context,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8678,Project Context,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8851,Project Context,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8911,Project Context,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8970,Project Context,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8989,Project Context,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8365,Project Management Body of Knowledge (PMBoK),"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8497,Project Management Body of Knowledge (PMBoK),"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8505,Project Management Body of Knowledge (PMBoK),"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8601,Project Management Body of Knowledge (PMBoK),The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8627,Project Management Body of Knowledge (PMBoK),The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8665,Project Management Body of Knowledge (PMBoK),"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8733,Project Management Body of Knowledge (PMBoK),"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8733,Project Management Body of Knowledge (PMBoK),"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8734,Project Management Body of Knowledge (PMBoK),"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8796,Project Management Body of Knowledge (PMBoK),"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8821,Project Management Body of Knowledge (PMBoK),"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8840,Project Management Body of Knowledge (PMBoK),"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8915,Project Management Body of Knowledge (PMBoK),"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8976,Project Management Body of Knowledge (PMBoK),"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8986,Project Management Body of Knowledge (PMBoK),This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9034,Project Management Body of Knowledge (PMBoK),"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9062,Project Management Body of Knowledge (PMBoK),"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8315,Agile Project Planning,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8336,Agile Project Planning,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8456,Agile Project Planning,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8487,Agile Project Planning,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8513,Agile Project Planning,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8558,Agile Project Planning,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8634,Agile Project Planning,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8695,Agile Project Planning,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8767,Agile Project Planning,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8771,Agile Project Planning,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8780,Agile Project Planning,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8780,Agile Project Planning,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8874,Agile Project Planning,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8984,Agile Project Planning,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9023,Agile Project Planning,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9061,Agile Project Planning,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9117,Agile Project Planning,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8276,Agile Project Management,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8288,Agile Project Management,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8403,Agile Project Management,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8409,Agile Project Management,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8469,Agile Project Management,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8513,Agile Project Management,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8517,Agile Project Management,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8527,Agile Project Management,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8608,Agile Project Management,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8729,Agile Project Management,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8780,Agile Project Management,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8809,Agile Project Management,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8837,Agile Project Management,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8907,Agile Project Management,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8988,Agile Project Management,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8992,Agile Project Management,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9019,Agile Project Management,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8264,Project Scope Management,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8365,Project Scope Management,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8384,Project Scope Management,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8392,Project Scope Management,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8410,Project Scope Management,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8428,Project Scope Management,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8521,Project Scope Management,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8606,Project Scope Management,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8611,Project Scope Management,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8616,Project Scope Management,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8658,Project Scope Management,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8752,Project Scope Management,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8759,Project Scope Management,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8985,Project Scope Management,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8987,Project Scope Management,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9021,Project Scope Management,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9062,Project Scope Management,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8136,Quality & Risk Management,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8176,Quality & Risk Management,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8209,Quality & Risk Management,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8278,Quality & Risk Management,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8295,Quality & Risk Management,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8317,Quality & Risk Management,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8415,Quality & Risk Management,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8465,Quality & Risk Management,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8500,Quality & Risk Management,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8544,Quality & Risk Management,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8550,Quality & Risk Management,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8626,Quality & Risk Management,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8639,Quality & Risk Management,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8737,Quality & Risk Management,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8738,Quality & Risk Management,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8837,Quality & Risk Management,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8952,Quality & Risk Management,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8276,Project Control and Governance,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8313,Project Control and Governance,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8341,Project Control and Governance,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8364,Project Control and Governance,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8393,Project Control and Governance,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8455,Project Control and Governance,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8467,Project Control and Governance,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8530,Project Control and Governance,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8622,Project Control and Governance,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8640,Project Control and Governance,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8688,Project Control and Governance,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8698,Project Control and Governance,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8768,Project Control and Governance,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8907,Project Control and Governance,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8910,Project Control and Governance,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8999,Project Control and Governance,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9077,Project Control and Governance,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8578,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8632,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8647,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8744,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8768,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8783,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8887,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8913,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8928,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8942,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8944,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8967,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9111,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9115,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9146,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9235,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9361,"Identify and describe the impact  of business  context on a software development project, including an understanding of the role professional ethics plays in the conduct of a successful project.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8786,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8865,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8900,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8922,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8932,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8947,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9005,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9056,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9059,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9113,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9177,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9230,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9293,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9350,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9385,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9423,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9459,Evaluate the features of traditional and agile approaches to managing software development to decide an appropriate project management approach for a project in a business context.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8601,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8649,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8662,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8704,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8717,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8719,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8745,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8773,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8812,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8828,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8841,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8841,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8961,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9154,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9253,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9294,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9297,"Demonstrate key project management skills such as scope determination; task decomposition; effort estimation, schedule creation and tracking; progress reporting; and management of risk and quality","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8739,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8741,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8807,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8856,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8886,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8906,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8910,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8916,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8952,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8953,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8998,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9129,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9181,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9257,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9258,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9284,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9389,"Employ research, critical thinking and reflection to formulate and communicate an argument concerning project management concepts.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8447,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8513,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8558,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8573,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8668,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8706,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.8860,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8877,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8886,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8935,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8956,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8959,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8991,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9032,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9036,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9151,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9290,"Demonstrate teamwork and collaboration skills, and an understanding of the difference between leadership and management.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."

score,s1,s2
0.8651,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",Have an awareness of good program organisation.
0.9026,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",Have a practical understanding of the processing of scientific data.
0.9028,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9035,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9064,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",Have an understanding of some widely-used algorithms.
0.9102,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",There is an emphasis on designing and writing correct code.
0.9118,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9148,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9167,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",Both top-down and object oriented design are taught.
0.9204,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",Testing and debugging are seen as integral to the programming enterprise.
0.9239,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9419,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9485,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8651,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,Have an awareness of good program organisation.
0.8805,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8862,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,Have an understanding of some widely-used algorithms.
0.8907,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,Have a practical understanding of the processing of scientific data.
0.8944,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,There is an emphasis on designing and writing correct code.
0.8958,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8971,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9088,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9108,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,Both top-down and object oriented design are taught.
0.9119,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9151,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,Testing and debugging are seen as integral to the programming enterprise.
0.9169,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9191,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8684,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Have an awareness of good program organisation.
0.8885,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Have a practical understanding of the processing of scientific data.
0.8899,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",There is an emphasis on designing and writing correct code.
0.8900,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8949,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Have an understanding of some widely-used algorithms.
0.9095,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9136,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Both top-down and object oriented design are taught.
0.9165,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9233,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Testing and debugging are seen as integral to the programming enterprise.
0.9265,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9280,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9287,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9352,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8558,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Have an awareness of good program organisation.
0.8726,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",There is an emphasis on designing and writing correct code.
0.8843,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Have a practical understanding of the processing of scientific data.
0.8845,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8867,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8885,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Testing and debugging are seen as integral to the programming enterprise.
0.8950,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Have an understanding of some widely-used algorithms.
0.8957,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Both top-down and object oriented design are taught.
0.8990,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9044,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9068,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9104,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9225,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8883,The course also treats intellectual property considerations in software development and deployment.,Have an awareness of good program organisation.
0.9021,The course also treats intellectual property considerations in software development and deployment.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9029,The course also treats intellectual property considerations in software development and deployment.,Have an understanding of some widely-used algorithms.
0.9073,The course also treats intellectual property considerations in software development and deployment.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9114,The course also treats intellectual property considerations in software development and deployment.,There is an emphasis on designing and writing correct code.
0.9136,The course also treats intellectual property considerations in software development and deployment.,Both top-down and object oriented design are taught.
0.9137,The course also treats intellectual property considerations in software development and deployment.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9189,The course also treats intellectual property considerations in software development and deployment.,Have a practical understanding of the processing of scientific data.
0.9213,The course also treats intellectual property considerations in software development and deployment.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9220,The course also treats intellectual property considerations in software development and deployment.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9360,The course also treats intellectual property considerations in software development and deployment.,Testing and debugging are seen as integral to the programming enterprise.
0.9365,The course also treats intellectual property considerations in software development and deployment.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9401,The course also treats intellectual property considerations in software development and deployment.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8992,Apply fundamental programming concepts for medium scale programs.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9083,Apply fundamental programming concepts for medium scale programs.,Have an awareness of good program organisation.
0.9126,Apply fundamental programming concepts for medium scale programs.,Both top-down and object oriented design are taught.
0.9163,Apply fundamental programming concepts for medium scale programs.,There is an emphasis on designing and writing correct code.
0.9183,Apply fundamental programming concepts for medium scale programs.,Have a practical understanding of the processing of scientific data.
0.9189,Apply fundamental programming concepts for medium scale programs.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9235,Apply fundamental programming concepts for medium scale programs.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9242,Apply fundamental programming concepts for medium scale programs.,Testing and debugging are seen as integral to the programming enterprise.
0.9243,Apply fundamental programming concepts for medium scale programs.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9247,Apply fundamental programming concepts for medium scale programs.,Have an understanding of some widely-used algorithms.
0.9286,Apply fundamental programming concepts for medium scale programs.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9347,Apply fundamental programming concepts for medium scale programs.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9461,Apply fundamental programming concepts for medium scale programs.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8514,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Have an awareness of good program organisation.
0.8532,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8680,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Have a practical understanding of the processing of scientific data.
0.8727,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Have an understanding of some widely-used algorithms.
0.8739,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8802,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8819,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",There is an emphasis on designing and writing correct code.
0.8842,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8855,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8898,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Both top-down and object oriented design are taught.
0.8968,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9042,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Testing and debugging are seen as integral to the programming enterprise.
0.9108,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8253,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Have an awareness of good program organisation.
0.8527,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Have a practical understanding of the processing of scientific data.
0.8607,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8631,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",There is an emphasis on designing and writing correct code.
0.8644,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Have an understanding of some widely-used algorithms.
0.8782,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8855,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8886,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8895,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8904,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8977,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Both top-down and object oriented design are taught.
0.8987,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Testing and debugging are seen as integral to the programming enterprise.
0.9305,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8653,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8895,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Have an understanding of some widely-used algorithms.
0.8904,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Have a practical understanding of the processing of scientific data.
0.8940,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Both top-down and object oriented design are taught.
0.8981,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Have an awareness of good program organisation.
0.9062,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",There is an emphasis on designing and writing correct code.
0.9079,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9090,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9124,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9215,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9235,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9249,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9315,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Testing and debugging are seen as integral to the programming enterprise.
0.8583,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Have an awareness of good program organisation.
0.8691,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8769,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",There is an emphasis on designing and writing correct code.
0.8811,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Have a practical understanding of the processing of scientific data.
0.8852,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Have an understanding of some widely-used algorithms.
0.8947,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Both top-down and object oriented design are taught.
0.9043,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9052,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9088,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9109,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Testing and debugging are seen as integral to the programming enterprise.
0.9203,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9242,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9301,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8302,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Have an awareness of good program organisation.
0.8455,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",There is an emphasis on designing and writing correct code.
0.8464,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Have a practical understanding of the processing of scientific data.
0.8504,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8662,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Have an understanding of some widely-used algorithms.
0.8737,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8755,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Testing and debugging are seen as integral to the programming enterprise.
0.8766,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Both top-down and object oriented design are taught.
0.8777,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8808,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8871,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8874,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9079,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8775,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Have an awareness of good program organisation.
0.8802,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8838,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Both top-down and object oriented design are taught.
0.8894,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,There is an emphasis on designing and writing correct code.
0.8976,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Have an understanding of some widely-used algorithms.
0.9087,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9093,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9106,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9107,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Have a practical understanding of the processing of scientific data.
0.9154,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Testing and debugging are seen as integral to the programming enterprise.
0.9170,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9226,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9249,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.8778,"Understand, apply, and analyse state and state machines in expressing computations.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8783,"Understand, apply, and analyse state and state machines in expressing computations.",Have an awareness of good program organisation.
0.8807,"Understand, apply, and analyse state and state machines in expressing computations.",There is an emphasis on designing and writing correct code.
0.8883,"Understand, apply, and analyse state and state machines in expressing computations.",Both top-down and object oriented design are taught.
0.8963,"Understand, apply, and analyse state and state machines in expressing computations.",Have an understanding of some widely-used algorithms.
0.9004,"Understand, apply, and analyse state and state machines in expressing computations.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9075,"Understand, apply, and analyse state and state machines in expressing computations.",Testing and debugging are seen as integral to the programming enterprise.
0.9106,"Understand, apply, and analyse state and state machines in expressing computations.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9131,"Understand, apply, and analyse state and state machines in expressing computations.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9142,"Understand, apply, and analyse state and state machines in expressing computations.",Have a practical understanding of the processing of scientific data.
0.9251,"Understand, apply, and analyse state and state machines in expressing computations.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9290,"Understand, apply, and analyse state and state machines in expressing computations.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9346,"Understand, apply, and analyse state and state machines in expressing computations.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8603,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Have an awareness of good program organisation.
0.8892,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,There is an emphasis on designing and writing correct code.
0.8936,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.9000,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9030,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Have an understanding of some widely-used algorithms.
0.9063,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9099,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9100,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Both top-down and object oriented design are taught.
0.9118,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Testing and debugging are seen as integral to the programming enterprise.
0.9122,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Have a practical understanding of the processing of scientific data.
0.9205,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9219,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9224,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8355,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8577,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Both top-down and object oriented design are taught.
0.8654,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8670,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",There is an emphasis on designing and writing correct code.
0.8689,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Have an understanding of some widely-used algorithms.
0.8848,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8867,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8939,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8963,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Have a practical understanding of the processing of scientific data.
0.8996,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9007,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Testing and debugging are seen as integral to the programming enterprise.
0.9049,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Have an awareness of good program organisation.
0.9075,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.

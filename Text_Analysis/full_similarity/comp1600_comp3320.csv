score,s1,s2
0.7848,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8134,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8281,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Prove simple programs correct using Hoare Logic.
0.8568,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8633,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8748,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8757,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Design a Turing Machine which will accomplish simple tasks.
0.8154,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8489,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8698,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Prove simple programs correct using Hoare Logic.
0.8758,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8835,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8996,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Design a Turing Machine which will accomplish simple tasks.
0.9091,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8380,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8525,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8657,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Prove simple programs correct using Hoare Logic.
0.8750,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Design a Turing Machine which will accomplish simple tasks.
0.8912,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8933,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9074,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8604,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8700,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8788,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Prove simple programs correct using Hoare Logic.
0.8848,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8971,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9060,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9198,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Design a Turing Machine which will accomplish simple tasks.
0.8270,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8713,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8797,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8815,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8939,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Prove simple programs correct using Hoare Logic.
0.9024,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9031,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Design a Turing Machine which will accomplish simple tasks.
0.8466,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8749,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Prove simple programs correct using Hoare Logic.
0.8758,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Design a Turing Machine which will accomplish simple tasks.
0.8766,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8929,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.9215,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9258,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.7974,appreciate the building blocks of scientific and engineering software.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8470,appreciate the building blocks of scientific and engineering software.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8657,appreciate the building blocks of scientific and engineering software.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8685,appreciate the building blocks of scientific and engineering software.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8744,appreciate the building blocks of scientific and engineering software.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8924,appreciate the building blocks of scientific and engineering software.,Prove simple programs correct using Hoare Logic.
0.8959,appreciate the building blocks of scientific and engineering software.,Design a Turing Machine which will accomplish simple tasks.
0.8503,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8832,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8840,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8842,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8960,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.9064,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Prove simple programs correct using Hoare Logic.
0.9269,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Design a Turing Machine which will accomplish simple tasks.
0.8402,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8780,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8969,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8991,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9004,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Prove simple programs correct using Hoare Logic.
0.9014,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9019,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Design a Turing Machine which will accomplish simple tasks.
0.8302,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8688,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8775,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8870,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Prove simple programs correct using Hoare Logic.
0.8953,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9020,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Design a Turing Machine which will accomplish simple tasks.
0.9022,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.7834,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8089,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8183,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Prove simple programs correct using Hoare Logic.
0.8523,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8530,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8598,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Design a Turing Machine which will accomplish simple tasks.
0.8767,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8121,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8529,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8693,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Prove simple programs correct using Hoare Logic.
0.8776,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8788,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8871,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Design a Turing Machine which will accomplish simple tasks.
0.8969,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8493,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Given a description of a regular language, either in English, as a regular expression or as a grammar, generate a finite state automaton that recognizes that language. Similarly, given a deterministic or nondeterministic automaton, give a description of the language which it accepts."
0.8683,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Given an inductive definition of a simple data structure, write a recursive definition of a given simple operation on data of that type. Given some such recursively defined operations, prove simple properties of these functions using the appropriate structural induction principle."
0.8686,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Prove simple programs correct using Hoare Logic.
0.8722,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8758,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8981,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9116,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Design a Turing Machine which will accomplish simple tasks.

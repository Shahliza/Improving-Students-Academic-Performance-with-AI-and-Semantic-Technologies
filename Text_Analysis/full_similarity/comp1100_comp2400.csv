score,s1,s2
0.8653,This course is an introduction to relational databases and the general skills for designing and using them.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8765,This course is an introduction to relational databases and the general skills for designing and using them.,These include distributed software revision control systems.
0.8779,This course is an introduction to relational databases and the general skills for designing and using them.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8825,This course is an introduction to relational databases and the general skills for designing and using them.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8848,This course is an introduction to relational databases and the general skills for designing and using them.,Understand the legal context for protection of software as intellectual property.
0.8945,This course is an introduction to relational databases and the general skills for designing and using them.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8946,This course is an introduction to relational databases and the general skills for designing and using them.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9010,This course is an introduction to relational databases and the general skills for designing and using them.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9031,This course is an introduction to relational databases and the general skills for designing and using them.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9047,This course is an introduction to relational databases and the general skills for designing and using them.,This course is the first of three core computer science courses on programming.
0.9075,This course is an introduction to relational databases and the general skills for designing and using them.,Understand basic types and the benefits of static typing.
0.9075,This course is an introduction to relational databases and the general skills for designing and using them.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9083,This course is an introduction to relational databases and the general skills for designing and using them.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9090,This course is an introduction to relational databases and the general skills for designing and using them.,Describe and apply alternative computational paradigms to simple problems.
0.9147,This course is an introduction to relational databases and the general skills for designing and using them.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9167,This course is an introduction to relational databases and the general skills for designing and using them.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9188,This course is an introduction to relational databases and the general skills for designing and using them.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9280,This course is an introduction to relational databases and the general skills for designing and using them.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9336,This course is an introduction to relational databases and the general skills for designing and using them.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9349,This course is an introduction to relational databases and the general skills for designing and using them.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8420,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",This course is the first of three core computer science courses on programming.
0.8440,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8735,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8752,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",Understand the legal context for protection of software as intellectual property.
0.8816,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8826,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",These include distributed software revision control systems.
0.8915,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8953,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",Understand basic types and the benefits of static typing.
0.8966,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8971,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8973,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9033,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.",Describe and apply alternative computational paradigms to simple problems.
0.9057,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.9088,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9166,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9198,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9233,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9260,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9370,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9386,"The topics include the relational data model, SQL, entity-relationship model, functional dependencies, (de-)normalisation, relational algebra, query processing and optimisation, database transactions and security.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8774,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8775,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8870,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",These include distributed software revision control systems.
0.8887,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8924,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8941,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8954,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9000,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",Understand the legal context for protection of software as intellectual property.
0.9021,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",Understand basic types and the benefits of static typing.
0.9039,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",This course is the first of three core computer science courses on programming.
0.9059,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9108,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9161,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9186,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9207,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",Describe and apply alternative computational paradigms to simple problems.
0.9270,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9292,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9292,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9299,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9368,"To deepen the understanding of relational databases, the current industry development of database systems such as NoSQL databases will be introduced at the end of this course.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8546,Describe the basic concepts of the relational model and understand its mathematical foundation;,These include distributed software revision control systems.
0.8709,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8718,Describe the basic concepts of the relational model and understand its mathematical foundation;,This course is the first of three core computer science courses on programming.
0.8764,Describe the basic concepts of the relational model and understand its mathematical foundation;,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8765,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8782,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8816,Describe the basic concepts of the relational model and understand its mathematical foundation;,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8850,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8885,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8920,Describe the basic concepts of the relational model and understand its mathematical foundation;,Understand the legal context for protection of software as intellectual property.
0.8988,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9003,Describe the basic concepts of the relational model and understand its mathematical foundation;,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9074,Describe the basic concepts of the relational model and understand its mathematical foundation;,Understand basic types and the benefits of static typing.
0.9090,Describe the basic concepts of the relational model and understand its mathematical foundation;,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9141,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9149,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9161,Describe the basic concepts of the relational model and understand its mathematical foundation;,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9167,Describe the basic concepts of the relational model and understand its mathematical foundation;,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9249,Describe the basic concepts of the relational model and understand its mathematical foundation;,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9313,Describe the basic concepts of the relational model and understand its mathematical foundation;,Describe and apply alternative computational paradigms to simple problems.
0.7529,"Use the SQL language to define, query and manipulate a relational database.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.7765,"Use the SQL language to define, query and manipulate a relational database.",This course is the first of three core computer science courses on programming.
0.7774,"Use the SQL language to define, query and manipulate a relational database.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.7945,"Use the SQL language to define, query and manipulate a relational database.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.7966,"Use the SQL language to define, query and manipulate a relational database.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.7985,"Use the SQL language to define, query and manipulate a relational database.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8010,"Use the SQL language to define, query and manipulate a relational database.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8046,"Use the SQL language to define, query and manipulate a relational database.",Understand the legal context for protection of software as intellectual property.
0.8071,"Use the SQL language to define, query and manipulate a relational database.",Understand basic types and the benefits of static typing.
0.8118,"Use the SQL language to define, query and manipulate a relational database.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8125,"Use the SQL language to define, query and manipulate a relational database.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8129,"Use the SQL language to define, query and manipulate a relational database.",Describe and apply alternative computational paradigms to simple problems.
0.8173,"Use the SQL language to define, query and manipulate a relational database.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8269,"Use the SQL language to define, query and manipulate a relational database.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8279,"Use the SQL language to define, query and manipulate a relational database.",These include distributed software revision control systems.
0.8300,"Use the SQL language to define, query and manipulate a relational database.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8300,"Use the SQL language to define, query and manipulate a relational database.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8449,"Use the SQL language to define, query and manipulate a relational database.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8528,"Use the SQL language to define, query and manipulate a relational database.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8537,"Use the SQL language to define, query and manipulate a relational database.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8340,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8535,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,This course is the first of three core computer science courses on programming.
0.8642,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8746,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8784,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8804,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8809,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8847,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,Understand the legal context for protection of software as intellectual property.
0.8876,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,Understand basic types and the benefits of static typing.
0.8881,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8903,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,These include distributed software revision control systems.
0.8942,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8981,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9008,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9024,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9071,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9079,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,Describe and apply alternative computational paradigms to simple problems.
0.9080,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9120,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9123,Apply conceptual database modelling methods such as entity-relationship model to design a relational database.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8548,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8590,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,This course is the first of three core computer science courses on programming.
0.8895,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8904,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8907,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,Understand the legal context for protection of software as intellectual property.
0.9050,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9050,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.9054,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,These include distributed software revision control systems.
0.9109,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9127,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9145,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9164,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,Understand basic types and the benefits of static typing.
0.9198,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9204,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9237,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9265,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,Describe and apply alternative computational paradigms to simple problems.
0.9267,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9308,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9333,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9354,Apply database design methods on functional dependencies and normal forms to evaluate the quality of a relational database design.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8255,"Understand query processing and optimization, transaction and security management in a relational database management system.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8408,"Understand query processing and optimization, transaction and security management in a relational database management system.",This course is the first of three core computer science courses on programming.
0.8642,"Understand query processing and optimization, transaction and security management in a relational database management system.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8749,"Understand query processing and optimization, transaction and security management in a relational database management system.",Understand the legal context for protection of software as intellectual property.
0.8757,"Understand query processing and optimization, transaction and security management in a relational database management system.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8777,"Understand query processing and optimization, transaction and security management in a relational database management system.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8828,"Understand query processing and optimization, transaction and security management in a relational database management system.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8851,"Understand query processing and optimization, transaction and security management in a relational database management system.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8871,"Understand query processing and optimization, transaction and security management in a relational database management system.",Understand basic types and the benefits of static typing.
0.8907,"Understand query processing and optimization, transaction and security management in a relational database management system.",Describe and apply alternative computational paradigms to simple problems.
0.8909,"Understand query processing and optimization, transaction and security management in a relational database management system.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8914,"Understand query processing and optimization, transaction and security management in a relational database management system.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8921,"Understand query processing and optimization, transaction and security management in a relational database management system.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8921,"Understand query processing and optimization, transaction and security management in a relational database management system.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8997,"Understand query processing and optimization, transaction and security management in a relational database management system.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8999,"Understand query processing and optimization, transaction and security management in a relational database management system.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9005,"Understand query processing and optimization, transaction and security management in a relational database management system.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9042,"Understand query processing and optimization, transaction and security management in a relational database management system.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9043,"Understand query processing and optimization, transaction and security management in a relational database management system.",These include distributed software revision control systems.
0.9071,"Understand query processing and optimization, transaction and security management in a relational database management system.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8478,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8529,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8542,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",This course is the first of three core computer science courses on programming.
0.8724,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8738,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8756,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8761,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",Understand the legal context for protection of software as intellectual property.
0.8789,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8800,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8818,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8836,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",Understand basic types and the benefits of static typing.
0.8837,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8859,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8872,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8879,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",These include distributed software revision control systems.
0.8894,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8920,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8946,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).",Describe and apply alternative computational paradigms to simple problems.
0.8967,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9018,"Understand the state of the art of database management systems, and big data management challenges (Amazon's Dynamo, Google's BigTable, MongoDB and MapReduce).","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."

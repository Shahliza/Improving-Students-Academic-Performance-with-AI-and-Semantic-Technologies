score,s1,s2
0.8429,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8450,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8500,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8525,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8543,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8545,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8610,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8619,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8648,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8655,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8699,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8711,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8768,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8790,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8822,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8834,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8923,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8530,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8639,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8724,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8742,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8789,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8860,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8882,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8927,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8970,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9001,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9062,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9090,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9104,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9132,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9138,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9149,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9166,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8563,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8579,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8585,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8618,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8683,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8809,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8846,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8860,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8987,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9009,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9038,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9073,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9074,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9084,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9101,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9125,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9192,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8311,Systems concepts.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8371,Systems concepts.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8385,Systems concepts.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8423,Systems concepts.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8453,Systems concepts.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8544,Systems concepts.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8631,Systems concepts.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8717,Systems concepts.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8755,Systems concepts.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8786,Systems concepts.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8791,Systems concepts.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8842,Systems concepts.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8913,Systems concepts.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8918,Systems concepts.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8940,Systems concepts.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8947,Systems concepts.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8948,Systems concepts.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8412,The Systems Engineering life-cycle and processes.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8488,The Systems Engineering life-cycle and processes.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8514,The Systems Engineering life-cycle and processes.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8520,The Systems Engineering life-cycle and processes.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8533,The Systems Engineering life-cycle and processes.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8645,The Systems Engineering life-cycle and processes.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8669,The Systems Engineering life-cycle and processes.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8690,The Systems Engineering life-cycle and processes.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8723,The Systems Engineering life-cycle and processes.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8820,The Systems Engineering life-cycle and processes.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8824,The Systems Engineering life-cycle and processes.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8927,The Systems Engineering life-cycle and processes.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8976,The Systems Engineering life-cycle and processes.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8994,The Systems Engineering life-cycle and processes.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9037,The Systems Engineering life-cycle and processes.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9059,The Systems Engineering life-cycle and processes.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9117,The Systems Engineering life-cycle and processes.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8694,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8874,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8994,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9007,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9015,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9026,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9035,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9064,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9090,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9091,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9119,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9135,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9167,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9358,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9373,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9426,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9436,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8337,"Preliminary system design: subsystem design requirements, design review.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8396,"Preliminary system design: subsystem design requirements, design review.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8537,"Preliminary system design: subsystem design requirements, design review.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8543,"Preliminary system design: subsystem design requirements, design review.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8558,"Preliminary system design: subsystem design requirements, design review.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8613,"Preliminary system design: subsystem design requirements, design review.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8637,"Preliminary system design: subsystem design requirements, design review.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8641,"Preliminary system design: subsystem design requirements, design review.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8695,"Preliminary system design: subsystem design requirements, design review.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8726,"Preliminary system design: subsystem design requirements, design review.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8795,"Preliminary system design: subsystem design requirements, design review.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8860,"Preliminary system design: subsystem design requirements, design review.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8867,"Preliminary system design: subsystem design requirements, design review.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8876,"Preliminary system design: subsystem design requirements, design review.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8957,"Preliminary system design: subsystem design requirements, design review.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8986,"Preliminary system design: subsystem design requirements, design review.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8995,"Preliminary system design: subsystem design requirements, design review.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8711,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8749,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8755,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8797,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8826,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8835,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8852,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8856,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8861,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8875,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8904,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8956,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9089,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9256,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9299,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9355,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9395,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8286,"Design testing, evaluation and validation.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8300,"Design testing, evaluation and validation.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8334,"Design testing, evaluation and validation.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8340,"Design testing, evaluation and validation.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8353,"Design testing, evaluation and validation.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8354,"Design testing, evaluation and validation.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8381,"Design testing, evaluation and validation.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8408,"Design testing, evaluation and validation.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8505,"Design testing, evaluation and validation.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8638,"Design testing, evaluation and validation.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8660,"Design testing, evaluation and validation.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8667,"Design testing, evaluation and validation.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8681,"Design testing, evaluation and validation.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8716,"Design testing, evaluation and validation.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8724,"Design testing, evaluation and validation.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8778,"Design testing, evaluation and validation.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8970,"Design testing, evaluation and validation.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8507,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8542,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8599,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8634,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8765,Design for sustainability: approaches that integrate sustainability principles into the design process.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8775,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8811,Design for sustainability: approaches that integrate sustainability principles into the design process.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8837,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8910,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9001,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9033,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9063,Design for sustainability: approaches that integrate sustainability principles into the design process.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9065,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9069,Design for sustainability: approaches that integrate sustainability principles into the design process.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9083,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9166,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9188,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8249,Integration of Systems Engineering and Software Engineering activities.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8341,Integration of Systems Engineering and Software Engineering activities.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8349,Integration of Systems Engineering and Software Engineering activities.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8394,Integration of Systems Engineering and Software Engineering activities.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8431,Integration of Systems Engineering and Software Engineering activities.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8545,Integration of Systems Engineering and Software Engineering activities.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8588,Integration of Systems Engineering and Software Engineering activities.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8646,Integration of Systems Engineering and Software Engineering activities.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8651,Integration of Systems Engineering and Software Engineering activities.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8687,Integration of Systems Engineering and Software Engineering activities.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8811,Integration of Systems Engineering and Software Engineering activities.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8837,Integration of Systems Engineering and Software Engineering activities.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8873,Integration of Systems Engineering and Software Engineering activities.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8884,Integration of Systems Engineering and Software Engineering activities.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8957,Integration of Systems Engineering and Software Engineering activities.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9028,Integration of Systems Engineering and Software Engineering activities.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9081,Integration of Systems Engineering and Software Engineering activities.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8525,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8609,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8677,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8809,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8832,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8843,describe the holistic and multi-disciplinary nature of complex engineering projects.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8859,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8859,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8863,describe the holistic and multi-disciplinary nature of complex engineering projects.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8942,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9006,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9039,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9094,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9176,describe the holistic and multi-disciplinary nature of complex engineering projects.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9177,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9181,describe the holistic and multi-disciplinary nature of complex engineering projects.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9182,describe the holistic and multi-disciplinary nature of complex engineering projects.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8234,describe the Systems Engineering life-cycle.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8271,describe the Systems Engineering life-cycle.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8331,describe the Systems Engineering life-cycle.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8355,describe the Systems Engineering life-cycle.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8431,describe the Systems Engineering life-cycle.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8484,describe the Systems Engineering life-cycle.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8499,describe the Systems Engineering life-cycle.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8539,describe the Systems Engineering life-cycle.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8548,describe the Systems Engineering life-cycle.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8613,describe the Systems Engineering life-cycle.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8809,describe the Systems Engineering life-cycle.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8856,describe the Systems Engineering life-cycle.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8858,describe the Systems Engineering life-cycle.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8871,describe the Systems Engineering life-cycle.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8875,describe the Systems Engineering life-cycle.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8930,describe the Systems Engineering life-cycle.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8939,describe the Systems Engineering life-cycle.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8328,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8395,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8417,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8441,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8550,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8602,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8607,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8649,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8672,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8791,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8793,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8805,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8864,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8895,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8946,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8971,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8984,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8351,explain the role of Software Engineering within the broader context of Systems Engineering.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8369,explain the role of Software Engineering within the broader context of Systems Engineering.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8412,explain the role of Software Engineering within the broader context of Systems Engineering.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8525,explain the role of Software Engineering within the broader context of Systems Engineering.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8635,explain the role of Software Engineering within the broader context of Systems Engineering.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8684,explain the role of Software Engineering within the broader context of Systems Engineering.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8717,explain the role of Software Engineering within the broader context of Systems Engineering.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8734,explain the role of Software Engineering within the broader context of Systems Engineering.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8752,explain the role of Software Engineering within the broader context of Systems Engineering.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8801,explain the role of Software Engineering within the broader context of Systems Engineering.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8894,explain the role of Software Engineering within the broader context of Systems Engineering.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8904,explain the role of Software Engineering within the broader context of Systems Engineering.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8974,explain the role of Software Engineering within the broader context of Systems Engineering.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9034,explain the role of Software Engineering within the broader context of Systems Engineering.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9047,explain the role of Software Engineering within the broader context of Systems Engineering.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9142,explain the role of Software Engineering within the broader context of Systems Engineering.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9175,explain the role of Software Engineering within the broader context of Systems Engineering.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8479,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8579,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8624,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8696,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8701,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8706,Students will also improve their ability to understand and solve complex and ill-defined problems.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8707,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8709,Students will also improve their ability to understand and solve complex and ill-defined problems.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8803,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8808,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8860,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8919,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8937,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8982,Students will also improve their ability to understand and solve complex and ill-defined problems.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9124,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9138,Students will also improve their ability to understand and solve complex and ill-defined problems.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9258,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8179,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8215,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8276,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8462,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8486,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8504,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8597,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8601,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8637,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8638,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8655,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8819,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8887,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9048,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9048,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9153,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9259,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8269,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8309,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8367,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8528,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8547,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8632,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8653,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8654,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8676,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8698,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8755,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8873,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8904,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9011,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9025,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9205,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9292,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8276,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8326,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8345,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8449,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8475,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8563,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8565,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8576,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8593,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8649,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8668,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8735,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8837,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8932,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9018,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9022,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9245,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."

score,s1,s2
0.8306,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",This course is the first of three core computer science courses on programming.
0.8348,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8487,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8496,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8562,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Understand basic types and the benefits of static typing.
0.8574,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8594,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8640,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8666,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8672,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8736,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8752,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8771,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8780,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8789,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8808,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",These include distributed software revision control systems.
0.8824,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Understand the legal context for protection of software as intellectual property.
0.8842,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Describe and apply alternative computational paradigms to simple problems.
0.8843,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9076,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8131,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",This course is the first of three core computer science courses on programming.
0.8164,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8429,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Understand the legal context for protection of software as intellectual property.
0.8463,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8540,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8587,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",These include distributed software revision control systems.
0.8595,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Understand basic types and the benefits of static typing.
0.8738,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Describe and apply alternative computational paradigms to simple problems.
0.8747,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8762,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8785,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8789,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8829,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8891,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9056,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9144,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9159,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9240,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9244,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9329,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8650,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",This course is the first of three core computer science courses on programming.
0.8749,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Understand the legal context for protection of software as intellectual property.
0.8805,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",These include distributed software revision control systems.
0.8850,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8879,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Understand basic types and the benefits of static typing.
0.8937,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9038,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9059,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9076,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9081,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9088,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9130,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9159,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9159,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Describe and apply alternative computational paradigms to simple problems.
0.9168,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9169,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9173,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9215,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9250,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9441,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8419,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,This course is the first of three core computer science courses on programming.
0.8432,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8636,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8700,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8717,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8730,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8738,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8758,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8766,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8811,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8814,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,These include distributed software revision control systems.
0.8852,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8854,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8920,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Understand the legal context for protection of software as intellectual property.
0.8928,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Understand basic types and the benefits of static typing.
0.8955,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8962,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9028,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9051,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Describe and apply alternative computational paradigms to simple problems.
0.9096,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8463,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,This course is the first of three core computer science courses on programming.
0.8581,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8762,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8776,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8782,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8782,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,These include distributed software revision control systems.
0.8801,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8848,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8903,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Understand basic types and the benefits of static typing.
0.8923,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Understand the legal context for protection of software as intellectual property.
0.8929,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8948,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8949,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8973,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8986,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9000,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9003,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9012,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9088,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9140,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Describe and apply alternative computational paradigms to simple problems.
0.8671,Demonstrate proficiency in software reverse engineering.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8723,Demonstrate proficiency in software reverse engineering.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8725,Demonstrate proficiency in software reverse engineering.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8728,Demonstrate proficiency in software reverse engineering.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8753,Demonstrate proficiency in software reverse engineering.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8762,Demonstrate proficiency in software reverse engineering.,This course is the first of three core computer science courses on programming.
0.8780,Demonstrate proficiency in software reverse engineering.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8789,Demonstrate proficiency in software reverse engineering.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8938,Demonstrate proficiency in software reverse engineering.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8940,Demonstrate proficiency in software reverse engineering.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8961,Demonstrate proficiency in software reverse engineering.,Understand the legal context for protection of software as intellectual property.
0.8964,Demonstrate proficiency in software reverse engineering.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8995,Demonstrate proficiency in software reverse engineering.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9073,Demonstrate proficiency in software reverse engineering.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9076,Demonstrate proficiency in software reverse engineering.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9080,Demonstrate proficiency in software reverse engineering.,Understand basic types and the benefits of static typing.
0.9100,Demonstrate proficiency in software reverse engineering.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9125,Demonstrate proficiency in software reverse engineering.,These include distributed software revision control systems.
0.9149,Demonstrate proficiency in software reverse engineering.,Describe and apply alternative computational paradigms to simple problems.
0.9218,Demonstrate proficiency in software reverse engineering.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8678,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",This course is the first of three core computer science courses on programming.
0.8774,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8852,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8875,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8878,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8923,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8932,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8957,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8965,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Understand the legal context for protection of software as intellectual property.
0.8974,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9043,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9047,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9055,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9060,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9064,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9065,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Understand basic types and the benefits of static typing.
0.9092,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",These include distributed software revision control systems.
0.9105,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Describe and apply alternative computational paradigms to simple problems.
0.9125,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9379,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8394,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",This course is the first of three core computer science courses on programming.
0.8655,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8674,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8757,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",These include distributed software revision control systems.
0.8785,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Understand basic types and the benefits of static typing.
0.8798,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8853,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8898,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8907,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Understand the legal context for protection of software as intellectual property.
0.8921,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8963,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8973,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8997,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9025,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9026,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9064,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9075,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9090,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9206,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9233,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Describe and apply alternative computational paradigms to simple problems.

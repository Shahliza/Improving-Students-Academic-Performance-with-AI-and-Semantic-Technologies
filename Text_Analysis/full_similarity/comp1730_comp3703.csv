score,s1,s2
0.8146,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Have an awareness of good program organisation.
0.8521,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8608,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Have an understanding of some widely-used algorithms.
0.8620,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Both top-down and object oriented design are taught.
0.8623,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8633,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",There is an emphasis on designing and writing correct code.
0.8760,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Have a practical understanding of the processing of scientific data.
0.8787,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8792,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8858,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8862,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8869,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8981,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Testing and debugging are seen as integral to the programming enterprise.
0.8079,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Have an awareness of good program organisation.
0.8235,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Have a practical understanding of the processing of scientific data.
0.8362,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8413,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Have an understanding of some widely-used algorithms.
0.8470,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",There is an emphasis on designing and writing correct code.
0.8559,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8606,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8625,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8694,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Both top-down and object oriented design are taught.
0.8706,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.8887,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Testing and debugging are seen as integral to the programming enterprise.
0.8933,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8961,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8538,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Have an awareness of good program organisation.
0.8843,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Have a practical understanding of the processing of scientific data.
0.8906,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Have an understanding of some widely-used algorithms.
0.8925,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8992,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",There is an emphasis on designing and writing correct code.
0.9001,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Both top-down and object oriented design are taught.
0.9136,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9170,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9182,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9204,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9213,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9245,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9245,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Testing and debugging are seen as integral to the programming enterprise.
0.8609,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Have an awareness of good program organisation.
0.8724,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Both top-down and object oriented design are taught.
0.8775,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8786,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8882,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8915,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8925,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,There is an emphasis on designing and writing correct code.
0.8928,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8971,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Have a practical understanding of the processing of scientific data.
0.9047,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9051,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Testing and debugging are seen as integral to the programming enterprise.
0.9139,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9145,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Have an understanding of some widely-used algorithms.
0.8617,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8697,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Both top-down and object oriented design are taught.
0.8821,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,There is an emphasis on designing and writing correct code.
0.8827,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.8853,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Have an awareness of good program organisation.
0.8964,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Have a practical understanding of the processing of scientific data.
0.8964,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.8976,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.8982,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Have an understanding of some widely-used algorithms.
0.9000,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9047,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Testing and debugging are seen as integral to the programming enterprise.
0.9052,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9207,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8752,Demonstrate proficiency in software reverse engineering.,There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8933,Demonstrate proficiency in software reverse engineering.,Have an awareness of good program organisation.
0.9028,Demonstrate proficiency in software reverse engineering.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9058,Demonstrate proficiency in software reverse engineering.,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9066,Demonstrate proficiency in software reverse engineering.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9071,Demonstrate proficiency in software reverse engineering.,Both top-down and object oriented design are taught.
0.9079,Demonstrate proficiency in software reverse engineering.,Have an understanding of some widely-used algorithms.
0.9119,Demonstrate proficiency in software reverse engineering.,"Design, write and debug small programs to solve practical problems of a scientific nature."
0.9152,Demonstrate proficiency in software reverse engineering.,Have a practical understanding of the processing of scientific data.
0.9161,Demonstrate proficiency in software reverse engineering.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9183,Demonstrate proficiency in software reverse engineering.,There is an emphasis on designing and writing correct code.
0.9212,Demonstrate proficiency in software reverse engineering.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9234,Demonstrate proficiency in software reverse engineering.,Testing and debugging are seen as integral to the programming enterprise.
0.8763,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8789,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Have an awareness of good program organisation.
0.8956,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Have an understanding of some widely-used algorithms.
0.9022,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Have a practical understanding of the processing of scientific data.
0.9036,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9043,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",There is an emphasis on designing and writing correct code.
0.9046,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9093,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9123,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Both top-down and object oriented design are taught.
0.9126,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9150,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9208,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9256,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Testing and debugging are seen as integral to the programming enterprise.
0.8564,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Have an awareness of good program organisation.
0.8731,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",There will be an introduction to widely-used computer science algorithms and to machine architecture.
0.8760,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Both top-down and object oriented design are taught.
0.8773,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",There is an emphasis on designing and writing correct code.
0.8880,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Have an understanding of some widely-used algorithms.
0.8902,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Have a practical understanding of the processing of scientific data.
0.8956,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9045,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9055,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9065,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data."
0.9067,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9100,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Testing and debugging are seen as integral to the programming enterprise.
0.9207,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Design, write and debug small programs to solve practical problems of a scientific nature."

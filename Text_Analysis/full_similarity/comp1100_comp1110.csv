Similarity,comp1100,comp1110
0.8617,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8763,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8778,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8794,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8812,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8821,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,These include distributed software revision control systems.
0.8948,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,Understand the legal context for protection of software as intellectual property.
0.8955,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8986,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,Understand basic types and the benefits of static typing.
0.9064,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9106,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9109,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9194,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9194,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,Describe and apply alternative computational paradigms to simple problems.
0.9254,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9267,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9278,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,This course is the first of three core computer science courses on programming.
0.9318,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9482,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9584,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8865,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8923,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",These include distributed software revision control systems.
0.8961,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8969,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8985,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8990,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",Understand the legal context for protection of software as intellectual property.
0.9073,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9116,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9142,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",This course is the first of three core computer science courses on programming.
0.9167,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",Understand basic types and the benefits of static typing.
0.9177,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9192,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9228,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9244,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",Describe and apply alternative computational paradigms to simple problems.
0.9283,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9297,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9332,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9350,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9399,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9468,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8850,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8943,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",This course is the first of three core computer science courses on programming.
0.8967,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",These include distributed software revision control systems.
0.8986,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",Understand the legal context for protection of software as intellectual property.
0.9001,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9060,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9065,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9082,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9090,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",Understand basic types and the benefits of static typing.
0.9096,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9123,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9136,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9230,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",Describe and apply alternative computational paradigms to simple problems.
0.9267,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9281,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9284,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9285,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9317,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9434,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9523,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8488,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",These include distributed software revision control systems.
0.8760,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",Understand the legal context for protection of software as intellectual property.
0.8770,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8802,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8809,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8809,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8918,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8922,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",This course is the first of three core computer science courses on programming.
0.8925,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",Understand basic types and the benefits of static typing.
0.8987,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9029,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9040,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",Describe and apply alternative computational paradigms to simple problems.
0.9088,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9101,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9263,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9263,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9266,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9300,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9326,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9361,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8563,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",These include distributed software revision control systems.
0.8654,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",Understand the legal context for protection of software as intellectual property.
0.8683,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",This course is the first of three core computer science courses on programming.
0.8736,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8773,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8823,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8839,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8842,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8842,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8927,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9047,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9064,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9079,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9090,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9103,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",Understand basic types and the benefits of static typing.
0.9105,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9128,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9132,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",Describe and apply alternative computational paradigms to simple problems.
0.9182,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9426,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8705,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8730,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,This course is the first of three core computer science courses on programming.
0.8773,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,These include distributed software revision control systems.
0.8786,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8831,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8849,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8854,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8944,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,Understand the legal context for protection of software as intellectual property.
0.8958,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8961,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9036,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9062,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9065,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9102,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,Describe and apply alternative computational paradigms to simple problems.
0.9107,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9113,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9129,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9206,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9220,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,Understand basic types and the benefits of static typing.
0.9291,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8830,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",Understand the legal context for protection of software as intellectual property.
0.8838,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8844,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",These include distributed software revision control systems.
0.8864,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",This course is the first of three core computer science courses on programming.
0.8941,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8990,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9039,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9128,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9181,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9202,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",Understand basic types and the benefits of static typing.
0.9220,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9273,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9289,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9313,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9317,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9354,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9356,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",Describe and apply alternative computational paradigms to simple problems.
0.9430,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9551,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9551,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8638,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8688,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,This course is the first of three core computer science courses on programming.
0.8801,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,These include distributed software revision control systems.
0.8826,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,Understand the legal context for protection of software as intellectual property.
0.8957,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8982,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8985,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.9022,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9040,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,Understand basic types and the benefits of static typing.
0.9076,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9100,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9105,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9210,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9213,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,Describe and apply alternative computational paradigms to simple problems.
0.9219,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9232,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9295,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9305,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9334,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9341,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8733,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8757,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",This course is the first of three core computer science courses on programming.
0.8854,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8856,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",Understand the legal context for protection of software as intellectual property.
0.8932,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",These include distributed software revision control systems.
0.8992,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",Understand basic types and the benefits of static typing.
0.9045,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9063,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9064,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9069,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9096,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9106,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9113,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9129,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9130,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9197,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9199,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9205,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9267,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",Describe and apply alternative computational paradigms to simple problems.
0.9276,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8289,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8297,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",These include distributed software revision control systems.
0.8403,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8431,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8461,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8504,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8619,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",Understand the legal context for protection of software as intellectual property.
0.8656,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8669,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",Understand basic types and the benefits of static typing.
0.8687,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8771,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8796,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8867,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",Describe and apply alternative computational paradigms to simple problems.
0.8900,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8958,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course is the first of three core computer science courses on programming.
0.8986,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9011,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9237,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9344,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
1.0000,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8851,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8855,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8900,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",These include distributed software revision control systems.
0.8959,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8963,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",This course is the first of three core computer science courses on programming.
0.9000,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",Understand the legal context for protection of software as intellectual property.
0.9054,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9110,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9127,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9150,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9165,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9174,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",Understand basic types and the benefits of static typing.
0.9178,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9269,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9298,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9351,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9475,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9503,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",Describe and apply alternative computational paradigms to simple problems.
0.9568,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9870,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8344,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",This course is the first of three core computer science courses on programming.
0.8425,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8547,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",These include distributed software revision control systems.
0.8653,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",Understand the legal context for protection of software as intellectual property.
0.8697,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8794,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8872,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",Understand basic types and the benefits of static typing.
0.8908,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8938,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",Describe and apply alternative computational paradigms to simple problems.
0.8954,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8983,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9023,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9082,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9176,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9179,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9253,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9262,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9319,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9443,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9474,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8598,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",This course is the first of three core computer science courses on programming.
0.8772,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",Understand the legal context for protection of software as intellectual property.
0.8871,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",These include distributed software revision control systems.
0.8872,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8964,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9012,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",Understand basic types and the benefits of static typing.
0.9024,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.9056,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9134,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9141,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9157,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9161,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9171,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9192,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9193,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9241,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9243,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9253,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",Describe and apply alternative computational paradigms to simple problems.
0.9357,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9558,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8296,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",This course is the first of three core computer science courses on programming.
0.8396,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",Understand the legal context for protection of software as intellectual property.
0.8405,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8500,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",These include distributed software revision control systems.
0.8611,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8754,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",Understand basic types and the benefits of static typing.
0.8786,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8793,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8962,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8969,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9004,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9079,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9133,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9167,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",Describe and apply alternative computational paradigms to simple problems.
0.9232,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9308,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9395,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9445,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9493,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9841,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8367,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",Understand the legal context for protection of software as intellectual property.
0.8399,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",This course is the first of three core computer science courses on programming.
0.8456,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8502,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",These include distributed software revision control systems.
0.8632,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8714,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8722,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",Understand basic types and the benefits of static typing.
0.8767,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8812,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8911,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8924,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9088,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9109,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9150,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9209,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",Describe and apply alternative computational paradigms to simple problems.
0.9252,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9361,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9366,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9529,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9922,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8790,"Understand the basics of event-driven programming, and its use in constructing GUIs","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8927,"Understand the basics of event-driven programming, and its use in constructing GUIs","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8939,"Understand the basics of event-driven programming, and its use in constructing GUIs",This course is the first of three core computer science courses on programming.
0.8941,"Understand the basics of event-driven programming, and its use in constructing GUIs","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8979,"Understand the basics of event-driven programming, and its use in constructing GUIs",These include distributed software revision control systems.
0.8992,"Understand the basics of event-driven programming, and its use in constructing GUIs","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9009,"Understand the basics of event-driven programming, and its use in constructing GUIs",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9053,"Understand the basics of event-driven programming, and its use in constructing GUIs",Understand the legal context for protection of software as intellectual property.
0.9056,"Understand the basics of event-driven programming, and its use in constructing GUIs","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9100,"Understand the basics of event-driven programming, and its use in constructing GUIs","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9157,"Understand the basics of event-driven programming, and its use in constructing GUIs","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9196,"Understand the basics of event-driven programming, and its use in constructing GUIs","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9197,"Understand the basics of event-driven programming, and its use in constructing GUIs",Describe and apply alternative computational paradigms to simple problems.
0.9235,"Understand the basics of event-driven programming, and its use in constructing GUIs","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9240,"Understand the basics of event-driven programming, and its use in constructing GUIs",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9282,"Understand the basics of event-driven programming, and its use in constructing GUIs",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9305,"Understand the basics of event-driven programming, and its use in constructing GUIs","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9314,"Understand the basics of event-driven programming, and its use in constructing GUIs",Understand basic types and the benefits of static typing.
0.9369,"Understand the basics of event-driven programming, and its use in constructing GUIs","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9394,"Understand the basics of event-driven programming, and its use in constructing GUIs","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8725,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",This course is the first of three core computer science courses on programming.
0.8797,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8856,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8866,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",Understand the legal context for protection of software as intellectual property.
0.8875,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8890,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8932,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9004,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",These include distributed software revision control systems.
0.9009,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9039,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9047,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9060,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9071,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9076,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9107,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",Understand basic types and the benefits of static typing.
0.9107,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9189,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9237,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9329,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",Describe and apply alternative computational paradigms to simple problems.
0.9350,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Describe, understand and evolve programs, via documentation, testing, and debugging."

score,s1,s2
0.8193,"This course covers a range of concepts, techniques and technologies in network security.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8359,"This course covers a range of concepts, techniques and technologies in network security.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8476,"This course covers a range of concepts, techniques and technologies in network security.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8545,"This course covers a range of concepts, techniques and technologies in network security.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8667,"This course covers a range of concepts, techniques and technologies in network security.","Understand, apply, and analyse state and state machines in expressing computations."
0.8715,"This course covers a range of concepts, techniques and technologies in network security.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8725,"This course covers a range of concepts, techniques and technologies in network security.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8736,"This course covers a range of concepts, techniques and technologies in network security.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8764,"This course covers a range of concepts, techniques and technologies in network security.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8766,"This course covers a range of concepts, techniques and technologies in network security.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8767,"This course covers a range of concepts, techniques and technologies in network security.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8870,"This course covers a range of concepts, techniques and technologies in network security.",Apply fundamental programming concepts for medium scale programs.
0.9053,"This course covers a range of concepts, techniques and technologies in network security.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9090,"This course covers a range of concepts, techniques and technologies in network security.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9192,"This course covers a range of concepts, techniques and technologies in network security.",The course also treats intellectual property considerations in software development and deployment.
0.8469,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",Apply fundamental programming concepts for medium scale programs.
0.8557,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8577,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8646,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Understand, apply, and analyse state and state machines in expressing computations."
0.8747,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8753,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8756,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8762,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",The course also treats intellectual property considerations in software development and deployment.
0.8783,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8791,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8936,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8944,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8972,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8981,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9024,"This includes an overview of relevant network protocols and cryptography; analyses of designs and implementations of security protocols, including basic tools and techniques; an understanding of network threats and attacks such as eavesdropping, spoofing, protocol failures, DoS attacks and man-in-the-middle attacks; network defence including threat analysis and identification, architecture control, intrusion detection and layered security.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8812,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8815,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8838,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.9067,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",Apply fundamental programming concepts for medium scale programs.
0.9069,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Understand, apply, and analyse state and state machines in expressing computations."
0.9083,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9100,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9193,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9206,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9209,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9210,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9268,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9282,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",The course also treats intellectual property considerations in software development and deployment.
0.9310,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9323,"The course features hands-on lectures and labs to analyse network vulnerabilities, and design and implement appropriate defensive techniques.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8155,Explain network security issues.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8259,Explain network security issues.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8407,Explain network security issues.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8462,Explain network security issues.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8531,Explain network security issues.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8537,Explain network security issues.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8622,Explain network security issues.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8628,Explain network security issues.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8686,Explain network security issues.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8697,Explain network security issues.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8747,Explain network security issues.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8777,Explain network security issues.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8804,Explain network security issues.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9107,Explain network security issues.,The course also treats intellectual property considerations in software development and deployment.
0.9156,Explain network security issues.,Apply fundamental programming concepts for medium scale programs.
0.8497,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8574,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8583,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8686,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8715,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8818,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8830,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8864,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8875,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8875,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Understand, apply, and analyse state and state machines in expressing computations."
0.8877,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",Apply fundamental programming concepts for medium scale programs.
0.8908,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",The course also treats intellectual property considerations in software development and deployment.
0.9017,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9026,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9043,"Understand various threats and vulnerabilities of a network, and explain appropriate countermeasures.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8683,Perform simple penetration testing of a network and network services,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8751,Perform simple penetration testing of a network and network services,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8773,Perform simple penetration testing of a network and network services,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8843,Perform simple penetration testing of a network and network services,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8854,Perform simple penetration testing of a network and network services,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8928,Perform simple penetration testing of a network and network services,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8937,Perform simple penetration testing of a network and network services,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8958,Perform simple penetration testing of a network and network services,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9009,Perform simple penetration testing of a network and network services,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9042,Perform simple penetration testing of a network and network services,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9071,Perform simple penetration testing of a network and network services,"Understand, apply, and analyse state and state machines in expressing computations."
0.9167,Perform simple penetration testing of a network and network services,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9199,Perform simple penetration testing of a network and network services,The course also treats intellectual property considerations in software development and deployment.
0.9207,Perform simple penetration testing of a network and network services,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9226,Perform simple penetration testing of a network and network services,Apply fundamental programming concepts for medium scale programs.
0.8684,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8694,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8824,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8829,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8902,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8918,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8918,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8960,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8982,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8992,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9012,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9070,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,Apply fundamental programming concepts for medium scale programs.
0.9099,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9140,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9220,Perform a threat analysis / vulnerability assessment of protocol designs and implementations.,The course also treats intellectual property considerations in software development and deployment.
0.8191,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8217,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8300,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8499,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8540,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8551,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8562,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8568,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8609,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8653,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,Apply fundamental programming concepts for medium scale programs.
0.8677,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8728,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,The course also treats intellectual property considerations in software development and deployment.
0.8734,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8798,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8853,Design and implement appropriate defensive countermeasures against identified threats and vulnerabilities.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance

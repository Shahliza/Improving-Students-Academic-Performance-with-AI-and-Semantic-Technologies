score,s1,s2
0.8277,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8326,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8449,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8477,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8531,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,These include distributed software revision control systems.
0.8567,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8636,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8655,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Understand basic types and the benefits of static typing.
0.8666,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8788,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Understand the legal context for protection of software as intellectual property.
0.8867,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8907,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Describe and apply alternative computational paradigms to simple problems.
0.8999,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9000,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9087,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9130,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,This course is the first of three core computer science courses on programming.
0.9148,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9177,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9217,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9451,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8579,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8585,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8689,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8721,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8736,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8842,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,These include distributed software revision control systems.
0.8856,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,This course is the first of three core computer science courses on programming.
0.8888,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8918,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8934,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Understand basic types and the benefits of static typing.
0.8959,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8973,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Understand the legal context for protection of software as intellectual property.
0.8986,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9037,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9064,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9114,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9127,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9129,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9217,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,Describe and apply alternative computational paradigms to simple problems.
0.9281,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8593,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",These include distributed software revision control systems.
0.8598,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Understand the legal context for protection of software as intellectual property.
0.8686,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8710,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8761,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Understand basic types and the benefits of static typing.
0.8790,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8800,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8828,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8916,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8944,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8949,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8956,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",Describe and apply alternative computational paradigms to simple problems.
0.8959,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9010,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",This course is the first of three core computer science courses on programming.
0.9129,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9174,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9218,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9224,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9252,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9263,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8566,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8757,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Understand the legal context for protection of software as intellectual property.
0.8782,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",These include distributed software revision control systems.
0.8810,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Understand basic types and the benefits of static typing.
0.8818,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8837,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8944,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8953,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",This course is the first of three core computer science courses on programming.
0.8997,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9005,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9007,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9042,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9123,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9126,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9173,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9196,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Describe and apply alternative computational paradigms to simple problems.
0.9221,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9223,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9267,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9311,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8765,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,These include distributed software revision control systems.
0.8767,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8769,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8793,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,This course is the first of three core computer science courses on programming.
0.8854,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8897,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8899,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Understand the legal context for protection of software as intellectual property.
0.8985,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Understand basic types and the benefits of static typing.
0.8995,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9026,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9031,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9096,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9106,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9113,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9128,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9131,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9152,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9153,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9251,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9295,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Describe and apply alternative computational paradigms to simple problems.
0.8494,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8602,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",This course is the first of three core computer science courses on programming.
0.8679,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",These include distributed software revision control systems.
0.8681,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Understand the legal context for protection of software as intellectual property.
0.8810,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8880,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Understand basic types and the benefits of static typing.
0.8884,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8984,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8987,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9015,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9067,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9086,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9115,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",Describe and apply alternative computational paradigms to simple problems.
0.9122,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9142,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9165,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9188,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9198,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9217,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9217,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8563,appreciate the building blocks of scientific and engineering software.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8618,appreciate the building blocks of scientific and engineering software.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8706,appreciate the building blocks of scientific and engineering software.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8761,appreciate the building blocks of scientific and engineering software.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8764,appreciate the building blocks of scientific and engineering software.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8778,appreciate the building blocks of scientific and engineering software.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8831,appreciate the building blocks of scientific and engineering software.,This course is the first of three core computer science courses on programming.
0.8963,appreciate the building blocks of scientific and engineering software.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8971,appreciate the building blocks of scientific and engineering software.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8986,appreciate the building blocks of scientific and engineering software.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8998,appreciate the building blocks of scientific and engineering software.,Understand the legal context for protection of software as intellectual property.
0.8998,appreciate the building blocks of scientific and engineering software.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9000,appreciate the building blocks of scientific and engineering software.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9003,appreciate the building blocks of scientific and engineering software.,These include distributed software revision control systems.
0.9013,appreciate the building blocks of scientific and engineering software.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9072,appreciate the building blocks of scientific and engineering software.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9096,appreciate the building blocks of scientific and engineering software.,Understand basic types and the benefits of static typing.
0.9129,appreciate the building blocks of scientific and engineering software.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9162,appreciate the building blocks of scientific and engineering software.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9273,appreciate the building blocks of scientific and engineering software.,Describe and apply alternative computational paradigms to simple problems.
0.8599,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8689,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,These include distributed software revision control systems.
0.8748,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8860,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8864,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8894,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Understand the legal context for protection of software as intellectual property.
0.8896,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8931,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8998,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9003,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,This course is the first of three core computer science courses on programming.
0.9005,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9037,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9086,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Understand basic types and the benefits of static typing.
0.9118,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9139,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9182,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9196,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Describe and apply alternative computational paradigms to simple problems.
0.9253,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9270,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9421,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8618,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8656,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8746,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,This course is the first of three core computer science courses on programming.
0.8775,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,These include distributed software revision control systems.
0.8815,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8860,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Understand the legal context for protection of software as intellectual property.
0.8918,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Understand basic types and the benefits of static typing.
0.8962,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8982,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9000,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9020,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9077,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9105,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9106,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9172,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9180,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9213,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9225,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9240,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9369,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Describe and apply alternative computational paradigms to simple problems.
0.8476,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8528,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,This course is the first of three core computer science courses on programming.
0.8538,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8599,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,These include distributed software revision control systems.
0.8628,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8701,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8755,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8759,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8804,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8828,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8833,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8847,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8917,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Understand the legal context for protection of software as intellectual property.
0.8924,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Understand basic types and the benefits of static typing.
0.8936,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8984,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8986,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9022,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9034,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9196,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Describe and apply alternative computational paradigms to simple problems.
0.8235,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8247,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8363,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8456,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8556,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,These include distributed software revision control systems.
0.8595,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8613,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Understand basic types and the benefits of static typing.
0.8623,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8640,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,This course is the first of three core computer science courses on programming.
0.8680,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8730,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8778,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8793,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8816,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8864,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8876,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8881,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Describe and apply alternative computational paradigms to simple problems.
0.8921,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,Understand the legal context for protection of software as intellectual property.
0.9011,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9324,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8662,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8695,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,This course is the first of three core computer science courses on programming.
0.8762,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8812,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,These include distributed software revision control systems.
0.8827,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8846,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8871,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8931,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8954,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Understand basic types and the benefits of static typing.
0.8957,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8992,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Understand the legal context for protection of software as intellectual property.
0.8993,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9037,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9077,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9079,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9084,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9115,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9123,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9183,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9206,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Describe and apply alternative computational paradigms to simple problems.
0.8427,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",This course is the first of three core computer science courses on programming.
0.8529,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",These include distributed software revision control systems.
0.8561,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8597,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Understand the legal context for protection of software as intellectual property.
0.8639,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8648,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Understand basic types and the benefits of static typing.
0.8711,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8771,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8790,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8820,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8842,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8861,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8918,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8925,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8976,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8999,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9036,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Describe and apply alternative computational paradigms to simple problems.
0.9053,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9073,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9109,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."

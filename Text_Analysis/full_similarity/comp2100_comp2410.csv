score,s1,s2
0.8228,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8288,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8435,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8584,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8614,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8638,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8644,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Understand, apply, and analyse state and state machines in expressing computations."
0.8668,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8673,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8751,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,Apply fundamental programming concepts for medium scale programs.
0.8755,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8766,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8767,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8777,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,The course also treats intellectual property considerations in software development and deployment.
0.8833,Data communications and computer networking systems are growing rapidly in both size and function. It is impossible to think of a successful business day without the Internet.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8283,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8410,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8486,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",Apply fundamental programming concepts for medium scale programs.
0.8499,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Understand, apply, and analyse state and state machines in expressing computations."
0.8499,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8575,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",The course also treats intellectual property considerations in software development and deployment.
0.8585,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8634,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8673,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8674,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8698,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8708,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8708,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8725,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8742,"Modern communication technologies such as WiFi, Bring Your Own Device (BYOD), and Internet of Things (IoT) help us to stay connected with our family, friends, and work regardless of present location.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8535,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8618,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8759,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8773,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8795,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8809,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8815,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8832,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",The course also treats intellectual property considerations in software development and deployment.
0.8873,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",Apply fundamental programming concepts for medium scale programs.
0.8894,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Understand, apply, and analyse state and state machines in expressing computations."
0.8918,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8928,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8930,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8970,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9031,"Networked Information Systems (NISs) are becoming an essential part of everyday experiences, in our kitchen appliances, cars, and public transport and for Internet banking and shopping.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8351,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8385,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8517,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",Apply fundamental programming concepts for medium scale programs.
0.8520,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8583,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8616,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8654,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",The course also treats intellectual property considerations in software development and deployment.
0.8713,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8715,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8720,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Understand, apply, and analyse state and state machines in expressing computations."
0.8721,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8787,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8850,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8960,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8964,"Because they can make or break a day, understanding how networks work, and how they should be set up and managed to for reliability, scalability, mobility, and security is of the utmost importance to us.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8735,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8849,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9044,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9087,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Understand, apply, and analyse state and state machines in expressing computations."
0.9111,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9130,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",Apply fundamental programming concepts for medium scale programs.
0.9160,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9207,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9228,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9251,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9286,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9286,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9290,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9302,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9346,"In this course, you will learn fundamental concepts of data communication and networking in addition to gaining a working knowledge of network scalability, mobility, security, and managing capabilities.",The course also treats intellectual property considerations in software development and deployment.
0.8414,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8457,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8638,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8756,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8920,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.8921,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",Apply fundamental programming concepts for medium scale programs.
0.8965,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8992,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9014,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",The course also treats intellectual property considerations in software development and deployment.
0.9017,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Understand, apply, and analyse state and state machines in expressing computations."
0.9044,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9072,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9085,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9162,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9165,"You will have the foundational basis to understand, evaluate, and compare new technologies and their applications.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8653,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8714,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8788,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8946,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Understand, apply, and analyse state and state machines in expressing computations."
0.8999,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8999,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9016,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",Apply fundamental programming concepts for medium scale programs.
0.9091,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9135,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9138,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9149,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9157,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",The course also treats intellectual property considerations in software development and deployment.
0.9203,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9237,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9306,"You will also develop a working knowledge of measuring risks and security threats and considering network monitoring and management procedures. Finally, you will build an ethics awareness and the communication skills needed to apply these networking concepts to a range of real-life analytical scenarios.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8685,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8776,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8827,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8910,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8958,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9045,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9071,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",Apply fundamental programming concepts for medium scale programs.
0.9075,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9104,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9111,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9119,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Understand, apply, and analyse state and state machines in expressing computations."
0.9196,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",The course also treats intellectual property considerations in software development and deployment.
0.9219,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9226,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9381,"Discuss how network applications and their components work in real-life socio-economic, ethical, and legal contexts and evaluate their risks.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8741,"Analyse the role of network standards, protocols, and layered models.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8939,"Analyse the role of network standards, protocols, and layered models.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8949,"Analyse the role of network standards, protocols, and layered models.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8978,"Analyse the role of network standards, protocols, and layered models.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9037,"Analyse the role of network standards, protocols, and layered models.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9074,"Analyse the role of network standards, protocols, and layered models.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9144,"Analyse the role of network standards, protocols, and layered models.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9155,"Analyse the role of network standards, protocols, and layered models.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9184,"Analyse the role of network standards, protocols, and layered models.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9204,"Analyse the role of network standards, protocols, and layered models.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.9218,"Analyse the role of network standards, protocols, and layered models.",The course also treats intellectual property considerations in software development and deployment.
0.9221,"Analyse the role of network standards, protocols, and layered models.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9221,"Analyse the role of network standards, protocols, and layered models.",Apply fundamental programming concepts for medium scale programs.
0.9230,"Analyse the role of network standards, protocols, and layered models.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9232,"Analyse the role of network standards, protocols, and layered models.","Understand, apply, and analyse state and state machines in expressing computations."
0.8823,"Apply network design principles, topologies, architectures, and their components.","Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8906,"Apply network design principles, topologies, architectures, and their components.","Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8941,"Apply network design principles, topologies, architectures, and their components.",Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8953,"Apply network design principles, topologies, architectures, and their components.","Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.9083,"Apply network design principles, topologies, architectures, and their components.","This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9117,"Apply network design principles, topologies, architectures, and their components.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9144,"Apply network design principles, topologies, architectures, and their components.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9160,"Apply network design principles, topologies, architectures, and their components.",The course also treats intellectual property considerations in software development and deployment.
0.9173,"Apply network design principles, topologies, architectures, and their components.","Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9186,"Apply network design principles, topologies, architectures, and their components.","Understand, apply, and analyse state and state machines in expressing computations."
0.9201,"Apply network design principles, topologies, architectures, and their components.","Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9215,"Apply network design principles, topologies, architectures, and their components.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9232,"Apply network design principles, topologies, architectures, and their components.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9250,"Apply network design principles, topologies, architectures, and their components.",Apply fundamental programming concepts for medium scale programs.
0.9259,"Apply network design principles, topologies, architectures, and their components.","Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8737,Apply logical and physical networks at levels from the local area to the Internet.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8787,Apply logical and physical networks at levels from the local area to the Internet.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.8838,Apply logical and physical networks at levels from the local area to the Internet.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.8844,Apply logical and physical networks at levels from the local area to the Internet.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.8854,Apply logical and physical networks at levels from the local area to the Internet.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8932,Apply logical and physical networks at levels from the local area to the Internet.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.8939,Apply logical and physical networks at levels from the local area to the Internet.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.8940,Apply logical and physical networks at levels from the local area to the Internet.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.8988,Apply logical and physical networks at levels from the local area to the Internet.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."
0.8989,Apply logical and physical networks at levels from the local area to the Internet.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.8996,Apply logical and physical networks at levels from the local area to the Internet.,The course also treats intellectual property considerations in software development and deployment.
0.9075,Apply logical and physical networks at levels from the local area to the Internet.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.9083,Apply logical and physical networks at levels from the local area to the Internet.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9097,Apply logical and physical networks at levels from the local area to the Internet.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9247,Apply logical and physical networks at levels from the local area to the Internet.,Apply fundamental programming concepts for medium scale programs.
0.8822,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound)."
0.8824,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
0.8856,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs"
0.8947,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9057,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures)."
0.9059,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9092,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9119,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives."
0.9123,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
0.9150,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,The course also treats intellectual property considerations in software development and deployment.
0.9163,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,Apply fundamental programming concepts for medium scale programs.
0.9193,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9197,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9201,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9211,Create a virtual machine and apply tools for packet analysis and file encryption in a lab environment.,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design."

score,s1,s2
0.8368,Information theory studies the fundamental limits of the representation and transmission of information.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8467,Information theory studies the fundamental limits of the representation and transmission of information.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8468,Information theory studies the fundamental limits of the representation and transmission of information.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8484,Information theory studies the fundamental limits of the representation and transmission of information.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8527,Information theory studies the fundamental limits of the representation and transmission of information.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8529,Information theory studies the fundamental limits of the representation and transmission of information.,This course is the first of three core computer science courses on programming.
0.8545,Information theory studies the fundamental limits of the representation and transmission of information.,These include distributed software revision control systems.
0.8559,Information theory studies the fundamental limits of the representation and transmission of information.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8593,Information theory studies the fundamental limits of the representation and transmission of information.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8612,Information theory studies the fundamental limits of the representation and transmission of information.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8744,Information theory studies the fundamental limits of the representation and transmission of information.,Understand basic types and the benefits of static typing.
0.8785,Information theory studies the fundamental limits of the representation and transmission of information.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8860,Information theory studies the fundamental limits of the representation and transmission of information.,Understand the legal context for protection of software as intellectual property.
0.8862,Information theory studies the fundamental limits of the representation and transmission of information.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8867,Information theory studies the fundamental limits of the representation and transmission of information.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8878,Information theory studies the fundamental limits of the representation and transmission of information.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8923,Information theory studies the fundamental limits of the representation and transmission of information.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8942,Information theory studies the fundamental limits of the representation and transmission of information.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8957,Information theory studies the fundamental limits of the representation and transmission of information.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8968,Information theory studies the fundamental limits of the representation and transmission of information.,Describe and apply alternative computational paradigms to simple problems.
0.8161,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",These include distributed software revision control systems.
0.8372,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8374,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",This course is the first of three core computer science courses on programming.
0.8391,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8433,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",Understand the legal context for protection of software as intellectual property.
0.8475,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",Understand basic types and the benefits of static typing.
0.8475,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8568,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8611,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8646,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8725,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.8780,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",Describe and apply alternative computational paradigms to simple problems.
0.8789,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8794,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8868,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8950,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8971,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9038,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9079,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9121,"This course provides an introduction to information theory, studying fundamental concepts such as probability, information, and entropy and examining their applications in the areas of data compression, coding, communications, pattern recognition and probabilistic inference.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8590,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",These include distributed software revision control systems.
0.8598,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",This course is the first of three core computer science courses on programming.
0.8733,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8738,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8856,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8859,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8938,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",Understand the legal context for protection of software as intellectual property.
0.8948,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8986,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9000,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9004,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9012,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",Understand basic types and the benefits of static typing.
0.9034,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9039,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9045,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.9105,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9146,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9184,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9256,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.",Describe and apply alternative computational paradigms to simple problems.
0.9407,"Understand and apply fundamental concepts in information theory such as probability, entropy, information content and their inter-relationships.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8374,Understand the principles of data compression.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8399,Understand the principles of data compression.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8449,Understand the principles of data compression.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8490,Understand the principles of data compression.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8511,Understand the principles of data compression.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8612,Understand the principles of data compression.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8618,Understand the principles of data compression.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8669,Understand the principles of data compression.,This course is the first of three core computer science courses on programming.
0.8684,Understand the principles of data compression.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8685,Understand the principles of data compression.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8719,Understand the principles of data compression.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8754,Understand the principles of data compression.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8756,Understand the principles of data compression.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8898,Understand the principles of data compression.,These include distributed software revision control systems.
0.8986,Understand the principles of data compression.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8989,Understand the principles of data compression.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9005,Understand the principles of data compression.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9013,Understand the principles of data compression.,Understand the legal context for protection of software as intellectual property.
0.9021,Understand the principles of data compression.,Describe and apply alternative computational paradigms to simple problems.
0.9237,Understand the principles of data compression.,Understand basic types and the benefits of static typing.
0.7836,Compute entropy and mutual information of random variables.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.7877,Compute entropy and mutual information of random variables.,This course is the first of three core computer science courses on programming.
0.7974,Compute entropy and mutual information of random variables.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8008,Compute entropy and mutual information of random variables.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8046,Compute entropy and mutual information of random variables.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8098,Compute entropy and mutual information of random variables.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8169,Compute entropy and mutual information of random variables.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8179,Compute entropy and mutual information of random variables.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8280,Compute entropy and mutual information of random variables.,These include distributed software revision control systems.
0.8284,Compute entropy and mutual information of random variables.,Understand the legal context for protection of software as intellectual property.
0.8325,Compute entropy and mutual information of random variables.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8343,Compute entropy and mutual information of random variables.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8424,Compute entropy and mutual information of random variables.,Understand basic types and the benefits of static typing.
0.8454,Compute entropy and mutual information of random variables.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8463,Compute entropy and mutual information of random variables.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8506,Compute entropy and mutual information of random variables.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.8511,Compute entropy and mutual information of random variables.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8540,Compute entropy and mutual information of random variables.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.8645,Compute entropy and mutual information of random variables.,Describe and apply alternative computational paradigms to simple problems.
0.8832,Compute entropy and mutual information of random variables.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8508,Implement and analyse basic coding and compression algorithms.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8621,Implement and analyse basic coding and compression algorithms.,This course is the first of three core computer science courses on programming.
0.8707,Implement and analyse basic coding and compression algorithms.,Understand the legal context for protection of software as intellectual property.
0.8734,Implement and analyse basic coding and compression algorithms.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8765,Implement and analyse basic coding and compression algorithms.,These include distributed software revision control systems.
0.8786,Implement and analyse basic coding and compression algorithms.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8812,Implement and analyse basic coding and compression algorithms.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8850,Implement and analyse basic coding and compression algorithms.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8906,Implement and analyse basic coding and compression algorithms.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8917,Implement and analyse basic coding and compression algorithms.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8937,Implement and analyse basic coding and compression algorithms.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8988,Implement and analyse basic coding and compression algorithms.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9100,Implement and analyse basic coding and compression algorithms.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9108,Implement and analyse basic coding and compression algorithms.,Understand basic types and the benefits of static typing.
0.9126,Implement and analyse basic coding and compression algorithms.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9126,Implement and analyse basic coding and compression algorithms.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9136,Implement and analyse basic coding and compression algorithms.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9143,Implement and analyse basic coding and compression algorithms.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9158,Implement and analyse basic coding and compression algorithms.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9356,Implement and analyse basic coding and compression algorithms.,Describe and apply alternative computational paradigms to simple problems.
0.8548,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8552,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,This course is the first of three core computer science courses on programming.
0.8718,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,These include distributed software revision control systems.
0.8761,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8801,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8802,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8857,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8893,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,Understand the legal context for protection of software as intellectual property.
0.8938,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8986,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8987,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8991,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,Understand basic types and the benefits of static typing.
0.9064,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9068,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9085,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9086,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9166,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9167,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9324,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,Describe and apply alternative computational paradigms to simple problems.
0.9382,Understand the relationship of information theoretical principles and Bayesian inference in data modelling and pattern recognition.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8529,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",These include distributed software revision control systems.
0.8550,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",This course is the first of three core computer science courses on programming.
0.8657,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8701,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8762,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8803,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8850,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8872,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8873,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",Understand the legal context for protection of software as intellectual property.
0.8892,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8892,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8941,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8992,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9005,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9011,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9031,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",Understand basic types and the benefits of static typing.
0.9036,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9132,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",The functional paradigm demonstrates elegant solutions to many programming problems.
0.9338,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9354,"Understand some key theorems and inequalities that quantify essential limitations on compression, communication and inference.",Describe and apply alternative computational paradigms to simple problems.
0.8396,Know the basic concepts regarding communications over noisy channels.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.8527,Know the basic concepts regarding communications over noisy channels.,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.8570,Know the basic concepts regarding communications over noisy channels.,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.8580,Know the basic concepts regarding communications over noisy channels.,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.8586,Know the basic concepts regarding communications over noisy channels.,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
0.8646,Know the basic concepts regarding communications over noisy channels.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.8732,Know the basic concepts regarding communications over noisy channels.,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.8775,Know the basic concepts regarding communications over noisy channels.,This course is the first of three core computer science courses on programming.
0.8785,Know the basic concepts regarding communications over noisy channels.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8807,Know the basic concepts regarding communications over noisy channels.,These include distributed software revision control systems.
0.8874,Know the basic concepts regarding communications over noisy channels.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.8902,Know the basic concepts regarding communications over noisy channels.,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.8924,Know the basic concepts regarding communications over noisy channels.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.8934,Know the basic concepts regarding communications over noisy channels.,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.8981,Know the basic concepts regarding communications over noisy channels.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.8989,Know the basic concepts regarding communications over noisy channels.,Understand the legal context for protection of software as intellectual property.
0.9017,Know the basic concepts regarding communications over noisy channels.,The functional paradigm demonstrates elegant solutions to many programming problems.
0.9045,Know the basic concepts regarding communications over noisy channels.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9154,Know the basic concepts regarding communications over noisy channels.,Describe and apply alternative computational paradigms to simple problems.
0.9274,Know the basic concepts regarding communications over noisy channels.,Understand basic types and the benefits of static typing.

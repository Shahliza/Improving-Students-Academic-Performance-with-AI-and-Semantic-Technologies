score,s1,s2
0.8479,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8604,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8663,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8709,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",appreciate the building blocks of scientific and engineering software.
0.8715,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8749,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8769,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8820,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8827,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8835,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8847,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8934,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9013,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8189,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8264,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8297,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8399,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8447,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8457,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",appreciate the building blocks of scientific and engineering software.
0.8696,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8801,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8805,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8815,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8817,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8886,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9244,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8858,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8886,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8929,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8956,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8966,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",appreciate the building blocks of scientific and engineering software.
0.9011,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9133,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9134,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.9169,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.9195,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9199,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9251,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9287,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.8570,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8660,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8749,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8775,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8815,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8843,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8863,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8880,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8961,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8974,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9042,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,appreciate the building blocks of scientific and engineering software.
0.9050,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9181,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8690,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8721,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8725,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8873,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8919,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8956,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.8963,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8998,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,appreciate the building blocks of scientific and engineering software.
0.9009,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.9092,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9144,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9174,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9192,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.8729,Demonstrate proficiency in software reverse engineering.,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8731,Demonstrate proficiency in software reverse engineering.,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8819,Demonstrate proficiency in software reverse engineering.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8829,Demonstrate proficiency in software reverse engineering.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.8896,Demonstrate proficiency in software reverse engineering.,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8924,Demonstrate proficiency in software reverse engineering.,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.8935,Demonstrate proficiency in software reverse engineering.,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9004,Demonstrate proficiency in software reverse engineering.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9040,Demonstrate proficiency in software reverse engineering.,It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9090,Demonstrate proficiency in software reverse engineering.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9101,Demonstrate proficiency in software reverse engineering.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9202,Demonstrate proficiency in software reverse engineering.,appreciate the building blocks of scientific and engineering software.
0.9260,Demonstrate proficiency in software reverse engineering.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8697,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8762,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8896,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.8907,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8949,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.8966,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9004,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.9008,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9098,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9099,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",appreciate the building blocks of scientific and engineering software.
0.9120,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9130,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9144,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8763,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.8798,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8834,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
0.8892,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.8932,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",appreciate the building blocks of scientific and engineering software.
0.8989,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
0.9034,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9038,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9067,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9151,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9178,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance."
0.9206,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9221,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.

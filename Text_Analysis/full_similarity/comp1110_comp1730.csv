score,s1,s2
0.8848,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8879,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8971,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8981,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9036,This course teaches introductory programming within a problem solving framework applicable to the sciences.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9116,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9156,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9169,This course teaches introductory programming within a problem solving framework applicable to the sciences.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9180,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9227,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9265,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9311,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9346,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9394,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9414,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9497,This course teaches introductory programming within a problem solving framework applicable to the sciences.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9523,This course teaches introductory programming within a problem solving framework applicable to the sciences.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8827,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8868,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8887,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8909,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8962,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8993,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9045,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9048,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9054,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9075,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9172,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9197,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9219,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9222,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9236,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9274,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9308,"The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8590,There is an emphasis on designing and writing correct code.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8607,There is an emphasis on designing and writing correct code.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8685,There is an emphasis on designing and writing correct code.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8747,There is an emphasis on designing and writing correct code.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8770,There is an emphasis on designing and writing correct code.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8839,There is an emphasis on designing and writing correct code.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8855,There is an emphasis on designing and writing correct code.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8884,There is an emphasis on designing and writing correct code.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8981,There is an emphasis on designing and writing correct code.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8990,There is an emphasis on designing and writing correct code.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8992,There is an emphasis on designing and writing correct code.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9024,There is an emphasis on designing and writing correct code.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9071,There is an emphasis on designing and writing correct code.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9081,There is an emphasis on designing and writing correct code.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9105,There is an emphasis on designing and writing correct code.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9141,There is an emphasis on designing and writing correct code.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9156,There is an emphasis on designing and writing correct code.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8713,Testing and debugging are seen as integral to the programming enterprise.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8870,Testing and debugging are seen as integral to the programming enterprise.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8900,Testing and debugging are seen as integral to the programming enterprise.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8940,Testing and debugging are seen as integral to the programming enterprise.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9002,Testing and debugging are seen as integral to the programming enterprise.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9020,Testing and debugging are seen as integral to the programming enterprise.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9063,Testing and debugging are seen as integral to the programming enterprise.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9080,Testing and debugging are seen as integral to the programming enterprise.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9126,Testing and debugging are seen as integral to the programming enterprise.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9180,Testing and debugging are seen as integral to the programming enterprise.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9227,Testing and debugging are seen as integral to the programming enterprise.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9229,Testing and debugging are seen as integral to the programming enterprise.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9262,Testing and debugging are seen as integral to the programming enterprise.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9276,Testing and debugging are seen as integral to the programming enterprise.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9304,Testing and debugging are seen as integral to the programming enterprise.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9329,Testing and debugging are seen as integral to the programming enterprise.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9419,Testing and debugging are seen as integral to the programming enterprise.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8701,Both top-down and object oriented design are taught.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8875,Both top-down and object oriented design are taught.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8883,Both top-down and object oriented design are taught.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8922,Both top-down and object oriented design are taught.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8929,Both top-down and object oriented design are taught.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8940,Both top-down and object oriented design are taught.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8966,Both top-down and object oriented design are taught.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9004,Both top-down and object oriented design are taught.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9030,Both top-down and object oriented design are taught.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9040,Both top-down and object oriented design are taught.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9092,Both top-down and object oriented design are taught.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9103,Both top-down and object oriented design are taught.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9124,Both top-down and object oriented design are taught.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9138,Both top-down and object oriented design are taught.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9267,Both top-down and object oriented design are taught.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9336,Both top-down and object oriented design are taught.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9365,Both top-down and object oriented design are taught.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8552,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8598,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8617,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8639,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8658,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8674,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8688,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8723,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8844,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8911,There will be an introduction to widely-used computer science algorithms and to machine architecture.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8914,There will be an introduction to widely-used computer science algorithms and to machine architecture.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8927,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9013,There will be an introduction to widely-used computer science algorithms and to machine architecture.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9118,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9128,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9130,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9190,There will be an introduction to widely-used computer science algorithms and to machine architecture.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8795,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8871,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8935,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8973,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9067,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9110,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9122,The course will be taught using one or more programming languages which are widely applicable to scientific work.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9165,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9172,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9193,The course will be taught using one or more programming languages which are widely applicable to scientific work.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9203,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9226,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9248,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9256,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9280,The course will be taught using one or more programming languages which are widely applicable to scientific work.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9285,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9357,The course will be taught using one or more programming languages which are widely applicable to scientific work.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8706,"Design, write and debug small programs to solve practical problems of a scientific nature.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8708,"Design, write and debug small programs to solve practical problems of a scientific nature.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8821,"Design, write and debug small programs to solve practical problems of a scientific nature.",The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8855,"Design, write and debug small programs to solve practical problems of a scientific nature.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8863,"Design, write and debug small programs to solve practical problems of a scientific nature.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8932,"Design, write and debug small programs to solve practical problems of a scientific nature.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9011,"Design, write and debug small programs to solve practical problems of a scientific nature.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9014,"Design, write and debug small programs to solve practical problems of a scientific nature.","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9055,"Design, write and debug small programs to solve practical problems of a scientific nature.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9067,"Design, write and debug small programs to solve practical problems of a scientific nature.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9071,"Design, write and debug small programs to solve practical problems of a scientific nature.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9077,"Design, write and debug small programs to solve practical problems of a scientific nature.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9164,"Design, write and debug small programs to solve practical problems of a scientific nature.","Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9208,"Design, write and debug small programs to solve practical problems of a scientific nature.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9253,"Design, write and debug small programs to solve practical problems of a scientific nature.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9289,"Design, write and debug small programs to solve practical problems of a scientific nature.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9318,"Design, write and debug small programs to solve practical problems of a scientific nature.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8602,Have a practical understanding of the processing of scientific data.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8606,Have a practical understanding of the processing of scientific data.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8654,Have a practical understanding of the processing of scientific data.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8823,Have a practical understanding of the processing of scientific data.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8852,Have a practical understanding of the processing of scientific data.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8856,Have a practical understanding of the processing of scientific data.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8863,Have a practical understanding of the processing of scientific data.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8900,Have a practical understanding of the processing of scientific data.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8939,Have a practical understanding of the processing of scientific data.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8953,Have a practical understanding of the processing of scientific data.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8963,Have a practical understanding of the processing of scientific data.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9044,Have a practical understanding of the processing of scientific data.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9058,Have a practical understanding of the processing of scientific data.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9109,Have a practical understanding of the processing of scientific data.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9113,Have a practical understanding of the processing of scientific data.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9132,Have a practical understanding of the processing of scientific data.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9202,Have a practical understanding of the processing of scientific data.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8519,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8639,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8844,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8971,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8973,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8993,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9019,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9096,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9204,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9207,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9228,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9276,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9280,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9306,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9420,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9421,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9422,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8213,Have an awareness of good program organisation.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8320,Have an awareness of good program organisation.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8341,Have an awareness of good program organisation.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8396,Have an awareness of good program organisation.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.8557,Have an awareness of good program organisation.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8586,Have an awareness of good program organisation.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.8590,Have an awareness of good program organisation.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8623,Have an awareness of good program organisation.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8713,Have an awareness of good program organisation.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8734,Have an awareness of good program organisation.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.8845,Have an awareness of good program organisation.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8854,Have an awareness of good program organisation.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8880,Have an awareness of good program organisation.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8959,Have an awareness of good program organisation.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9024,Have an awareness of good program organisation.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9032,Have an awareness of good program organisation.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9076,Have an awareness of good program organisation.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8541,Have an understanding of some widely-used algorithms.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.8780,Have an understanding of some widely-used algorithms.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.8804,Have an understanding of some widely-used algorithms.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8818,Have an understanding of some widely-used algorithms.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.8846,Have an understanding of some widely-used algorithms.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.8862,Have an understanding of some widely-used algorithms.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.8899,Have an understanding of some widely-used algorithms.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8921,Have an understanding of some widely-used algorithms.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.8936,Have an understanding of some widely-used algorithms.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8949,Have an understanding of some widely-used algorithms.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8951,Have an understanding of some widely-used algorithms.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.8956,Have an understanding of some widely-used algorithms.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.8981,Have an understanding of some widely-used algorithms.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9092,Have an understanding of some widely-used algorithms.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9156,Have an understanding of some widely-used algorithms.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9174,Have an understanding of some widely-used algorithms.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9229,Have an understanding of some widely-used algorithms.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.8784,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9028,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9039,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9059,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9060,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9070,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9075,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
0.9090,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9094,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9159,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9162,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9174,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9191,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9203,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
0.9215,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9227,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9292,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."

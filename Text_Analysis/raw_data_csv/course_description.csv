course,description
comp1100,"This course is the first of three core computer science courses on programming.
It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.
The course covers functional programming in depth, developing the core idea of functions operating on data structures.
Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.
Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.
The functional paradigm demonstrates elegant solutions to many programming problems.
The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.
Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.
The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
These include distributed software revision control systems.
The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.
Apply fundamental programming concepts, using a functional programming language, to solve simple problems.
Understand basic types and the benefits of static typing.
Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.
Describe, understand and evolve programs, via documentation, testing, and debugging.
Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.
Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).
Describe and apply alternative computational paradigms to simple problems.
Understand the legal context for protection of software as intellectual property."
comp2100,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.
Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.
Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).
The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.
The course also treats intellectual property considerations in software development and deployment.
Apply fundamental programming concepts for medium scale programs.
Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs
Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).
Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.
Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.
Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).
Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
Understand, apply, and analyse state and state machines in expressing computations.
Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions."
score,s1,s2
0.9451,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9281,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9263,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
0.9311,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9295,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Describe and apply alternative computational paradigms to simple problems.
0.9217,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9273,appreciate the building blocks of scientific and engineering software.,Describe and apply alternative computational paradigms to simple problems.
0.9421,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9369,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Describe and apply alternative computational paradigms to simple problems.
0.9196,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,Describe and apply alternative computational paradigms to simple problems.
0.9324,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
0.9206,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Describe and apply alternative computational paradigms to simple problems.
0.9109,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."

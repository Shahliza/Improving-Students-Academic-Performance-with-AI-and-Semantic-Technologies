score,s1,s2
0.9227,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9185,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.
0.9288,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9280,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9231,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9345,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.",The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
0.9237,appreciate the building blocks of scientific and engineering software.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9392,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9291,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9155,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9064,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9266,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9182,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."

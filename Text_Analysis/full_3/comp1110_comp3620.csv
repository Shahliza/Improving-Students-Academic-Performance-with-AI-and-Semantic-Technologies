score,s1,s2
0.8969,Artificial intelligence is the science that studies and develops methods of making computers more /intelligent/.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9387,"The focus of this course is on core AI techniques for search, knowledge representation and reasoning, planning, and designing intelligent agents.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9251,"The course also aims to give an overview of the historical, philosophical, and logical foundations of AI.",This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9127,"Identify problems that are amenable to solution by AI methods, and which AI methods may be suited to solving a given problem.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9095,"Formalise a given problem in the language/framework of different AI methods (e.g., as a search problem, as a constraint satisfaction problem, as a planning problem, etc).","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9395,"Implement basic AI algorithms (e.g., standard search or constraint propagation algorithms).","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9316,"Design and perform an empirical evaluation of different algorithms on a problem formalisation, and state the conclusions that the evaluation supports.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."

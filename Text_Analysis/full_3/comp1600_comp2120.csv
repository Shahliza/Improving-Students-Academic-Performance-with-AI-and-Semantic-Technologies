score,s1,s2
0.8525,"Real-world software development is a complex and dynamic activity involving people, technology and processes interacting within a complex environment of clients, users and other stakeholders while being observant of technological, physical, social, legal, and ethical constraints.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8711,"This course will empower students with the ability and confidence necessary to exercise critical thinking and professional judgment to select and apply appropriate knowledge, practices and tools to the development of non-trivial software systems.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8828,This will be achieved by introducing students to important design methodologies.,Design a Turing Machine which will accomplish simple tasks.
0.8881,We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8901,"We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value.",Design a Turing Machine which will accomplish simple tasks.
0.8518,Students will learn how practices and tools can be adapted to suit specific project needs and contexts.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8945,"Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8905,"Demonstrate an understanding of the following key software engineering activities within the context of a realistic software engineering process (Requirements, Design, Construction, Architectures, Testing, verification and validation)","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8842,"Demonstrate an ability to use professional judgement to select and apply appropriate knowledge, practices and tools to analyse, design and solve problems relating to the software engineering activities listed above.","Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8571,Demonstrate how practices and tools can be adapted to suit specific project needs and contexts.,Design a Turing Machine which will accomplish simple tasks.

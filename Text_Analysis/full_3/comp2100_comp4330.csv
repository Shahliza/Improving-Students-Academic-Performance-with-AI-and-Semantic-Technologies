score,s1,s2
0.9034,"Real-time and embedded systems are all around us. Controlling cars, trains, or aeroplanes, as well as mobile phones, cameras, or A/V equipment, embedded systems are a challenging and demanding part of computer science and engineering.",Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.
0.9388,This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).,The course also treats intellectual property considerations in software development and deployment.
0.9330,It also delivers the principles of fault tolerant systems and highly reliable systems.,The course also treats intellectual property considerations in software development and deployment.
0.9402,"Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods.","The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies."
0.9202,Formulate real-time constraints.,Apply fundamental programming concepts for medium scale programs.
0.9545,Employ standard real-time programming constructs.,Apply fundamental programming concepts for medium scale programs.
0.9263,Develop a concept to handle the requests level of reliability.,Apply fundamental programming concepts for medium scale programs.
0.8995,"Construct and implement an architecture for an asynchronous, distributed real-time system.","Understand, apply, and analyse state and state machines in expressing computations."
0.9449,Understand and consider constraints from physical dynamical systems.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9213,Participate significantly in the enhancement of the reliability (or analysis) of safety critical systems.,Explain how system components contribute to performance; understand Amdahlâ€™s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance

This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering. 
Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered. 
The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95. 
The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures. 
It will also look at practical methods of estimating and measuring algorithm/architecture performance.
The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.
appreciate the building blocks of scientific and engineering software.
demonstrate a basic knowledge of numerical computing using an appropriate programming language.
be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.
have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.
have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.
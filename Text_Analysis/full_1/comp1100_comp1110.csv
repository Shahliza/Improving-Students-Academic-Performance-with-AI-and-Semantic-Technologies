score,s1,s2
0.9584,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9468,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9523,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
0.9361,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
0.9426,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
0.9291,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9551,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9341,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9276,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
1.0000,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9870,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
0.9474,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
0.9558,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9841,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
0.9922,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
0.9394,"Understand the basics of event-driven programming, and its use in constructing GUIs","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
0.9350,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Describe, understand and evolve programs, via documentation, testing, and debugging."

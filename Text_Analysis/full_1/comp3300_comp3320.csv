score,s1,s2
0.8997,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,The lectures will also address recent literature describing advances in operating systems.
0.9226,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,demonstrate experience in the design and implementation of a large software system.
0.9087,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9364,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9293,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9377,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9231,appreciate the building blocks of scientific and engineering software.,identify and describe the reasons for many architectural features of contemporary machines.
0.9299,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9256,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9111,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,identify and describe the reasons for many architectural features of contemporary machines.
0.9041,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,demonstrate experience in the design and implementation of a large software system.
0.9273,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9453,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."

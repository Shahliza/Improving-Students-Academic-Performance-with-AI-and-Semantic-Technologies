score,s1,s2
0.9497,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9394,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9419,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",Testing and debugging are seen as integral to the programming enterprise.
0.9414,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9203,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9122,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,The course will be taught using one or more programming languages which are widely applicable to scientific work.
0.9292,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9422,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9304,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",Testing and debugging are seen as integral to the programming enterprise.
0.9227,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9523,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9207,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9329,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.",Testing and debugging are seen as integral to the programming enterprise.
0.9228,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9094,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9420,"Understand the basics of event-driven programming, and its use in constructing GUIs",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9253,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Design, write and debug small programs to solve practical problems of a scientific nature."

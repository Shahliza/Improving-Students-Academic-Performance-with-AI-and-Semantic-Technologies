score,s1,s2
0.9013,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9244,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9287,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9181,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9192,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9260,Demonstrate proficiency in software reverse engineering.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9144,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9221,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.

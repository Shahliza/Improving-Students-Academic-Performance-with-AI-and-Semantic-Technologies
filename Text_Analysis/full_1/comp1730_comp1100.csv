score,s1,s2
0.9289,This course is the first of three core computer science courses on programming.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9550,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9417,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9508,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9230,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9370,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9425,The functional paradigm demonstrates elegant solutions to many programming problems.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9431,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9171,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9375,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.8971,These include distributed software revision control systems.,Testing and debugging are seen as integral to the programming enterprise.
0.9227,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9549,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9219,Understand basic types and the benefits of static typing.,Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.8997,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.",Be able to describe and design small computer programs using both procedural and object-oriented methodologies.
0.9434,"Describe, understand and evolve programs, via documentation, testing, and debugging.",Testing and debugging are seen as integral to the programming enterprise.
0.9278,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Design, write and debug small programs to solve practical problems of a scientific nature."
0.9076,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).",Have an understanding of practical aspects of machine architecture including finite precision and rounding errors.
0.9408,Describe and apply alternative computational paradigms to simple problems.,This course teaches introductory programming within a problem solving framework applicable to the sciences.
0.9071,Understand the legal context for protection of software as intellectual property.,Have a practical understanding of the processing of scientific data.

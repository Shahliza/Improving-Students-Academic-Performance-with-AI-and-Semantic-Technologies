score,s1,s2
0.9078,This course is the first of three core computer science courses on programming.,"Furthermore, it also teaches students about the ethics of doing data-driven social science research."
0.9380,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,Communicate the process of formulating and solving computational social science problems to a team of professionals with computing and/or social sciences.
0.9262,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",Computational Methods for Network Science covers the essentials of using computational approaches to pose and answer social science research problems.
0.9313,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",In doing so it also covers a selected set of network algorithms in depth.
0.8972,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","Analyze results from network algorithms, and articulate their limitations."
0.9394,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","This includes random graph models, homophily and friendship paradox, influence and contagion in networks, markets and network games, network resilence."
0.9357,The functional paradigm demonstrates elegant solutions to many programming problems.,"Analyze results from network algorithms, and articulate their limitations."
0.9168,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.","Analyze results from network algorithms, and articulate their limitations."
0.8968,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Analyze results from network algorithms, and articulate their limitations."
0.9292,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,The course equips the students with in-depth knowledge and hands-on experience in working with network data to study social processes at both the individual and aggregate levels.
0.8934,These include distributed software revision control systems.,Apply network analysis algorithms in practical contexts.
0.9348,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",The course equips the students with in-depth knowledge and hands-on experience in working with network data to study social processes at both the individual and aggregate levels.
0.9304,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",Apply network analysis algorithms in practical contexts.
0.9174,Understand basic types and the benefits of static typing.,"Analyze results from network algorithms, and articulate their limitations."
0.8795,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","Analyze results from network algorithms, and articulate their limitations."
0.9113,"Describe, understand and evolve programs, via documentation, testing, and debugging.","Analyze results from network algorithms, and articulate their limitations."
0.9163,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Analyze results from network algorithms, and articulate their limitations."
0.9139,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","Analyze results from network algorithms, and articulate their limitations."
0.9528,Describe and apply alternative computational paradigms to simple problems.,"Analyze results from network algorithms, and articulate their limitations."
0.9051,Understand the legal context for protection of software as intellectual property.,Demonstrate a working understanding in the ethical concerns of data drive analysis and experiments in human behavior.

score,s1,s2
0.9375,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,This will be achieved by introducing students to important design methodologies.
0.9357,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9493,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9259,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.9071,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9121,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,This will be achieved by introducing students to important design methodologies.
0.9146,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9221,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."
0.9390,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9376,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.9220,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."
0.9069,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Demonstrate an understanding of the following key software engineering activities within the context of a realistic software engineering process (Requirements, Design, Construction, Architectures, Testing, verification and validation)"
0.9436,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Demonstrate an understanding of the following key software engineering activities within the context of a realistic software engineering process (Requirements, Design, Construction, Architectures, Testing, verification and validation)"
0.8985,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Demonstrate an understanding of the following key software engineering activities within the context of a realistic software engineering process (Requirements, Design, Construction, Architectures, Testing, verification and validation)"
0.8976,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."
0.9211,"Understand the basics of event-driven programming, and its use in constructing GUIs","We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."
0.9451,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."

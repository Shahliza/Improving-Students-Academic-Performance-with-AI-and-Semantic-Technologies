score,s1,s2
0.8903,This course is the first of three core computer science courses on programming.,"The course provides the essential foundations which allow students to continue in a more in-depth cyber security career, yet can also be used a standalone unit to provide a self-contained set of knowledge."
0.9335,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,"The course provides the essential foundations which allow students to continue in a more in-depth cyber security career, yet can also be used a standalone unit to provide a self-contained set of knowledge."
0.8946,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",Apply cyber security principles in a practical context.
0.9136,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",Apply cyber security principles in a practical context.
0.9072,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","This includes principles of secure design, secrets minimization, least privilege, isolation, separation and encapsulation."
0.9199,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","This includes principles of secure design, secrets minimization, least privilege, isolation, separation and encapsulation."
0.9147,The functional paradigm demonstrates elegant solutions to many programming problems.,Apply cyber security principles in a practical context.
0.9165,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.","The course provides the essential foundations which allow students to continue in a more in-depth cyber security career, yet can also be used a standalone unit to provide a self-contained set of knowledge."
0.9040,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","This includes principles of secure design, secrets minimization, least privilege, isolation, separation and encapsulation."
0.9483,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,"The course provides the essential foundations which allow students to continue in a more in-depth cyber security career, yet can also be used a standalone unit to provide a self-contained set of knowledge."
0.8849,These include distributed software revision control systems.,Apply cyber security principles in a practical context.
0.9373,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The course provides the essential foundations which allow students to continue in a more in-depth cyber security career, yet can also be used a standalone unit to provide a self-contained set of knowledge."
0.9273,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",Apply cyber security principles in a practical context.
0.9052,Understand basic types and the benefits of static typing.,Define and identify cyber security principles and their violation.
0.8807,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","This includes principles of secure design, secrets minimization, least privilege, isolation, separation and encapsulation."
0.8986,"Describe, understand and evolve programs, via documentation, testing, and debugging.","This includes principles of secure design, secrets minimization, least privilege, isolation, separation and encapsulation."
0.9121,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","This includes principles of secure design, secrets minimization, least privilege, isolation, separation and encapsulation."
0.9127,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","This includes principles of secure design, secrets minimization, least privilege, isolation, separation and encapsulation."
0.9317,Describe and apply alternative computational paradigms to simple problems.,Apply cyber security principles in a practical context.
0.9235,Understand the legal context for protection of software as intellectual property.,Apply cyber security principles in a practical context.

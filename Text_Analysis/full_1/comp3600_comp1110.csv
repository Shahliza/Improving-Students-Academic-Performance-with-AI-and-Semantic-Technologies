score,s1,s2
0.9133,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,This course provides basic approaches for designing and analysing algorithms and data structures.
0.9357,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",This course provides basic approaches for designing and analysing algorithms and data structures.
0.9199,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9159,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9313,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9112,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,"Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9437,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9323,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"It will cover various data structures and algorithm design techniques for solving these two classes of problems, as well as basic performance measures and analysis techniques for solving such problems."
0.9279,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Expertly apply the most effective algorithmic techniques including dynamic programming, greedy policy, and divide-and-conquer, to solve some practical problems."
0.8805,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course provides basic approaches for designing and analysing algorithms and data structures.
0.9464,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9145,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9214,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Expertly apply the most effective algorithmic techniques including dynamic programming, greedy policy, and divide-and-conquer, to solve some practical problems."
0.9393,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Expertly apply the most effective algorithmic techniques including dynamic programming, greedy policy, and divide-and-conquer, to solve some practical problems."
0.9663,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Expertly apply the most effective algorithmic techniques including dynamic programming, greedy policy, and divide-and-conquer, to solve some practical problems."
0.9366,"Understand the basics of event-driven programming, and its use in constructing GUIs","Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9168,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."

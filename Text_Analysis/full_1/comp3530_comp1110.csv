score,s1,s2
0.9182,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,describe the holistic and multi-disciplinary nature of complex engineering projects.
0.9175,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",explain the role of Software Engineering within the broader context of Systems Engineering.
0.9373,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8970,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.9007,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8994,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9091,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9035,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9436,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9205,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.9166,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.9135,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9426,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9090,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9064,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9142,"Understand the basics of event-driven programming, and its use in constructing GUIs",explain the role of Software Engineering within the broader context of Systems Engineering.
0.9358,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."

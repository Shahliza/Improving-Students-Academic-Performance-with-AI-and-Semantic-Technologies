score,s1,s2
0.9312,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9316,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9259,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9150,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9279,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9127,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,"Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9292,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.",Employ standard real-time programming constructs.
0.9247,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9362,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.8955,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9458,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",Employ standard real-time programming constructs.
0.9021,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9239,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9203,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9263,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9454,"Understand the basics of event-driven programming, and its use in constructing GUIs",Employ standard real-time programming constructs.
0.9299,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."

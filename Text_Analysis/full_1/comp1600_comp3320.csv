score,s1,s2
0.8757,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,Design a Turing Machine which will accomplish simple tasks.
0.9091,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9074,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.9198,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.",Design a Turing Machine which will accomplish simple tasks.
0.9031,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Design a Turing Machine which will accomplish simple tasks.
0.9258,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8959,appreciate the building blocks of scientific and engineering software.,Design a Turing Machine which will accomplish simple tasks.
0.9269,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Design a Turing Machine which will accomplish simple tasks.
0.9019,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Design a Turing Machine which will accomplish simple tasks.
0.9022,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Apply the concepts of standard mathematical logic to produce proofs or refutations of well-formed propositions or arguments phrased in English or in a variety of formal notations (first order logic, discrete mathematics or Hoare Logic)."
0.8767,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.8969,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9116,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Design a Turing Machine which will accomplish simple tasks.

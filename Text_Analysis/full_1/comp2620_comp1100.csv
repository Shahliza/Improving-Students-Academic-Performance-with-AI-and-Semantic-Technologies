score,s1,s2
0.8840,This course is the first of three core computer science courses on programming.,"An introductory course in formal logic, dealing with propositional and predicate logic."
0.8932,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,Critically assess and compare philosophical views on issues arising from elementary logic.
0.9121,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.","An introductory course in formal logic, dealing with propositional and predicate logic."
0.9192,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",Express reasoning problems using first order logical notation.
0.9109,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.",Construct natural deduction proofs in first order logic and translate between calculi.
0.9286,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.",Construct natural deduction proofs in first order logic and translate between calculi.
0.9344,The functional paradigm demonstrates elegant solutions to many programming problems.,Express reasoning problems using first order logical notation.
0.9152,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",Critically assess and compare philosophical views on issues arising from elementary logic.
0.8915,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.",Construct natural deduction proofs in first order logic and translate between calculi.
0.8859,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,Critically assess and compare philosophical views on issues arising from elementary logic.
0.8640,These include distributed software revision control systems.,Express reasoning problems using first order logical notation.
0.8855,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",Critically assess and compare philosophical views on issues arising from elementary logic.
0.9269,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",Express reasoning problems using first order logical notation.
0.9104,Understand basic types and the benefits of static typing.,Basic semantic concepts will be discussed.
0.8899,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.",Explain the relationship between rules of deduction and the semantics of logic.
0.8802,"Describe, understand and evolve programs, via documentation, testing, and debugging.",Critically assess and compare philosophical views on issues arising from elementary logic.
0.9057,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.",Construct natural deduction proofs in first order logic and translate between calculi.
0.9018,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).",Construct natural deduction proofs in first order logic and translate between calculi.
0.9421,Describe and apply alternative computational paradigms to simple problems.,Critically assess and compare philosophical views on issues arising from elementary logic.
0.8908,Understand the legal context for protection of software as intellectual property.,Critically assess and compare philosophical views on issues arising from elementary logic.

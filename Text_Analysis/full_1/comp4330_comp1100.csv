score,s1,s2
0.9037,This course is the first of three core computer science courses on programming.,This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9411,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9304,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9396,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9124,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9483,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9371,The functional paradigm demonstrates elegant solutions to many programming problems.,Employ standard real-time programming constructs.
0.9217,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",Employ standard real-time programming constructs.
0.9141,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9202,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9101,These include distributed software revision control systems.,Employ standard real-time programming constructs.
0.8955,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9423,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",Employ standard real-time programming constructs.
0.9289,Understand basic types and the benefits of static typing.,Employ standard real-time programming constructs.
0.8765,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.",Employ standard real-time programming constructs.
0.9091,"Describe, understand and evolve programs, via documentation, testing, and debugging.",This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).
0.9209,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9319,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","Techniques which are introduced include real-time calculus, real-time scheduling, elementary sensor data filtering and fusion methods, error recovery strategies, and graceful degradation methods."
0.9426,Describe and apply alternative computational paradigms to simple problems.,Understand and consider constraints from physical dynamical systems.
0.9081,Understand the legal context for protection of software as intellectual property.,This course delivers foundations of real-time analysis and implementation of systems which are interconnected with the physical world (embedded systems).

score,s1,s2
0.9244,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9249,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9266,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.",have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.
0.9288,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8936,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9185,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.
0.9280,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9345,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9237,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",appreciate the building blocks of scientific and engineering software.
0.9037,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9392,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9244,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9333,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9202,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9092,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9265,"Understand the basics of event-driven programming, and its use in constructing GUIs","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9188,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.",appreciate the building blocks of scientific and engineering software.

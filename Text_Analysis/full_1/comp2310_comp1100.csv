score,s1,s2
0.9266,This course is the first of three core computer science courses on programming.,This course is based on the foundations set by the previous course on computer organisation.
0.9191,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9203,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",It expands particularly into all forms of concurrent programming including aspects of massively parallel programming.
0.9363,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",These include the basics of routing and dependable protocols.
0.9147,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9244,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9347,The functional paradigm demonstrates elegant solutions to many programming problems.,These include the basics of routing and dependable protocols.
0.9245,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",More specific networking aspects follow on from message passing as a core concurrency construct.
0.9038,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9289,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,This course is based on the foundations set by the previous course on computer organisation.
0.9158,These include distributed software revision control systems.,These include the basics of routing and dependable protocols.
0.9108,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course is based on the foundations set by the previous course on computer organisation.
0.9291,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.","Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9365,Understand basic types and the benefits of static typing.,These include the basics of routing and dependable protocols.
0.8884,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.",Distinguish as well as connect conceptual concurrency with physical parallelism at all levels of a distributed system.
0.9244,"Describe, understand and evolve programs, via documentation, testing, and debugging.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9340,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9224,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9517,Describe and apply alternative computational paradigms to simple problems.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9015,Understand the legal context for protection of software as intellectual property.,More specific networking aspects follow on from message passing as a core concurrency construct.

score,s1,s2
1.0000,This course is the first of three core computer science courses on programming.,This course is the first of three core computer science courses on programming.
1.0000,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.
1.0000,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.","Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms."
1.0000,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.","The course covers functional programming in depth, developing the core idea of functions operating on data structures."
1.0000,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
1.0000,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams."
1.0000,The functional paradigm demonstrates elegant solutions to many programming problems.,The functional paradigm demonstrates elegant solutions to many programming problems.
1.0000,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.","The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences."
1.0000,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects."
1.0000,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.
1.0000,These include distributed software revision control systems.,These include distributed software revision control systems.
1.0000,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
1.0000,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.","Apply fundamental programming concepts, using a functional programming language, to solve simple problems."
1.0000,Understand basic types and the benefits of static typing.,Understand basic types and the benefits of static typing.
1.0000,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation."
1.0000,"Describe, understand and evolve programs, via documentation, testing, and debugging.","Describe, understand and evolve programs, via documentation, testing, and debugging."
1.0000,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition."
1.0000,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming)."
1.0000,Describe and apply alternative computational paradigms to simple problems.,Describe and apply alternative computational paradigms to simple problems.
1.0000,Understand the legal context for protection of software as intellectual property.,Understand the legal context for protection of software as intellectual property.

score,s1,s2
0.9318,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.","Throughout the course there will be meetings where students discuss all aspects of their projects, as well as a set of lectures about different aspects of being a successful researcher."
0.9194,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,This course provides students with hands-on experience of being a researcher in the computing discipline.
0.9079,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8900,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9267,The course also treats intellectual property considerations in software development and deployment.,This course provides students with hands-on experience of being a researcher in the computing discipline.
0.9188,Apply fundamental programming concepts for medium scale programs.,Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8753,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8640,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9142,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.",Have a basis of the knowledge and skills in research projects that can be built upon for more substantial projects.
0.9005,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.",Have a basis of the knowledge and skills in research projects that can be built upon for more substantial projects.
0.8604,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).",Have a basis of the knowledge and skills in research projects that can be built upon for more substantial projects.
0.9066,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,Have a basis of the knowledge and skills in research projects that can be built upon for more substantial projects.
0.9016,"Understand, apply, and analyse state and state machines in expressing computations.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9015,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9224,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Have a basis of the knowledge and skills in research projects that can be built upon for more substantial projects.

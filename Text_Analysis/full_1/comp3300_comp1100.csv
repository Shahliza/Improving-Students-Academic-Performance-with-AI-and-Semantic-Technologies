score,s1,s2
0.8875,This course is the first of three core computer science courses on programming.,The lectures will also address recent literature describing advances in operating systems.
0.9106,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9166,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.","define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.9240,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.","define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.9255,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9107,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9177,The functional paradigm demonstrates elegant solutions to many programming problems.,identify and describe the reasons for many architectural features of contemporary machines.
0.9146,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",The lectures will also address recent literature describing advances in operating systems.
0.9133,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9034,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9079,These include distributed software revision control systems.,"define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.8818,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9274,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9166,Understand basic types and the benefits of static typing.,identify and describe the reasons for many architectural features of contemporary machines.
0.8827,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9282,"Describe, understand and evolve programs, via documentation, testing, and debugging.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9142,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9053,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9310,Describe and apply alternative computational paradigms to simple problems.,identify and describe the reasons for many architectural features of contemporary machines.
0.8984,Understand the legal context for protection of software as intellectual property.,identify and describe the reasons for many architectural features of contemporary machines.

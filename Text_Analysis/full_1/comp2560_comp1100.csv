score,s1,s2
0.9187,This course is the first of three core computer science courses on programming.,This course provides students with hands-on experience of being a researcher in the computing discipline.
0.9467,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,This course provides students with hands-on experience of being a researcher in the computing discipline.
0.9208,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9157,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8653,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8976,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9077,The functional paradigm demonstrates elegant solutions to many programming problems.,Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9152,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8641,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","It exposes the students to research skills, problem solving skills, team work and project management."
0.9486,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,This course provides students with hands-on experience of being a researcher in the computing discipline.
0.8655,These include distributed software revision control systems.,Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9311,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course provides students with hands-on experience of being a researcher in the computing discipline.
0.9031,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8918,Understand basic types and the benefits of static typing.,Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8543,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8846,"Describe, understand and evolve programs, via documentation, testing, and debugging.",Have a basis of the knowledge and skills in research projects that can be built upon for more substantial projects.
0.8755,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8755,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).",Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.9294,Describe and apply alternative computational paradigms to simple problems.,Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.
0.8981,Understand the legal context for protection of software as intellectual property.,Understand the main principles and concepts in at least two areas of computer science that are being actively shaped by research.

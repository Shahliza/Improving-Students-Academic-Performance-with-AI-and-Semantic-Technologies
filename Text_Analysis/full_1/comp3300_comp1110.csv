score,s1,s2
0.9260,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,demonstrate experience in the design and implementation of a large software system.
0.9169,"Major foci are data structures, object oriented programming, and an introduction to software engineering.",The lectures will also address recent literature describing advances in operating systems.
0.9242,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9098,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.8973,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.",identify and describe the reasons for many architectural features of contemporary machines.
0.9085,The important role of standard libraries and their collection types will be emphasized. Â GUI programming will be introduced.,"identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9231,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9282,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,"define and analyse the structure of operating systems in general, especially those that support communicating processes."
0.9063,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.",demonstrate experience in the design and implementation of a large software system.
0.8818,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9289,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9379,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9435,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9168,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.8972,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","The following topics are addressed: system programming and its facilities (including I/O, signals, job control, interprocess communication, sockets, transport layers, remote operations), system calls and their relation to the system libraries, process management and coordination, implementation of message passing, memory management, interrupt handling, real-time clocks, device-independent input/output, serial-line drivers, network communication, disk drivers, deadlock avoidance, scheduling paradigms, file systems, security."
0.9298,"Understand the basics of event-driven programming, and its use in constructing GUIs","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."
0.9198,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","identify and evaluate features of the system library of a particular operating system, and be able to apply this knowledge to program small applications."

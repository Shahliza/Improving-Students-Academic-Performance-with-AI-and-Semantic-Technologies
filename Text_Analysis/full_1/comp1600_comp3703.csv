score,s1,s2
0.8644,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties."
0.9046,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8963,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages."
0.8762,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,Design a Turing Machine which will accomplish simple tasks.
0.8826,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Prove simple programs correct using Hoare Logic.
0.9062,Demonstrate proficiency in software reverse engineering.,Design a Turing Machine which will accomplish simple tasks.
0.8973,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.",Prove simple programs correct using Hoare Logic.
0.8822,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Design a Turing Machine which will accomplish simple tasks.

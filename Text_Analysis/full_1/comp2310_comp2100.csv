score,s1,s2
0.9451,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process.",This course is based on the foundations set by the previous course on computer organisation.
0.9156,Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9470,"Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9278,"The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9261,The course also treats intellectual property considerations in software development and deployment.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9369,Apply fundamental programming concepts for medium scale programs.,These include the basics of routing and dependable protocols.
0.9107,"Understand basic types and the benefits of static typing, with understanding of generics, subtyping, and overloading, and their roles in structuring programs",More specific networking aspects follow on from message passing as a core concurrency construct.
0.9362,"Map programming language abstractions through to execution environment; use non-source (text) internal representations of programs (e.g., abstract syntax trees); sketch low-level run-time representations of core language constructs (objects and closures).","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9385,"Describe contractual specifications, analyse documentation and specifications against other’s code, develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; explain the importance of correctness for quality software; understand common coding errors and how to avoid them; practice fundamental defensive programming; understand principles of secure design.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9451,"Use, implement, and evaluate more advanced data structures and associated algorithms; discuss factors other than computational efficiency for evaluating software; create, implement, debug, and evaluate algorithms for solving problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type; analyse design and implementation alternatives.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9103,"Apply basic algorithmic analysis to simple algorithms; use big-O notation formally, upper lower, and expected case bounds; use and solve recurrence relations; use appropriate algorithmic approaches to solve problems (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming, branch-and-bound).","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9253,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9394,"Understand, apply, and analyse state and state machines in expressing computations.","Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9303,Understand fundamental concepts of GUIs and user interfaces; understand the basics of modeling and simulation.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9190,"Contrast the concepts of copyright, patenting, and trademarks as mechanisms for protecting intellectual property, within the legal context for these mechanisms;  understand, analyse, and evaluate ethical/social tradeoffs in technical decisions, evaluating stakeholder positions.",Distinguish as well as connect conceptual concurrency with physical parallelism at all levels of a distributed system.

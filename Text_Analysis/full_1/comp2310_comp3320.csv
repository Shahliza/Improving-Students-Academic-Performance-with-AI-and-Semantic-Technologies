score,s1,s2
0.9068,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,"Following on from the previous course, the fields of operating systems and networking will also be expanded on."
0.9274,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9199,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Following on from the previous course, the fields of operating systems and networking will also be expanded on."
0.9361,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9322,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,"This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9369,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9248,appreciate the building blocks of scientific and engineering software.,These include the basics of routing and dependable protocols.
0.9145,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,These include the basics of routing and dependable protocols.
0.9430,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9192,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9028,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems."
0.9406,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,"This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."
0.9256,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.","This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements)."

score,s1,s2
0.8943,This course is the first of three core computer science courses on programming.,This course provides basic approaches for designing and analysing algorithms and data structures.
0.9271,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,This course provides basic approaches for designing and analysing algorithms and data structures.
0.9353,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",This course provides basic approaches for designing and analysing algorithms and data structures.
0.9455,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",This course provides basic approaches for designing and analysing algorithms and data structures.
0.9258,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9533,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9303,The functional paradigm demonstrates elegant solutions to many programming problems.,"Expertly apply the most effective algorithmic techniques including dynamic programming, greedy policy, and divide-and-conquer, to solve some practical problems."
0.9122,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",This course provides basic approaches for designing and analysing algorithms and data structures.
0.9257,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9078,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,"It will cover various data structures and algorithm design techniques for solving these two classes of problems, as well as basic performance measures and analysis techniques for solving such problems."
0.8779,These include distributed software revision control systems.,"Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.8805,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",This course provides basic approaches for designing and analysing algorithms and data structures.
0.9477,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.","Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9096,Understand basic types and the benefits of static typing.,"Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.8818,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9141,"Describe, understand and evolve programs, via documentation, testing, and debugging.","Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9482,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Expertly apply the most effective algorithmic techniques including dynamic programming, greedy policy, and divide-and-conquer, to solve some practical problems."
0.9661,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","Expertly apply the most effective algorithmic techniques including dynamic programming, greedy policy, and divide-and-conquer, to solve some practical problems."
0.9453,Describe and apply alternative computational paradigms to simple problems.,Define and analyse time and space complexities of algorithms.
0.8827,Understand the legal context for protection of software as intellectual property.,Define and analyse time and space complexities of algorithms.

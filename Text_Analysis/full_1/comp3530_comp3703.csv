score,s1,s2
0.9029,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9084,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9302,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.8957,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9218,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9058,Demonstrate proficiency in software reverse engineering.,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9218,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9261,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."

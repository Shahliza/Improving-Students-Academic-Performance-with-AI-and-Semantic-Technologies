score,s1,s2
0.9130,This course is the first of three core computer science courses on programming.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9451,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9267,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9311,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.","The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures."
0.9217,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9240,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9182,The functional paradigm demonstrates elegant solutions to many programming problems.,demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9252,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.","The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95."
0.8987,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9177,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.
0.9003,These include distributed software revision control systems.,appreciate the building blocks of scientific and engineering software.
0.9037,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9421,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",demonstrate a basic knowledge of numerical computing using an appropriate programming language.
0.9096,Understand basic types and the benefits of static typing.,appreciate the building blocks of scientific and engineering software.
0.8810,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9096,"Describe, understand and evolve programs, via documentation, testing, and debugging.",It will also look at practical methods of estimating and measuring algorithm/architecture performance.
0.9217,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems."
0.9105,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).",be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.9369,Describe and apply alternative computational paradigms to simple problems.,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.
0.8998,Understand the legal context for protection of software as intellectual property.,appreciate the building blocks of scientific and engineering software.

score,s1,s2
1.0000,This course introduces students to the fundamentals of software development with a substantial group software project at its center.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
1.0000,"Major foci are data structures, object oriented programming, and an introduction to software engineering.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
1.0000,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
1.0000,"Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
1.0000,"Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing.","Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing."
1.0000,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.,The important role of standard libraries and their collection types will be emphasized.  GUI programming will be introduced.
1.0000,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
1.0000,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.,The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.
1.0000,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
1.0000,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
1.0000,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
1.0000,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
1.0000,"Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
1.0000,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
1.0000,"Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic).","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
1.0000,"Understand the basics of event-driven programming, and its use in constructing GUIs","Understand the basics of event-driven programming, and its use in constructing GUIs"
1.0000,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."

score,s1,s2
0.9278,This course is the first of three core computer science courses on programming.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9482,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9399,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9551,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9445,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9551,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9568,The functional paradigm demonstrates elegant solutions to many programming problems.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9361,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.","Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming."
0.9319,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9584,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9004,These include distributed software revision control systems.,"Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
1.0000,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience."
0.9870,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9314,Understand basic types and the benefits of static typing.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.9475,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9558,"Describe, understand and evolve programs, via documentation, testing, and debugging.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9841,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9922,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","Apply basic algorithmic analysis to simple algorithms; use appropriate algorithmic approaches to solve problems (brute-force, divide-and-conquer, recursive backtracking, heuristic)."
0.9503,Describe and apply alternative computational paradigms to simple problems.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9053,Understand the legal context for protection of software as intellectual property.,"Understand the basics of event-driven programming, and its use in constructing GUIs"

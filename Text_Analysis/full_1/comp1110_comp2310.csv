score,s1,s2
0.9331,This course is based on the foundations set by the previous course on computer organisation.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9330,It expands particularly into all forms of concurrent programming including aspects of massively parallel programming.,"Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9375,"This course introduces all basic mechanisms to analyse, design, and manage concurrent, single computer-node (multicore) as well as distributed applications (e.g. as performance or dependability enhancements).","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9086,"Following on from the previous course, the fields of operating systems and networking will also be expanded on.","Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9157,"On the operating system side aspects of security, scheduling algorithms and memory management are discussed.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9268,More specific networking aspects follow on from message passing as a core concurrency construct.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9382,These include the basics of routing and dependable protocols.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9105,"Model, design and program concurrent systems.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.9378,"Select appropriate modeling techniques, tools and mechanisms to solve a range of problems in concurrent and distributed systems.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9068,This includes the appropriate programming language and runtime environment for the task at hand.,"Understand the basics of event-driven programming, and its use in constructing GUIs"
0.8914,Analyse and debug concurrent programs.,"Use, implement, and evaluate fundamental data structures and associated algorithms; create, implement, debug, and evaluate algorithms for solving substantial problems, including recursively, using divide-and-conquer, and via decomposition; implement an abstract data type."
0.9191,"Understand the aspects of an operating system concerning scheduling, protection and memory management.","Distinguish language definition from implementation, syntax and parsing from semantics and evaluation, understand how program state maps to memory (globals, local, heap), and understand the implications of heap reachability for memory management."
0.9177,Employ message passing locally and over networks to construct distributed systems.,"The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types."
0.9267,Distinguish as well as connect conceptual concurrency with physical parallelism at all levels of a distributed system.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9106,Identify core aspects of operating systems and networks irrespective of the specific system at hand.,"Understand the basics of event-driven programming, and its use in constructing GUIs"

score,s1,s2
0.8925,This course is the first of three core computer science courses on programming.,"This course will provide an introduction to the field of Human-Computer Interaction and will introduce students to key interaction and experience design paradigms, approaches and methods."
0.9422,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,"This course will provide an introduction to the field of Human-Computer Interaction and will introduce students to key interaction and experience design paradigms, approaches and methods."
0.9239,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.","This course will provide an introduction to the field of Human-Computer Interaction and will introduce students to key interaction and experience design paradigms, approaches and methods."
0.9062,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.","The course will equip students with theory, methods, and techniques to investigate different design situations, develop novel design ideas, and ask critical questions about the role of technology in society."
0.8696,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","The course will equip students with theory, methods, and techniques to investigate different design situations, develop novel design ideas, and ask critical questions about the role of technology in society."
0.9081,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","Investigate the activities and practices of a design space using design research methods, to identify opportunities and issues for design intervention."
0.8993,The functional paradigm demonstrates elegant solutions to many programming problems.,"Differentiate between design paradigms, approaches, and methods and explain their applicability to different design contexts."
0.9161,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.","Differentiate between design paradigms, approaches, and methods and explain their applicability to different design contexts."
0.8701,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Investigate the activities and practices of a design space using design research methods, to identify opportunities and issues for design intervention."
0.9287,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,"This course will provide an introduction to the field of Human-Computer Interaction and will introduce students to key interaction and experience design paradigms, approaches and methods."
0.8794,These include distributed software revision control systems.,"Characterise key aspects of human-computer interaction, such as interaction design, the user experience, and user interfaces."
0.9246,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","The course will equip students with theory, methods, and techniques to investigate different design situations, develop novel design ideas, and ask critical questions about the role of technology in society."
0.9020,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.","Differentiate between design paradigms, approaches, and methods and explain their applicability to different design contexts."
0.8891,Understand basic types and the benefits of static typing.,"Investigate the activities and practices of a design space using design research methods, to identify opportunities and issues for design intervention."
0.8775,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","Differentiate between design paradigms, approaches, and methods and explain their applicability to different design contexts."
0.9174,"Describe, understand and evolve programs, via documentation, testing, and debugging.","Ideate, prototype, and evaluate novel technology design ideas and their use in context."
0.8966,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","The course will equip students with theory, methods, and techniques to investigate different design situations, develop novel design ideas, and ask critical questions about the role of technology in society."
0.8891,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","Investigate the activities and practices of a design space using design research methods, to identify opportunities and issues for design intervention."
0.9336,Describe and apply alternative computational paradigms to simple problems.,"Differentiate between design paradigms, approaches, and methods and explain their applicability to different design contexts."
0.9096,Understand the legal context for protection of software as intellectual property.,"Characterise key aspects of human-computer interaction, such as interaction design, the user experience, and user interfaces."

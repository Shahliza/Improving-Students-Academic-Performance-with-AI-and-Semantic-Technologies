score,s1,s2
0.8943,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","It will cover various data structures and algorithm design techniques for solving these two classes of problems, as well as basic performance measures and analysis techniques for solving such problems."
0.9113,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Display an advanced understanding of a variety of algorithms, including linear selection, minimum spanning trees, single source shortest path, Huffman coding, etc, with real-life applications and the resource requirements."
0.9276,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","It will cover various data structures and algorithm design techniques for solving these two classes of problems, as well as basic performance measures and analysis techniques for solving such problems."
0.9000,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,This course provides basic approaches for designing and analysing algorithms and data structures.
0.9101,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,"It will cover various data structures and algorithm design techniques for solving these two classes of problems, as well as basic performance measures and analysis techniques for solving such problems."
0.9084,Demonstrate proficiency in software reverse engineering.,"Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9153,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Demonstrate experience in the design and implementation of algorithms for practical problems, using languages like C, C++."
0.9253,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Define and analyse time and space complexities of algorithms.

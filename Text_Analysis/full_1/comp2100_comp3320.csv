score,s1,s2
0.9196,This course provides an introduction to High Performance Computing with an orientation towards applications in science and engineering.,The course also treats intellectual property considerations in software development and deployment.
0.9317,Aspects of numerical computing and the design and construction of sophisticated scientific software will be considered.,The course also treats intellectual property considerations in software development and deployment.
0.9284,"The focus will be on the C and C++ programming languages, although reflecting the reality of modern scientific computation this course will also touch on other languages such as Python, Java and FORTRAN95.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9270,"The course will study high performance computer architectures, including modern parallel processors, and will describe how an algorithm interacts with these architectures.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9371,It will also look at practical methods of estimating and measuring algorithm/architecture performance.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9417,"The following topics will be addressed: the C++ programming language; basic numerical computing from aspects of floating point error analysis to algorithms for solving differential equations; the engineering of scientific software; general high performance computing concepts and architectural principles; modern scalar architectures and their memory structure; performance and programmability issues, and program analysis techniques for high performance computing; parallel computing paradigms and programming using the OpenMP standard; trends in HPC systems.","Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them)."
0.9330,appreciate the building blocks of scientific and engineering software.,Apply fundamental programming concepts for medium scale programs.
0.9320,demonstrate a basic knowledge of numerical computing using an appropriate programming language.,Apply fundamental programming concepts for medium scale programs.
0.9351,be competent in experimental computing in a numerical context and of the optimisation of algorithms on high performance architectures.,Apply fundamental programming concepts for medium scale programs.
0.9185,be able to reason about the accuracy of mathematical and numerical models of real physical phenomena.,"Understand, apply, and analyse state and state machines in expressing computations."
0.9012,have an awareness of the modern field of computational science and engineering and of the impact of high performance computing on science and industry.,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process."
0.9248,have an understanding of the various paradigms of high performance computing and their potential for performance and programmability.,Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance
0.9280,"be capable of writing algorithms that yield good performance on high-performance architectures, and to be able to estimate and evaluate their performance.",Explain how system components contribute to performance; understand Amdahl’s law and its limitations; design and conduct performance experiments; use software tools to profile and measure program performance

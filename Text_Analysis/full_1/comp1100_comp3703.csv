score,s1,s2
0.9076,"Software Security covers advanced techniques in software vulnerability assessment, discovery and mitigation.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9329,"These include: common patterns in software vulnerabilities, such as stack-based buffer overflow, format string vulnerabilities, and heap-based vulnerabilities; exploitation techniques such as code injection, return-oriented-programming; techniques for vulnerability discovery, such as program binaries reverse engineering, fuzzing and symbolic execution; and mitigation techniques such as memory protection mechanisms, input sanitation, and control flow integrity protection.","Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions."
0.9441,"The course features hands-on lectures and labs to analyse software vulnerabilities, both in the source code and in program binaries, and design and implement appropriate mitigation techniques.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9096,Demonstrate a thorough understanding of common sources of vulnerabilities in software.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9140,Demonstrate a thorough understanding in exploitation techniques against software vulnerabilities and defensive techniques against these exploitations.,Describe and apply alternative computational paradigms to simple problems.
0.9218,Demonstrate proficiency in software reverse engineering.,"Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9379,"Demonstrate proficiency in vulnerability discovery processes, from both source code and binary.","Describe, understand and evolve programs, via documentation, testing, and debugging."
0.9233,"Apply the vulnerability discovery techniques to real-world software, analyse their vulnerabilities and design and implement appropriate mitigation techniques.",Describe and apply alternative computational paradigms to simple problems.

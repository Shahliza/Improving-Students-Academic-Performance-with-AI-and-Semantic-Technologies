score,s1,s2
0.8863,This course is the first of three core computer science courses on programming.,explain the role of Software Engineering within the broader context of Systems Engineering.
0.9318,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems."
0.9096,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",explain the role of Software Engineering within the broader context of Systems Engineering.
0.9108,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9034,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9322,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9071,The functional paradigm demonstrates elegant solutions to many programming problems.,describe the holistic and multi-disciplinary nature of complex engineering projects.
0.9081,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.9050,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9170,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.
0.9061,These include distributed software revision control systems.,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams."
0.9205,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",Students will also improve their understanding of and commitment to ethical and professional responsibilities.
0.9138,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",Design for sustainability: approaches that integrate sustainability principles into the design process.
0.8960,Understand basic types and the benefits of static typing.,Systems concepts.
0.8941,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9240,"Describe, understand and evolve programs, via documentation, testing, and debugging.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9128,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9158,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification."
0.9251,Describe and apply alternative computational paradigms to simple problems.,describe the holistic and multi-disciplinary nature of complex engineering projects.
0.9065,Understand the legal context for protection of software as intellectual property.,explain the role of Software Engineering within the broader context of Systems Engineering.

score,s1,s2
0.8926,This course is the first of three core computer science courses on programming.,This will be achieved by introducing students to important design methodologies.
0.9468,It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development.,We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.9160,"Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.",We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.9181,"The course covers functional programming in depth, developing the core idea of functions operating on data structures.",We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.8970,"Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9285,"Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9117,The functional paradigm demonstrates elegant solutions to many programming problems.,"We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."
0.9144,"The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences.",This will be achieved by introducing students to important design methodologies.
0.8943,"Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.","Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.9342,The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree.,"Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.8930,These include distributed software revision control systems.,"We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."
0.9376,"The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.9128,"Apply fundamental programming concepts, using a functional programming language, to solve simple problems.",We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.8946,Understand basic types and the benefits of static typing.,"Knowledge, practices and tools considered in this course will include process models, requirements engineering, design, modelling and user experience."
0.8910,"Distinguish language definition from implementation, syntax and parsing from semantics and evaluation.","Demonstrate an understanding of the following key software engineering activities within the context of a realistic software engineering process (Requirements, Design, Construction, Architectures, Testing, verification and validation)"
0.9317,"Describe, understand and evolve programs, via documentation, testing, and debugging.","Demonstrate an understanding of the following key software engineering activities within the context of a realistic software engineering process (Requirements, Design, Construction, Architectures, Testing, verification and validation)"
0.9103,"Discuss, use, and apply the fundamentals of data structures, algorithms, and design; create, implement, and debug algorithms for solving simple problems, including recursively, using divide-and-conquer, and via decomposition.","Demonstrate an ability to use professional judgement to select and apply appropriate knowledge, practices and tools to analyse, design and solve problems relating to the software engineering activities listed above."
0.9002,"Discuss basic algorithmic analysis for simple algorithms; determine appropriate algorithmic approaches to a problem (brute-force, greedy, divide-and-conquer, recursive backtracking, heuristic, dynamic programming).","We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."
0.9214,Describe and apply alternative computational paradigms to simple problems.,We will build on previous programming courses to deepen and broaden students' knowledge and understanding of the practices and tools used to build large software systems within complex environments.
0.9006,Understand the legal context for protection of software as intellectual property.,"We will use real-world examples such as distributed, high-integrity, web-based systems where rigorous software engineering can demonstrably enhance business value."

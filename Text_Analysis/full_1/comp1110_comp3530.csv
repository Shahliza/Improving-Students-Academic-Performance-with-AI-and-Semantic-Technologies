score,s1,s2
0.8923,"Society relies on many complex systems of interacting technology, people, processes, laws and other elements. Examples of such systems include air transport, telecommunications and energy supply.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9166,"Systems Engineering is a holistic, multi-disciplinary and well established approach to the engineering of these complex systems.","Apply fundamental programming concepts, using an object oriented programming language, to solve substantial problems."
0.9192,"Because software is a critical component of such systems, Software Engineers will often work in Systems Engineering teams.","Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.8948,Systems concepts.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9117,The Systems Engineering life-cycle and processes.,"The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9436,"Conceptual system design: including problem definition, technical performance measures, quality function deployment (QFD), trade-off analyses, and system specification.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.8995,"Preliminary system design: subsystem design requirements, design review.","The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced."
0.9395,"Detailed design and development: Detailed design requirements and design engineering activities; review and feedback, and incorporation of design changes.","Develop, understand, test, and evolve substantial programs using a modern IDE, and associated configuration tools; understand common coding errors and how to avoid them; practice fundamental defensive programming; perform individual and team program reviews; use established design principles to organize a software system."
0.8970,"Design testing, evaluation and validation.","Deliver and evaluate basic technical documents, presentations, and group interactions, using appropriate tools."
0.9188,Design for sustainability: approaches that integrate sustainability principles into the design process.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9081,Integration of Systems Engineering and Software Engineering activities.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9182,describe the holistic and multi-disciplinary nature of complex engineering projects.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8939,describe the Systems Engineering life-cycle.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.8984,identify and explain the activities involved in each phase of the Systems Engineering life-cycle.,This course introduces students to the fundamentals of software development with a substantial group software project at its center.
0.9175,explain the role of Software Engineering within the broader context of Systems Engineering.,"Major foci are data structures, object oriented programming, and an introduction to software engineering."
0.9258,Students will also improve their ability to understand and solve complex and ill-defined problems.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9259,Students will also improve their ability to communicate with the multi-disciplinary engineering team and the community at large.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9292,Students will also improve their understanding of and commitment to ethical and professional responsibilities.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
0.9245,Students will also improve their ability to function as an individual and as a team leader and member in multi-disciplinary and multi-cultural teams.,"Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction."
